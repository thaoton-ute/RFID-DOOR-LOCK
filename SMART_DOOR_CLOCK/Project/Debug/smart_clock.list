
smart_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ba4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f4  08007d44  08007d44  00017d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f38  08007f38  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  08007f38  08007f38  00017f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f40  08007f40  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f40  08007f40  00017f40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f44  08007f44  00017f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08007f48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000048c  20000064  08007fac  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f0  08007fac  000204f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   000180ef  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000041c1  00000000  00000000  000381c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001788  00000000  00000000  0003c388  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000121e  00000000  00000000  0003db10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a4a8  00000000  00000000  0003ed2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000200f8  00000000  00000000  000591d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094583  00000000  00000000  000792ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006558  00000000  00000000  0010d854  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  00113dac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007d2c 	.word	0x08007d2c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08007d2c 	.word	0x08007d2c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <flash_load>:
/* Private function prototypes ---------------------------------------------- */

/* Public implementations --------------------------------------------------- */

void flash_load()
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
    // Read the initial value of current_sector from flash
    current_sector = read_current_sector_from_flash();
 8000590:	f000 f8ae 	bl	80006f0 <read_current_sector_from_flash>
 8000594:	4603      	mov	r3, r0
 8000596:	4a11      	ldr	r2, [pc, #68]	; (80005dc <flash_load+0x50>)
 8000598:	6013      	str	r3, [r2, #0]
    // Check if the data read from flash is valid
    if (current_sector == (uint32_t)SECTOR5_ADDRESS || current_sector == (uint32_t)SECTOR6_ADDRESS)
 800059a:	4b10      	ldr	r3, [pc, #64]	; (80005dc <flash_load+0x50>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4a10      	ldr	r2, [pc, #64]	; (80005e0 <flash_load+0x54>)
 80005a0:	4293      	cmp	r3, r2
 80005a2:	d004      	beq.n	80005ae <flash_load+0x22>
 80005a4:	4b0d      	ldr	r3, [pc, #52]	; (80005dc <flash_load+0x50>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	4a0e      	ldr	r2, [pc, #56]	; (80005e4 <flash_load+0x58>)
 80005aa:	4293      	cmp	r3, r2
 80005ac:	d108      	bne.n	80005c0 <flash_load+0x34>
    {
        // Count the number of events stored in the current sector
        event_index = count_event_in_sector(current_sector);
 80005ae:	4b0b      	ldr	r3, [pc, #44]	; (80005dc <flash_load+0x50>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4618      	mov	r0, r3
 80005b4:	f000 f81a 	bl	80005ec <count_event_in_sector>
 80005b8:	4603      	mov	r3, r0
 80005ba:	4a0b      	ldr	r2, [pc, #44]	; (80005e8 <flash_load+0x5c>)
 80005bc:	6013      	str	r3, [r2, #0]
 80005be:	e00b      	b.n	80005d8 <flash_load+0x4c>
    }
    else
    {
        // If current_sector is invalid, initialize with the default value
        event_index = 0;
 80005c0:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <flash_load+0x5c>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
        current_sector = SECTOR5_ADDRESS; // or another default value if needed
 80005c6:	4b05      	ldr	r3, [pc, #20]	; (80005dc <flash_load+0x50>)
 80005c8:	4a05      	ldr	r2, [pc, #20]	; (80005e0 <flash_load+0x54>)
 80005ca:	601a      	str	r2, [r3, #0]

        // Save the default value to flash
        save_current_sector_to_flash(current_sector);
 80005cc:	4b03      	ldr	r3, [pc, #12]	; (80005dc <flash_load+0x50>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4618      	mov	r0, r3
 80005d2:	f000 f87d 	bl	80006d0 <save_current_sector_to_flash>
    }
}
 80005d6:	bf00      	nop
 80005d8:	bf00      	nop
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	20000084 	.word	0x20000084
 80005e0:	08020000 	.word	0x08020000
 80005e4:	08040000 	.word	0x08040000
 80005e8:	20000080 	.word	0x20000080

080005ec <count_event_in_sector>:

size_t count_event_in_sector(uint32_t sector_address)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
    size_t event_count = 0;
 80005f4:	2300      	movs	r3, #0
 80005f6:	617b      	str	r3, [r7, #20]
    ds1307_time_t event_data;
    uint32_t address = sector_address;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	613b      	str	r3, [r7, #16]

    // Read each event until the maximum limit is reached
    while (event_count < MAX_EVENTS)
 80005fc:	e012      	b.n	8000624 <count_event_in_sector+0x38>
    {
        flash_read_array(address, (uint8_t *)&event_data, sizeof(ds1307_time_t));
 80005fe:	f107 0308 	add.w	r3, r7, #8
 8000602:	2208      	movs	r2, #8
 8000604:	4619      	mov	r1, r3
 8000606:	6938      	ldr	r0, [r7, #16]
 8000608:	f001 ff7c 	bl	8002504 <flash_read_array>

        // Check if the data is 0xFF, indicating the end of events
        if (event_data.seconds == 0xFF && event_data.minutes == 0xFF)
 800060c:	7a3b      	ldrb	r3, [r7, #8]
 800060e:	2bff      	cmp	r3, #255	; 0xff
 8000610:	d102      	bne.n	8000618 <count_event_in_sector+0x2c>
 8000612:	7a7b      	ldrb	r3, [r7, #9]
 8000614:	2bff      	cmp	r3, #255	; 0xff
 8000616:	d009      	beq.n	800062c <count_event_in_sector+0x40>
        {
            break;
        }

        // Increment the event count
        event_count++;
 8000618:	697b      	ldr	r3, [r7, #20]
 800061a:	3301      	adds	r3, #1
 800061c:	617b      	str	r3, [r7, #20]

        // Move to the next event
        address += sizeof(ds1307_time_t);
 800061e:	693b      	ldr	r3, [r7, #16]
 8000620:	3308      	adds	r3, #8
 8000622:	613b      	str	r3, [r7, #16]
    while (event_count < MAX_EVENTS)
 8000624:	697b      	ldr	r3, [r7, #20]
 8000626:	2b63      	cmp	r3, #99	; 0x63
 8000628:	d9e9      	bls.n	80005fe <count_event_in_sector+0x12>
 800062a:	e000      	b.n	800062e <count_event_in_sector+0x42>
            break;
 800062c:	bf00      	nop
    }

    return event_count;
 800062e:	697b      	ldr	r3, [r7, #20]
}
 8000630:	4618      	mov	r0, r3
 8000632:	3718      	adds	r7, #24
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}

08000638 <save_time_to_flash>:

void save_time_to_flash(ds1307_time_t *timeData)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
    // Check if event_index exceeds MAX_EVENTS
    if (event_index >= MAX_EVENTS)
 8000640:	4b15      	ldr	r3, [pc, #84]	; (8000698 <save_time_to_flash+0x60>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2b63      	cmp	r3, #99	; 0x63
 8000646:	d90f      	bls.n	8000668 <save_time_to_flash+0x30>
    {
        // Switch to another sector
        current_sector = switch_to_next_sector(current_sector);
 8000648:	4b14      	ldr	r3, [pc, #80]	; (800069c <save_time_to_flash+0x64>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4618      	mov	r0, r3
 800064e:	f000 f863 	bl	8000718 <switch_to_next_sector>
 8000652:	4603      	mov	r3, r0
 8000654:	4a11      	ldr	r2, [pc, #68]	; (800069c <save_time_to_flash+0x64>)
 8000656:	6013      	str	r3, [r2, #0]

        // Save current_sector to flash
        save_current_sector_to_flash(current_sector);
 8000658:	4b10      	ldr	r3, [pc, #64]	; (800069c <save_time_to_flash+0x64>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4618      	mov	r0, r3
 800065e:	f000 f837 	bl	80006d0 <save_current_sector_to_flash>

        // Erase the new sector (Not implemented in this code)

        // Reset event index
        event_index = 0;
 8000662:	4b0d      	ldr	r3, [pc, #52]	; (8000698 <save_time_to_flash+0x60>)
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
    }

    uint32_t address = current_sector;
 8000668:	4b0c      	ldr	r3, [pc, #48]	; (800069c <save_time_to_flash+0x64>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	60fb      	str	r3, [r7, #12]
    // Save currentTime to flash and increment event_index
    address += event_index * sizeof(ds1307_time_t);
 800066e:	4b0a      	ldr	r3, [pc, #40]	; (8000698 <save_time_to_flash+0x60>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	00db      	lsls	r3, r3, #3
 8000674:	68fa      	ldr	r2, [r7, #12]
 8000676:	4413      	add	r3, r2
 8000678:	60fb      	str	r3, [r7, #12]
    flash_write_array(address, (uint8_t *)timeData, sizeof(ds1307_time_t));
 800067a:	2208      	movs	r2, #8
 800067c:	6879      	ldr	r1, [r7, #4]
 800067e:	68f8      	ldr	r0, [r7, #12]
 8000680:	f001 ff0e 	bl	80024a0 <flash_write_array>
    event_index++;
 8000684:	4b04      	ldr	r3, [pc, #16]	; (8000698 <save_time_to_flash+0x60>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	3301      	adds	r3, #1
 800068a:	4a03      	ldr	r2, [pc, #12]	; (8000698 <save_time_to_flash+0x60>)
 800068c:	6013      	str	r3, [r2, #0]
}
 800068e:	bf00      	nop
 8000690:	3710      	adds	r7, #16
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000080 	.word	0x20000080
 800069c:	20000084 	.word	0x20000084

080006a0 <read_time_from_flash>:

void read_time_from_flash(ds1307_time_t *timeData, size_t index)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	6039      	str	r1, [r7, #0]
    uint32_t address = current_sector;
 80006aa:	4b08      	ldr	r3, [pc, #32]	; (80006cc <read_time_from_flash+0x2c>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	60fb      	str	r3, [r7, #12]
    address += index * sizeof(ds1307_time_t);
 80006b0:	683b      	ldr	r3, [r7, #0]
 80006b2:	00db      	lsls	r3, r3, #3
 80006b4:	68fa      	ldr	r2, [r7, #12]
 80006b6:	4413      	add	r3, r2
 80006b8:	60fb      	str	r3, [r7, #12]
    flash_read_array(address, (uint8_t *)timeData, sizeof(ds1307_time_t));
 80006ba:	2208      	movs	r2, #8
 80006bc:	6879      	ldr	r1, [r7, #4]
 80006be:	68f8      	ldr	r0, [r7, #12]
 80006c0:	f001 ff20 	bl	8002504 <flash_read_array>
}
 80006c4:	bf00      	nop
 80006c6:	3710      	adds	r7, #16
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20000084 	.word	0x20000084

080006d0 <save_current_sector_to_flash>:

void save_current_sector_to_flash(uint32_t current_sector)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
    flash_write_array(CURRENT_SECTOR_ADDRESS, (uint8_t *)&current_sector, sizeof(uint32_t));
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	2204      	movs	r2, #4
 80006dc:	4619      	mov	r1, r3
 80006de:	4803      	ldr	r0, [pc, #12]	; (80006ec <save_current_sector_to_flash+0x1c>)
 80006e0:	f001 fede 	bl	80024a0 <flash_write_array>
}
 80006e4:	bf00      	nop
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	08010004 	.word	0x08010004

080006f0 <read_current_sector_from_flash>:

uint32_t read_current_sector_from_flash()
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b082      	sub	sp, #8
 80006f4:	af00      	add	r7, sp, #0
    uint32_t current_sector = 0xFFFFFFFF; // Default value when no data is available
 80006f6:	f04f 33ff 	mov.w	r3, #4294967295
 80006fa:	607b      	str	r3, [r7, #4]
    flash_read_array(CURRENT_SECTOR_ADDRESS, (uint8_t *)&current_sector, sizeof(uint32_t));
 80006fc:	1d3b      	adds	r3, r7, #4
 80006fe:	2204      	movs	r2, #4
 8000700:	4619      	mov	r1, r3
 8000702:	4804      	ldr	r0, [pc, #16]	; (8000714 <read_current_sector_from_flash+0x24>)
 8000704:	f001 fefe 	bl	8002504 <flash_read_array>
    return current_sector;
 8000708:	687b      	ldr	r3, [r7, #4]
}
 800070a:	4618      	mov	r0, r3
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	08010004 	.word	0x08010004

08000718 <switch_to_next_sector>:

uint32_t switch_to_next_sector(uint32_t current_sector)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
    if (current_sector == SECTOR5_ADDRESS)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	4a06      	ldr	r2, [pc, #24]	; (800073c <switch_to_next_sector+0x24>)
 8000724:	4293      	cmp	r3, r2
 8000726:	d101      	bne.n	800072c <switch_to_next_sector+0x14>
    {
        return SECTOR6_ADDRESS;
 8000728:	4b05      	ldr	r3, [pc, #20]	; (8000740 <switch_to_next_sector+0x28>)
 800072a:	e000      	b.n	800072e <switch_to_next_sector+0x16>
    }
    else
    {
        return SECTOR5_ADDRESS;
 800072c:	4b03      	ldr	r3, [pc, #12]	; (800073c <switch_to_next_sector+0x24>)
    }
}
 800072e:	4618      	mov	r0, r3
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	08020000 	.word	0x08020000
 8000740:	08040000 	.word	0x08040000

08000744 <flash_read_and_send_uart>:

void flash_read_and_send_uart()
{
 8000744:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000746:	b08f      	sub	sp, #60	; 0x3c
 8000748:	af04      	add	r7, sp, #16
    ds1307_time_t stored_time;
    char timeString[20];
    for (size_t i = 0; i < event_index; i++)
 800074a:	2300      	movs	r3, #0
 800074c:	627b      	str	r3, [r7, #36]	; 0x24
 800074e:	e034      	b.n	80007ba <flash_read_and_send_uart+0x76>
    {
        read_time_from_flash(&stored_time, i);
 8000750:	f107 031c 	add.w	r3, r7, #28
 8000754:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000756:	4618      	mov	r0, r3
 8000758:	f7ff ffa2 	bl	80006a0 <read_time_from_flash>
        sprintf(timeString, "%02d/%02d/%04d %02d:%02d:%02d",
                stored_time.date, stored_time.month, stored_time.year,
 800075c:	f897 3020 	ldrb.w	r3, [r7, #32]
        sprintf(timeString, "%02d/%02d/%04d %02d:%02d:%02d",
 8000760:	461d      	mov	r5, r3
                stored_time.date, stored_time.month, stored_time.year,
 8000762:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
        sprintf(timeString, "%02d/%02d/%04d %02d:%02d:%02d",
 8000766:	461e      	mov	r6, r3
                stored_time.date, stored_time.month, stored_time.year,
 8000768:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
                stored_time.hours, stored_time.minutes, stored_time.seconds);
 800076a:	7fba      	ldrb	r2, [r7, #30]
 800076c:	7f79      	ldrb	r1, [r7, #29]
 800076e:	7f38      	ldrb	r0, [r7, #28]
        sprintf(timeString, "%02d/%02d/%04d %02d:%02d:%02d",
 8000770:	4604      	mov	r4, r0
 8000772:	f107 0008 	add.w	r0, r7, #8
 8000776:	9403      	str	r4, [sp, #12]
 8000778:	9102      	str	r1, [sp, #8]
 800077a:	9201      	str	r2, [sp, #4]
 800077c:	9300      	str	r3, [sp, #0]
 800077e:	4633      	mov	r3, r6
 8000780:	462a      	mov	r2, r5
 8000782:	4913      	ldr	r1, [pc, #76]	; (80007d0 <flash_read_and_send_uart+0x8c>)
 8000784:	f006 fe1e 	bl	80073c4 <siprintf>
        uart_transmit((uint8_t *)timeString, strlen(timeString), 300);
 8000788:	f107 0308 	add.w	r3, r7, #8
 800078c:	4618      	mov	r0, r3
 800078e:	f7ff fd27 	bl	80001e0 <strlen>
 8000792:	4603      	mov	r3, r0
 8000794:	b299      	uxth	r1, r3
 8000796:	f107 0308 	add.w	r3, r7, #8
 800079a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800079e:	4618      	mov	r0, r3
 80007a0:	f001 fe54 	bl	800244c <uart_transmit>
        char newline = '\n';
 80007a4:	230a      	movs	r3, #10
 80007a6:	71fb      	strb	r3, [r7, #7]
        uart_transmit((uint8_t *)&newline, 1, 100);
 80007a8:	1dfb      	adds	r3, r7, #7
 80007aa:	2264      	movs	r2, #100	; 0x64
 80007ac:	2101      	movs	r1, #1
 80007ae:	4618      	mov	r0, r3
 80007b0:	f001 fe4c 	bl	800244c <uart_transmit>
    for (size_t i = 0; i < event_index; i++)
 80007b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007b6:	3301      	adds	r3, #1
 80007b8:	627b      	str	r3, [r7, #36]	; 0x24
 80007ba:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <flash_read_and_send_uart+0x90>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80007c0:	429a      	cmp	r2, r3
 80007c2:	d3c5      	bcc.n	8000750 <flash_read_and_send_uart+0xc>
    }
}
 80007c4:	bf00      	nop
 80007c6:	bf00      	nop
 80007c8:	372c      	adds	r7, #44	; 0x2c
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007ce:	bf00      	nop
 80007d0:	08007d44 	.word	0x08007d44
 80007d4:	20000080 	.word	0x20000080

080007d8 <flash_load_password>:

//////////////// Password Management /////////////////////////

void flash_load_password()
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
//		uint8_t arr[4] = {56,56,56,56};
//		save_password_to_flash(arr);
    // Read the number of passwords from flash and increment the corresponding index
    password_index = count_password_in_sector(password_sector);
 80007dc:	4b04      	ldr	r3, [pc, #16]	; (80007f0 <flash_load_password+0x18>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4618      	mov	r0, r3
 80007e2:	f000 f809 	bl	80007f8 <count_password_in_sector>
 80007e6:	4603      	mov	r3, r0
 80007e8:	4a02      	ldr	r2, [pc, #8]	; (80007f4 <flash_load_password+0x1c>)
 80007ea:	6013      	str	r3, [r2, #0]
}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000000 	.word	0x20000000
 80007f4:	20000088 	.word	0x20000088

080007f8 <count_password_in_sector>:

size_t count_password_in_sector(uint32_t sector_address)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b086      	sub	sp, #24
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
    size_t password_count = 0;
 8000800:	2300      	movs	r3, #0
 8000802:	617b      	str	r3, [r7, #20]
    uint8_t password_data[PASSWORD_LENGTH];
    uint32_t address = sector_address;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	613b      	str	r3, [r7, #16]

    // Read each password until the maximum limit is reached
    while (password_count < MAX_PASSWORDS)
 8000808:	e018      	b.n	800083c <count_password_in_sector+0x44>
    {
        flash_read_array(address, password_data, PASSWORD_LENGTH);
 800080a:	f107 030c 	add.w	r3, r7, #12
 800080e:	2204      	movs	r2, #4
 8000810:	4619      	mov	r1, r3
 8000812:	6938      	ldr	r0, [r7, #16]
 8000814:	f001 fe76 	bl	8002504 <flash_read_array>

        // Check if the data is 0xFF, indicating the end of passwords
        if (password_data[0] == 0xFF && password_data[1] == 0xFF &&
 8000818:	7b3b      	ldrb	r3, [r7, #12]
 800081a:	2bff      	cmp	r3, #255	; 0xff
 800081c:	d108      	bne.n	8000830 <count_password_in_sector+0x38>
 800081e:	7b7b      	ldrb	r3, [r7, #13]
 8000820:	2bff      	cmp	r3, #255	; 0xff
 8000822:	d105      	bne.n	8000830 <count_password_in_sector+0x38>
            password_data[2] == 0xFF && password_data[3] == 0xFF)
 8000824:	7bbb      	ldrb	r3, [r7, #14]
        if (password_data[0] == 0xFF && password_data[1] == 0xFF &&
 8000826:	2bff      	cmp	r3, #255	; 0xff
 8000828:	d102      	bne.n	8000830 <count_password_in_sector+0x38>
            password_data[2] == 0xFF && password_data[3] == 0xFF)
 800082a:	7bfb      	ldrb	r3, [r7, #15]
 800082c:	2bff      	cmp	r3, #255	; 0xff
 800082e:	d009      	beq.n	8000844 <count_password_in_sector+0x4c>
        {
            break;
        }

        // Increment the password count
        password_count++;
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	3301      	adds	r3, #1
 8000834:	617b      	str	r3, [r7, #20]

        // Move to the next password
        address += PASSWORD_LENGTH;
 8000836:	693b      	ldr	r3, [r7, #16]
 8000838:	3304      	adds	r3, #4
 800083a:	613b      	str	r3, [r7, #16]
    while (password_count < MAX_PASSWORDS)
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	2b63      	cmp	r3, #99	; 0x63
 8000840:	d9e3      	bls.n	800080a <count_password_in_sector+0x12>
 8000842:	e000      	b.n	8000846 <count_password_in_sector+0x4e>
            break;
 8000844:	bf00      	nop
    }

    return password_count;
 8000846:	697b      	ldr	r3, [r7, #20]
}
 8000848:	4618      	mov	r0, r3
 800084a:	3718      	adds	r7, #24
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <save_password_to_flash>:

void save_password_to_flash(uint8_t *password_data)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
    // Check if password_index exceeds MAX_PASSWORDS
    if (password_index >= MAX_PASSWORDS)
 8000858:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <save_password_to_flash+0x44>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2b63      	cmp	r3, #99	; 0x63
 800085e:	d902      	bls.n	8000866 <save_password_to_flash+0x16>
    {
        // You may add handling for switching to a new password sector here

        // Reset password_index
        password_index = 0;
 8000860:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <save_password_to_flash+0x44>)
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
    }

    uint32_t address = password_sector;
 8000866:	4b0c      	ldr	r3, [pc, #48]	; (8000898 <save_password_to_flash+0x48>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	60fb      	str	r3, [r7, #12]
    // Save the password to flash
    address += password_index * PASSWORD_LENGTH;
 800086c:	4b09      	ldr	r3, [pc, #36]	; (8000894 <save_password_to_flash+0x44>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	009b      	lsls	r3, r3, #2
 8000872:	68fa      	ldr	r2, [r7, #12]
 8000874:	4413      	add	r3, r2
 8000876:	60fb      	str	r3, [r7, #12]
    flash_write_array(address, password_data, PASSWORD_LENGTH);
 8000878:	2204      	movs	r2, #4
 800087a:	6879      	ldr	r1, [r7, #4]
 800087c:	68f8      	ldr	r0, [r7, #12]
 800087e:	f001 fe0f 	bl	80024a0 <flash_write_array>

    // Increment password_index
    password_index++;
 8000882:	4b04      	ldr	r3, [pc, #16]	; (8000894 <save_password_to_flash+0x44>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	3301      	adds	r3, #1
 8000888:	4a02      	ldr	r2, [pc, #8]	; (8000894 <save_password_to_flash+0x44>)
 800088a:	6013      	str	r3, [r2, #0]
}
 800088c:	bf00      	nop
 800088e:	3710      	adds	r7, #16
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	20000088 	.word	0x20000088
 8000898:	20000000 	.word	0x20000000

0800089c <read_password_from_flash>:

void read_password_from_flash(uint8_t *password_data, size_t index)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b084      	sub	sp, #16
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	6039      	str	r1, [r7, #0]
    uint32_t address = password_sector;
 80008a6:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <read_password_from_flash+0x2c>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	60fb      	str	r3, [r7, #12]
    address += index * PASSWORD_LENGTH;
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	009b      	lsls	r3, r3, #2
 80008b0:	68fa      	ldr	r2, [r7, #12]
 80008b2:	4413      	add	r3, r2
 80008b4:	60fb      	str	r3, [r7, #12]
    flash_read_array(address, password_data, PASSWORD_LENGTH);
 80008b6:	2204      	movs	r2, #4
 80008b8:	6879      	ldr	r1, [r7, #4]
 80008ba:	68f8      	ldr	r0, [r7, #12]
 80008bc:	f001 fe22 	bl	8002504 <flash_read_array>
}
 80008c0:	bf00      	nop
 80008c2:	3710      	adds	r7, #16
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	20000000 	.word	0x20000000

080008cc <check_password>:

bool check_password(uint8_t *enteredPassword)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
    // Check the last stored password (corresponding to the last index)
    if (password_index > 0)
 80008d4:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <check_password+0x3c>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d010      	beq.n	80008fe <check_password+0x32>
    {
        read_password_from_flash(stored_password, password_index - 1);
 80008dc:	4b0a      	ldr	r3, [pc, #40]	; (8000908 <check_password+0x3c>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	3b01      	subs	r3, #1
 80008e2:	4619      	mov	r1, r3
 80008e4:	4809      	ldr	r0, [pc, #36]	; (800090c <check_password+0x40>)
 80008e6:	f7ff ffd9 	bl	800089c <read_password_from_flash>

        // Compare the entered password with the last stored password
        if (memcmp(enteredPassword, stored_password, PASSWORD_LENGTH) == 0)
 80008ea:	2204      	movs	r2, #4
 80008ec:	4907      	ldr	r1, [pc, #28]	; (800090c <check_password+0x40>)
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	f006 fd88 	bl	8007404 <memcmp>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d101      	bne.n	80008fe <check_password+0x32>
        {
            return true; // Passwords match
 80008fa:	2301      	movs	r3, #1
 80008fc:	e000      	b.n	8000900 <check_password+0x34>
        }
    }

    return false; // Passwords do not match
 80008fe:	2300      	movs	r3, #0
}
 8000900:	4618      	mov	r0, r3
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000088 	.word	0x20000088
 800090c:	2000008c 	.word	0x2000008c

08000910 <h_display_tap_master_card>:
/* Private function prototypes ---------------------------------------------- */

/* Public implementations --------------------------------------------------- */

void h_display_tap_master_card()
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
   	lcd_clear();
 8000914:	f001 f92c 	bl	8001b70 <lcd_clear>
	lcd_display(0, 1, "tap master card");
 8000918:	4a05      	ldr	r2, [pc, #20]	; (8000930 <h_display_tap_master_card+0x20>)
 800091a:	2101      	movs	r1, #1
 800091c:	2000      	movs	r0, #0
 800091e:	f001 f9b6 	bl	8001c8e <lcd_display>
	lcd_display(1, 1, "");
 8000922:	4a04      	ldr	r2, [pc, #16]	; (8000934 <h_display_tap_master_card+0x24>)
 8000924:	2101      	movs	r1, #1
 8000926:	2001      	movs	r0, #1
 8000928:	f001 f9b1 	bl	8001c8e <lcd_display>
}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}
 8000930:	08007d64 	.word	0x08007d64
 8000934:	08007d74 	.word	0x08007d74

08000938 <h_display_time>:

void h_display_time()
{
 8000938:	b5b0      	push	{r4, r5, r7, lr}
 800093a:	b08e      	sub	sp, #56	; 0x38
 800093c:	af04      	add	r7, sp, #16
	/* Get time "HH:MM:SS" --> string*/
	ds1307_time_t time;
	static char time_string[15];		// "HH:MM:SS   dow" + ký tự null
	static char date_string[11];	// "DD:MM:YYYY" + ký tự null
	const char *const dow_names[] = {"Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"};
 800093e:	4b22      	ldr	r3, [pc, #136]	; (80009c8 <h_display_time+0x90>)
 8000940:	1d3c      	adds	r4, r7, #4
 8000942:	461d      	mov	r5, r3
 8000944:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000946:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000948:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800094c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	ds1307_get_date_time(&time);
 8000950:	f107 0320 	add.w	r3, r7, #32
 8000954:	4618      	mov	r0, r3
 8000956:	f001 f817 	bl	8001988 <ds1307_get_date_time>
 	// Convert time to string
	snprintf(time_string, sizeof(time_string), "%02d:%02d:%02d   %s", time.hours, time.minutes, time.seconds, dow_names[time.dow - 1]);
 800095a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800095e:	4618      	mov	r0, r3
 8000960:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000964:	461a      	mov	r2, r3
 8000966:	f897 3020 	ldrb.w	r3, [r7, #32]
 800096a:	4619      	mov	r1, r3
 800096c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000970:	3b01      	subs	r3, #1
 8000972:	009b      	lsls	r3, r3, #2
 8000974:	3328      	adds	r3, #40	; 0x28
 8000976:	443b      	add	r3, r7
 8000978:	f853 3c24 	ldr.w	r3, [r3, #-36]
 800097c:	9302      	str	r3, [sp, #8]
 800097e:	9101      	str	r1, [sp, #4]
 8000980:	9200      	str	r2, [sp, #0]
 8000982:	4603      	mov	r3, r0
 8000984:	4a11      	ldr	r2, [pc, #68]	; (80009cc <h_display_time+0x94>)
 8000986:	210f      	movs	r1, #15
 8000988:	4811      	ldr	r0, [pc, #68]	; (80009d0 <h_display_time+0x98>)
 800098a:	f006 fce7 	bl	800735c <sniprintf>
   	sprintf(date_string, "%02d-%02d-%04d", time.date, time.month, time.year);
 800098e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000992:	461a      	mov	r2, r3
 8000994:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8000998:	4619      	mov	r1, r3
 800099a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800099c:	9300      	str	r3, [sp, #0]
 800099e:	460b      	mov	r3, r1
 80009a0:	490c      	ldr	r1, [pc, #48]	; (80009d4 <h_display_time+0x9c>)
 80009a2:	480d      	ldr	r0, [pc, #52]	; (80009d8 <h_display_time+0xa0>)
 80009a4:	f006 fd0e 	bl	80073c4 <siprintf>

   	lcd_clear();
 80009a8:	f001 f8e2 	bl	8001b70 <lcd_clear>
	lcd_display(0, 1, date_string);
 80009ac:	4a0a      	ldr	r2, [pc, #40]	; (80009d8 <h_display_time+0xa0>)
 80009ae:	2101      	movs	r1, #1
 80009b0:	2000      	movs	r0, #0
 80009b2:	f001 f96c 	bl	8001c8e <lcd_display>
	lcd_display(1, 1, time_string);
 80009b6:	4a06      	ldr	r2, [pc, #24]	; (80009d0 <h_display_time+0x98>)
 80009b8:	2101      	movs	r1, #1
 80009ba:	2001      	movs	r0, #1
 80009bc:	f001 f967 	bl	8001c8e <lcd_display>
}
 80009c0:	bf00      	nop
 80009c2:	3728      	adds	r7, #40	; 0x28
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bdb0      	pop	{r4, r5, r7, pc}
 80009c8:	08007db8 	.word	0x08007db8
 80009cc:	08007d78 	.word	0x08007d78
 80009d0:	20000090 	.word	0x20000090
 80009d4:	08007d8c 	.word	0x08007d8c
 80009d8:	200000a0 	.word	0x200000a0

080009dc <h_wrong_card>:

void h_wrong_card()
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
	lcd_clear();
 80009e0:	f001 f8c6 	bl	8001b70 <lcd_clear>
	lcd_display(0, 3, "wrong card");
 80009e4:	4a07      	ldr	r2, [pc, #28]	; (8000a04 <h_wrong_card+0x28>)
 80009e6:	2103      	movs	r1, #3
 80009e8:	2000      	movs	r0, #0
 80009ea:	f001 f950 	bl	8001c8e <lcd_display>
	lcd_display(1, 3, "wait ...");
 80009ee:	4a06      	ldr	r2, [pc, #24]	; (8000a08 <h_wrong_card+0x2c>)
 80009f0:	2103      	movs	r1, #3
 80009f2:	2001      	movs	r0, #1
 80009f4:	f001 f94b 	bl	8001c8e <lcd_display>
	time_delay(2000);
 80009f8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80009fc:	f000 ff47 	bl	800188e <time_delay>
}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	08007dd4 	.word	0x08007dd4
 8000a08:	08007de0 	.word	0x08007de0

08000a0c <h_wrong_pass>:

void h_wrong_pass()
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
	lcd_clear();
 8000a10:	f001 f8ae 	bl	8001b70 <lcd_clear>
	lcd_display(0, 1, "wrong password");
 8000a14:	4a07      	ldr	r2, [pc, #28]	; (8000a34 <h_wrong_pass+0x28>)
 8000a16:	2101      	movs	r1, #1
 8000a18:	2000      	movs	r0, #0
 8000a1a:	f001 f938 	bl	8001c8e <lcd_display>
	lcd_display(1, 2, "enter again");
 8000a1e:	4a06      	ldr	r2, [pc, #24]	; (8000a38 <h_wrong_pass+0x2c>)
 8000a20:	2102      	movs	r1, #2
 8000a22:	2001      	movs	r0, #1
 8000a24:	f001 f933 	bl	8001c8e <lcd_display>
	time_delay(2000);
 8000a28:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a2c:	f000 ff2f 	bl	800188e <time_delay>
}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	08007dec 	.word	0x08007dec
 8000a38:	08007dfc 	.word	0x08007dfc

08000a3c <h_timeout>:

void h_timeout()
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
	lcd_clear();
 8000a40:	f001 f896 	bl	8001b70 <lcd_clear>
	lcd_display(0, 4, "timeout");
 8000a44:	4a07      	ldr	r2, [pc, #28]	; (8000a64 <h_timeout+0x28>)
 8000a46:	2104      	movs	r1, #4
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f001 f920 	bl	8001c8e <lcd_display>
	lcd_display(1, 4, "wait ...");
 8000a4e:	4a06      	ldr	r2, [pc, #24]	; (8000a68 <h_timeout+0x2c>)
 8000a50:	2104      	movs	r1, #4
 8000a52:	2001      	movs	r0, #1
 8000a54:	f001 f91b 	bl	8001c8e <lcd_display>
	time_delay(2000);
 8000a58:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000a5c:	f000 ff17 	bl	800188e <time_delay>
}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	08007e08 	.word	0x08007e08
 8000a68:	08007de0 	.word	0x08007de0

08000a6c <h_block>:

void h_block()
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
	lcd_clear();
 8000a70:	f001 f87e 	bl	8001b70 <lcd_clear>
	lcd_display(0, 3, "block 60s");
 8000a74:	4a07      	ldr	r2, [pc, #28]	; (8000a94 <h_block+0x28>)
 8000a76:	2103      	movs	r1, #3
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f001 f908 	bl	8001c8e <lcd_display>
	lcd_display(1, 3, "wait ...");
 8000a7e:	4a06      	ldr	r2, [pc, #24]	; (8000a98 <h_block+0x2c>)
 8000a80:	2103      	movs	r1, #3
 8000a82:	2001      	movs	r0, #1
 8000a84:	f001 f903 	bl	8001c8e <lcd_display>
	time_delay(60000);
 8000a88:	f64e 2060 	movw	r0, #60000	; 0xea60
 8000a8c:	f000 feff 	bl	800188e <time_delay>
}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	08007e10 	.word	0x08007e10
 8000a98:	08007de0 	.word	0x08007de0

08000a9c <h_display_enter_new_pass>:
	lcd_display(1, 3, "successful");
	time_delay(2000);
}

void h_display_enter_new_pass()
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
	lcd_clear();
 8000aa0:	f001 f866 	bl	8001b70 <lcd_clear>
	lcd_display(0, 3, "enter new");
 8000aa4:	4a05      	ldr	r2, [pc, #20]	; (8000abc <h_display_enter_new_pass+0x20>)
 8000aa6:	2103      	movs	r1, #3
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	f001 f8f0 	bl	8001c8e <lcd_display>
	lcd_display(1, 3, "password");
 8000aae:	4a04      	ldr	r2, [pc, #16]	; (8000ac0 <h_display_enter_new_pass+0x24>)
 8000ab0:	2103      	movs	r1, #3
 8000ab2:	2001      	movs	r0, #1
 8000ab4:	f001 f8eb 	bl	8001c8e <lcd_display>
}
 8000ab8:	bf00      	nop
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	08007e30 	.word	0x08007e30
 8000ac0:	08007e3c 	.word	0x08007e3c

08000ac4 <h_display_enter_current_pass>:

void h_display_enter_current_pass()
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
	lcd_clear();
 8000ac8:	f001 f852 	bl	8001b70 <lcd_clear>
	lcd_display(0, 2, "enter current");
 8000acc:	4a05      	ldr	r2, [pc, #20]	; (8000ae4 <h_display_enter_current_pass+0x20>)
 8000ace:	2102      	movs	r1, #2
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	f001 f8dc 	bl	8001c8e <lcd_display>
	lcd_display(1, 2, "password");
 8000ad6:	4a04      	ldr	r2, [pc, #16]	; (8000ae8 <h_display_enter_current_pass+0x24>)
 8000ad8:	2102      	movs	r1, #2
 8000ada:	2001      	movs	r0, #1
 8000adc:	f001 f8d7 	bl	8001c8e <lcd_display>
}
 8000ae0:	bf00      	nop
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	08007e48 	.word	0x08007e48
 8000ae8:	08007e3c 	.word	0x08007e3c

08000aec <h_display_tap_new_card>:



void h_display_tap_new_card()
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
	lcd_clear();
 8000af0:	f001 f83e 	bl	8001b70 <lcd_clear>
	lcd_display(0, 2, "tap new card");
 8000af4:	4a05      	ldr	r2, [pc, #20]	; (8000b0c <h_display_tap_new_card+0x20>)
 8000af6:	2102      	movs	r1, #2
 8000af8:	2000      	movs	r0, #0
 8000afa:	f001 f8c8 	bl	8001c8e <lcd_display>
	lcd_display(1, 3, "");
 8000afe:	4a04      	ldr	r2, [pc, #16]	; (8000b10 <h_display_tap_new_card+0x24>)
 8000b00:	2103      	movs	r1, #3
 8000b02:	2001      	movs	r0, #1
 8000b04:	f001 f8c3 	bl	8001c8e <lcd_display>
}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	08007e58 	.word	0x08007e58
 8000b10:	08007d74 	.word	0x08007d74

08000b14 <h_display_choose_mode>:

void h_display_choose_mode()
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
	lcd_clear();
 8000b18:	f001 f82a 	bl	8001b70 <lcd_clear>
	lcd_display(0, 1, "1: add card");
 8000b1c:	4a05      	ldr	r2, [pc, #20]	; (8000b34 <h_display_choose_mode+0x20>)
 8000b1e:	2101      	movs	r1, #1
 8000b20:	2000      	movs	r0, #0
 8000b22:	f001 f8b4 	bl	8001c8e <lcd_display>
	lcd_display(1, 1, "2: change pass");
 8000b26:	4a04      	ldr	r2, [pc, #16]	; (8000b38 <h_display_choose_mode+0x24>)
 8000b28:	2101      	movs	r1, #1
 8000b2a:	2001      	movs	r0, #1
 8000b2c:	f001 f8af 	bl	8001c8e <lcd_display>
}
 8000b30:	bf00      	nop
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	08007e68 	.word	0x08007e68
 8000b38:	08007e74 	.word	0x08007e74

08000b3c <h_display_open_door>:

void h_display_open_door()
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
	lcd_clear();
 8000b40:	f001 f816 	bl	8001b70 <lcd_clear>
	lcd_display(0, 3, "open door");
 8000b44:	4a05      	ldr	r2, [pc, #20]	; (8000b5c <h_display_open_door+0x20>)
 8000b46:	2103      	movs	r1, #3
 8000b48:	2000      	movs	r0, #0
 8000b4a:	f001 f8a0 	bl	8001c8e <lcd_display>
	lcd_display(1, 3, "welcome");
 8000b4e:	4a04      	ldr	r2, [pc, #16]	; (8000b60 <h_display_open_door+0x24>)
 8000b50:	2103      	movs	r1, #3
 8000b52:	2001      	movs	r0, #1
 8000b54:	f001 f89b 	bl	8001c8e <lcd_display>
}
 8000b58:	bf00      	nop
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	08007e84 	.word	0x08007e84
 8000b60:	08007e90 	.word	0x08007e90

08000b64 <h_display_close_door>:

void h_display_close_door()
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
	lcd_clear();
 8000b68:	f001 f802 	bl	8001b70 <lcd_clear>
	lcd_display(0, 3, "close door");
 8000b6c:	4a05      	ldr	r2, [pc, #20]	; (8000b84 <h_display_close_door+0x20>)
 8000b6e:	2103      	movs	r1, #3
 8000b70:	2000      	movs	r0, #0
 8000b72:	f001 f88c 	bl	8001c8e <lcd_display>
	lcd_display(1, 4, "");
 8000b76:	4a04      	ldr	r2, [pc, #16]	; (8000b88 <h_display_close_door+0x24>)
 8000b78:	2104      	movs	r1, #4
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	f001 f887 	bl	8001c8e <lcd_display>
}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	08007e98 	.word	0x08007e98
 8000b88:	08007d74 	.word	0x08007d74

08000b8c <open_door>:

void open_door()
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
	h_display_open_door();
 8000b92:	f7ff ffd3 	bl	8000b3c <h_display_open_door>
	ds1307_time_t time;
	ds1307_get_date_time(&time);
 8000b96:	463b      	mov	r3, r7
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f000 fef5 	bl	8001988 <ds1307_get_date_time>
	save_time_to_flash(&time);
 8000b9e:	463b      	mov	r3, r7
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff fd49 	bl	8000638 <save_time_to_flash>
	time_delay(5000);
 8000ba6:	f241 3088 	movw	r0, #5000	; 0x1388
 8000baa:	f000 fe70 	bl	800188e <time_delay>
	h_display_close_door();
 8000bae:	f7ff ffd9 	bl	8000b64 <h_display_close_door>
	time_delay(2000);
 8000bb2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000bb6:	f000 fe6a 	bl	800188e <time_delay>
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <api_keypad_init>:
					 GPIO_TypeDef *COL2_PORT, uint32_t COL2_PIN,
					 GPIO_TypeDef *COL3_PORT, uint32_t COL3_PIN,
					 GPIO_TypeDef *ROW1_PORT, uint32_t ROW1_PIN,
					 GPIO_TypeDef *ROW2_PORT, uint32_t ROW2_PIN,
					 GPIO_TypeDef *ROW3_PORT, uint32_t ROW3_PIN,
					 GPIO_TypeDef *ROW4_PORT, uint32_t ROW4_PIN){
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b090      	sub	sp, #64	; 0x40
 8000bc6:	af0c      	add	r7, sp, #48	; 0x30
 8000bc8:	60f8      	str	r0, [r7, #12]
 8000bca:	60b9      	str	r1, [r7, #8]
 8000bcc:	607a      	str	r2, [r7, #4]
 8000bce:	603b      	str	r3, [r7, #0]
	keypad3x4_init(	keypad, COL1_PORT, COL1_PIN, COL2_PORT, COL2_PIN,
 8000bd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000bd2:	930a      	str	r3, [sp, #40]	; 0x28
 8000bd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bd6:	9309      	str	r3, [sp, #36]	; 0x24
 8000bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000bda:	9308      	str	r3, [sp, #32]
 8000bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bde:	9307      	str	r3, [sp, #28]
 8000be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000be2:	9306      	str	r3, [sp, #24]
 8000be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000be6:	9305      	str	r3, [sp, #20]
 8000be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bea:	9304      	str	r3, [sp, #16]
 8000bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bee:	9303      	str	r3, [sp, #12]
 8000bf0:	6a3b      	ldr	r3, [r7, #32]
 8000bf2:	9302      	str	r3, [sp, #8]
 8000bf4:	69fb      	ldr	r3, [r7, #28]
 8000bf6:	9301      	str	r3, [sp, #4]
 8000bf8:	69bb      	ldr	r3, [r7, #24]
 8000bfa:	9300      	str	r3, [sp, #0]
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	687a      	ldr	r2, [r7, #4]
 8000c00:	68b9      	ldr	r1, [r7, #8]
 8000c02:	68f8      	ldr	r0, [r7, #12]
 8000c04:	f001 f854 	bl	8001cb0 <keypad3x4_init>
							COL3_PORT, COL3_PIN, ROW1_PORT, ROW1_PIN,
							ROW2_PORT, ROW2_PIN, ROW3_PORT, ROW3_PIN,
							ROW4_PORT, ROW4_PIN);
}
 8000c08:	bf00      	nop
 8000c0a:	3710      	adds	r7, #16
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <api_check_button>:

uint8_t api_check_button(keypad_name *keypad, uint8_t key_check)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	460b      	mov	r3, r1
 8000c1a:	70fb      	strb	r3, [r7, #3]
	if (keypad->keychar == key_check)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000c22:	78fa      	ldrb	r2, [r7, #3]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d105      	bne.n	8000c34 <api_check_button+0x24>
	{
		//key char is the var save the key button
		keypad->keychar = 0;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
		//keypad->keychar = 0;
		//keypad->press_flag = 0;
		//keypad->key_last_status = 0;
		return 1;
 8000c30:	2301      	movs	r3, #1
 8000c32:	e000      	b.n	8000c36 <api_check_button+0x26>
	}
	return 0;
 8000c34:	2300      	movs	r3, #0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr

08000c42 <api_check_have_button>:

uint8_t api_check_have_button(keypad_name *keypad)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b082      	sub	sp, #8
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
	keypad_handler(keypad);
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f001 f92c 	bl	8001ea8 <keypad_handler>
	if (keypad->press_flag)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d005      	beq.n	8000c66 <api_check_have_button+0x24>
	{
		keypad->press_flag = 0;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
		//keypad->keychar = 0;
		//keypad->press_flag = 0;
		//keypad->key_last_status = 0;
		return 1;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e000      	b.n	8000c68 <api_check_have_button+0x26>
	}
	return 0;
 8000c66:	2300      	movs	r3, #0
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <api_check_have_button_timeout>:

uint8_t api_check_have_button_timeout(keypad_name *keypad, uint32_t time_out)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	6039      	str	r1, [r7, #0]
	uint32_t time_current = HAL_GetTick();
 8000c7a:	f002 fb5d 	bl	8003338 <HAL_GetTick>
 8000c7e:	60f8      	str	r0, [r7, #12]
	while (HAL_GetTick() - time_current < time_out)
 8000c80:	e00d      	b.n	8000c9e <api_check_have_button_timeout+0x2e>
	{
		keypad_handler(keypad);
 8000c82:	6878      	ldr	r0, [r7, #4]
 8000c84:	f001 f910 	bl	8001ea8 <keypad_handler>
		if(keypad->press_flag)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d005      	beq.n	8000c9e <api_check_have_button_timeout+0x2e>
		{
			keypad->press_flag = 0;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2200      	movs	r2, #0
 8000c96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
			return 1;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e008      	b.n	8000cb0 <api_check_have_button_timeout+0x40>
	while (HAL_GetTick() - time_current < time_out)
 8000c9e:	f002 fb4b 	bl	8003338 <HAL_GetTick>
 8000ca2:	4602      	mov	r2, r0
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	1ad3      	subs	r3, r2, r3
 8000ca8:	683a      	ldr	r2, [r7, #0]
 8000caa:	429a      	cmp	r2, r3
 8000cac:	d8e9      	bhi.n	8000c82 <api_check_have_button_timeout+0x12>
		}
	}
	return 0;
 8000cae:	2300      	movs	r3, #0
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3710      	adds	r7, #16
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <api_check_button_timeout>:

uint8_t api_check_button_timeout(keypad_name *keypad, uint8_t key_check, uint32_t time_out)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b086      	sub	sp, #24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	607a      	str	r2, [r7, #4]
 8000cc4:	72fb      	strb	r3, [r7, #11]
	uint32_t time_current = HAL_GetTick();
 8000cc6:	f002 fb37 	bl	8003338 <HAL_GetTick>
 8000cca:	6178      	str	r0, [r7, #20]
	while (HAL_GetTick() - time_current < time_out)
 8000ccc:	e00e      	b.n	8000cec <api_check_button_timeout+0x34>
	{
		keypad_handler(keypad);
 8000cce:	68f8      	ldr	r0, [r7, #12]
 8000cd0:	f001 f8ea 	bl	8001ea8 <keypad_handler>
		if(keypad->keychar == key_check)
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000cda:	7afa      	ldrb	r2, [r7, #11]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	d105      	bne.n	8000cec <api_check_button_timeout+0x34>
		{
			keypad->keychar = 0;
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
			return 1;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	e008      	b.n	8000cfe <api_check_button_timeout+0x46>
	while (HAL_GetTick() - time_current < time_out)
 8000cec:	f002 fb24 	bl	8003338 <HAL_GetTick>
 8000cf0:	4602      	mov	r2, r0
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	1ad3      	subs	r3, r2, r3
 8000cf6:	687a      	ldr	r2, [r7, #4]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d8e8      	bhi.n	8000cce <api_check_button_timeout+0x16>
		}
	}
	return 0;
 8000cfc:	2300      	movs	r3, #0
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3718      	adds	r7, #24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
	...

08000d08 <api_enter_pass>:

uint8_t api_enter_pass(keypad_name *keypad, uint8_t pass[])
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
	static uint8_t index_display_lcd = 5;
	static uint8_t index_pass = 0;
	lcd_clear();
 8000d12:	f000 ff2d 	bl	8001b70 <lcd_clear>
	lcd_goto_xy(0, 1);
 8000d16:	2101      	movs	r1, #1
 8000d18:	2000      	movs	r0, #0
 8000d1a:	f000 ff40 	bl	8001b9e <lcd_goto_xy>
	lcd_send_string("ENTER PASSWORD");
 8000d1e:	4847      	ldr	r0, [pc, #284]	; (8000e3c <api_enter_pass+0x134>)
 8000d20:	f000 ffa0 	bl	8001c64 <lcd_send_string>
	while (api_check_have_button_timeout(keypad, 10000))
 8000d24:	e07b      	b.n	8000e1e <api_enter_pass+0x116>
	{
		lcd_goto_xy(1, index_display_lcd);
 8000d26:	4b46      	ldr	r3, [pc, #280]	; (8000e40 <api_enter_pass+0x138>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	f000 ff36 	bl	8001b9e <lcd_goto_xy>
		if (keypad->keychar <= '9' && keypad->keychar >= '0')
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000d38:	2b39      	cmp	r3, #57	; 0x39
 8000d3a:	d82a      	bhi.n	8000d92 <api_enter_pass+0x8a>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000d42:	2b2f      	cmp	r3, #47	; 0x2f
 8000d44:	d925      	bls.n	8000d92 <api_enter_pass+0x8a>
		{
			pass[index_pass++] = keypad->keychar;
 8000d46:	4b3f      	ldr	r3, [pc, #252]	; (8000e44 <api_enter_pass+0x13c>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	1c5a      	adds	r2, r3, #1
 8000d4c:	b2d1      	uxtb	r1, r2
 8000d4e:	4a3d      	ldr	r2, [pc, #244]	; (8000e44 <api_enter_pass+0x13c>)
 8000d50:	7011      	strb	r1, [r2, #0]
 8000d52:	461a      	mov	r2, r3
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	4413      	add	r3, r2
 8000d58:	687a      	ldr	r2, [r7, #4]
 8000d5a:	f892 2042 	ldrb.w	r2, [r2, #66]	; 0x42
 8000d5e:	701a      	strb	r2, [r3, #0]
			lcd_send_data(keypad->keychar);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000d66:	4618      	mov	r0, r3
 8000d68:	f000 fed4 	bl	8001b14 <lcd_send_data>
			HAL_Delay(200);
 8000d6c:	20c8      	movs	r0, #200	; 0xc8
 8000d6e:	f002 faef 	bl	8003350 <HAL_Delay>
			lcd_goto_xy(1, index_display_lcd);
 8000d72:	4b33      	ldr	r3, [pc, #204]	; (8000e40 <api_enter_pass+0x138>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	4619      	mov	r1, r3
 8000d78:	2001      	movs	r0, #1
 8000d7a:	f000 ff10 	bl	8001b9e <lcd_goto_xy>
			lcd_send_data('*');
 8000d7e:	202a      	movs	r0, #42	; 0x2a
 8000d80:	f000 fec8 	bl	8001b14 <lcd_send_data>
			index_display_lcd++;
 8000d84:	4b2e      	ldr	r3, [pc, #184]	; (8000e40 <api_enter_pass+0x138>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
 8000d88:	3301      	adds	r3, #1
 8000d8a:	b2da      	uxtb	r2, r3
 8000d8c:	4b2c      	ldr	r3, [pc, #176]	; (8000e40 <api_enter_pass+0x138>)
 8000d8e:	701a      	strb	r2, [r3, #0]
 8000d90:	e039      	b.n	8000e06 <api_enter_pass+0xfe>
		}
		else
		{
			for (uint8_t i = 0; i < 4; i++)
 8000d92:	2300      	movs	r3, #0
 8000d94:	73fb      	strb	r3, [r7, #15]
 8000d96:	e018      	b.n	8000dca <api_enter_pass+0xc2>
			{
				lcd_goto_xy(1, 3);
 8000d98:	2103      	movs	r1, #3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	f000 feff 	bl	8001b9e <lcd_goto_xy>
				lcd_send_string("Enter num 0-9");
 8000da0:	4829      	ldr	r0, [pc, #164]	; (8000e48 <api_enter_pass+0x140>)
 8000da2:	f000 ff5f 	bl	8001c64 <lcd_send_string>
				HAL_Delay(500);
 8000da6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000daa:	f002 fad1 	bl	8003350 <HAL_Delay>
				lcd_goto_xy(1, 3);
 8000dae:	2103      	movs	r1, #3
 8000db0:	2001      	movs	r0, #1
 8000db2:	f000 fef4 	bl	8001b9e <lcd_goto_xy>
				lcd_send_string("             ");
 8000db6:	4825      	ldr	r0, [pc, #148]	; (8000e4c <api_enter_pass+0x144>)
 8000db8:	f000 ff54 	bl	8001c64 <lcd_send_string>
				HAL_Delay(500);
 8000dbc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dc0:	f002 fac6 	bl	8003350 <HAL_Delay>
			for (uint8_t i = 0; i < 4; i++)
 8000dc4:	7bfb      	ldrb	r3, [r7, #15]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	73fb      	strb	r3, [r7, #15]
 8000dca:	7bfb      	ldrb	r3, [r7, #15]
 8000dcc:	2b03      	cmp	r3, #3
 8000dce:	d9e3      	bls.n	8000d98 <api_enter_pass+0x90>
			}
			lcd_goto_xy(1, 5);
 8000dd0:	2105      	movs	r1, #5
 8000dd2:	2001      	movs	r0, #1
 8000dd4:	f000 fee3 	bl	8001b9e <lcd_goto_xy>
			if (index_pass == 1)
 8000dd8:	4b1a      	ldr	r3, [pc, #104]	; (8000e44 <api_enter_pass+0x13c>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d103      	bne.n	8000de8 <api_enter_pass+0xe0>
			{
				lcd_send_string("*");
 8000de0:	481b      	ldr	r0, [pc, #108]	; (8000e50 <api_enter_pass+0x148>)
 8000de2:	f000 ff3f 	bl	8001c64 <lcd_send_string>
 8000de6:	e00e      	b.n	8000e06 <api_enter_pass+0xfe>
			}
			else if (index_pass == 2)
 8000de8:	4b16      	ldr	r3, [pc, #88]	; (8000e44 <api_enter_pass+0x13c>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d103      	bne.n	8000df8 <api_enter_pass+0xf0>
			{
				lcd_send_string("**");
 8000df0:	4818      	ldr	r0, [pc, #96]	; (8000e54 <api_enter_pass+0x14c>)
 8000df2:	f000 ff37 	bl	8001c64 <lcd_send_string>
 8000df6:	e006      	b.n	8000e06 <api_enter_pass+0xfe>
			}
			else if (index_pass == 3)
 8000df8:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <api_enter_pass+0x13c>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	2b03      	cmp	r3, #3
 8000dfe:	d102      	bne.n	8000e06 <api_enter_pass+0xfe>
			{
				lcd_send_string("***");
 8000e00:	4815      	ldr	r0, [pc, #84]	; (8000e58 <api_enter_pass+0x150>)
 8000e02:	f000 ff2f 	bl	8001c64 <lcd_send_string>
			}
		}
		if (index_pass == 4)
 8000e06:	4b0f      	ldr	r3, [pc, #60]	; (8000e44 <api_enter_pass+0x13c>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	2b04      	cmp	r3, #4
 8000e0c:	d107      	bne.n	8000e1e <api_enter_pass+0x116>
		{
			index_pass = 0;
 8000e0e:	4b0d      	ldr	r3, [pc, #52]	; (8000e44 <api_enter_pass+0x13c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	701a      	strb	r2, [r3, #0]
			index_display_lcd = 5;
 8000e14:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <api_enter_pass+0x138>)
 8000e16:	2205      	movs	r2, #5
 8000e18:	701a      	strb	r2, [r3, #0]
			return 1;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e009      	b.n	8000e32 <api_enter_pass+0x12a>
	while (api_check_have_button_timeout(keypad, 10000))
 8000e1e:	f242 7110 	movw	r1, #10000	; 0x2710
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f7ff ff24 	bl	8000c70 <api_check_have_button_timeout>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	f47f af7b 	bne.w	8000d26 <api_enter_pass+0x1e>
		}
	}
	return 0;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	08007ea4 	.word	0x08007ea4
 8000e40:	20000004 	.word	0x20000004
 8000e44:	200000ab 	.word	0x200000ab
 8000e48:	08007eb4 	.word	0x08007eb4
 8000e4c:	08007ec4 	.word	0x08007ec4
 8000e50:	08007ed4 	.word	0x08007ed4
 8000e54:	08007ed8 	.word	0x08007ed8
 8000e58:	08007edc 	.word	0x08007edc

08000e5c <flash_read_existing_card>:

/**
 * @brief Read existing RFID cards from flash memory.
 */
void flash_read_existing_card()
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
	flash_read_2d_array(ADDRESS_STORAGE_ID_CARD_SUB_FIRST, existing_card, MAX_SUB_CARDS * 2, MFRC522_LEN);
 8000e62:	2306      	movs	r3, #6
 8000e64:	2214      	movs	r2, #20
 8000e66:	4925      	ldr	r1, [pc, #148]	; (8000efc <flash_read_existing_card+0xa0>)
 8000e68:	4825      	ldr	r0, [pc, #148]	; (8000f00 <flash_read_existing_card+0xa4>)
 8000e6a:	f001 fba4 	bl	80025b6 <flash_read_2d_array>
	num_sub_cards_from_flash = 0;
 8000e6e:	4b25      	ldr	r3, [pc, #148]	; (8000f04 <flash_read_existing_card+0xa8>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	701a      	strb	r2, [r3, #0]

	for (int i = 0; i < MAX_SUB_CARDS * 2; i++)
 8000e74:	2300      	movs	r3, #0
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	e035      	b.n	8000ee6 <flash_read_existing_card+0x8a>
	{
		bool isValidArray = false;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	72fb      	strb	r3, [r7, #11]

		for (int j = 0; j < MFRC522_LEN; j++)
 8000e7e:	2300      	movs	r3, #0
 8000e80:	607b      	str	r3, [r7, #4]
 8000e82:	e021      	b.n	8000ec8 <flash_read_existing_card+0x6c>
		{
			if ((existing_card[i][j] != error_card[j]) && (existing_card[i][j] != 0xFF))
 8000e84:	491d      	ldr	r1, [pc, #116]	; (8000efc <flash_read_existing_card+0xa0>)
 8000e86:	68fa      	ldr	r2, [r7, #12]
 8000e88:	4613      	mov	r3, r2
 8000e8a:	005b      	lsls	r3, r3, #1
 8000e8c:	4413      	add	r3, r2
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	18ca      	adds	r2, r1, r3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4413      	add	r3, r2
 8000e96:	781a      	ldrb	r2, [r3, #0]
 8000e98:	491b      	ldr	r1, [pc, #108]	; (8000f08 <flash_read_existing_card+0xac>)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	440b      	add	r3, r1
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	d00e      	beq.n	8000ec2 <flash_read_existing_card+0x66>
 8000ea4:	4915      	ldr	r1, [pc, #84]	; (8000efc <flash_read_existing_card+0xa0>)
 8000ea6:	68fa      	ldr	r2, [r7, #12]
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	4413      	add	r3, r2
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	18ca      	adds	r2, r1, r3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	2bff      	cmp	r3, #255	; 0xff
 8000eba:	d002      	beq.n	8000ec2 <flash_read_existing_card+0x66>
			{
				isValidArray = true;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	72fb      	strb	r3, [r7, #11]
				break;
 8000ec0:	e005      	b.n	8000ece <flash_read_existing_card+0x72>
		for (int j = 0; j < MFRC522_LEN; j++)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	607b      	str	r3, [r7, #4]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2b05      	cmp	r3, #5
 8000ecc:	ddda      	ble.n	8000e84 <flash_read_existing_card+0x28>
			}
		}

		if (isValidArray)
 8000ece:	7afb      	ldrb	r3, [r7, #11]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d005      	beq.n	8000ee0 <flash_read_existing_card+0x84>
		{
			num_sub_cards_from_flash++;
 8000ed4:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <flash_read_existing_card+0xa8>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	3301      	adds	r3, #1
 8000eda:	b2da      	uxtb	r2, r3
 8000edc:	4b09      	ldr	r3, [pc, #36]	; (8000f04 <flash_read_existing_card+0xa8>)
 8000ede:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MAX_SUB_CARDS * 2; i++)
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	2b13      	cmp	r3, #19
 8000eea:	ddc6      	ble.n	8000e7a <flash_read_existing_card+0x1e>
		}
	}
	num_sub_cards = num_sub_cards_from_flash;
 8000eec:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <flash_read_existing_card+0xa8>)
 8000eee:	781a      	ldrb	r2, [r3, #0]
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <flash_read_existing_card+0xb0>)
 8000ef2:	701a      	strb	r2, [r3, #0]
}
 8000ef4:	bf00      	nop
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20000108 	.word	0x20000108
 8000f00:	08060006 	.word	0x08060006
 8000f04:	200000cb 	.word	0x200000cb
 8000f08:	20000180 	.word	0x20000180
 8000f0c:	200000ca 	.word	0x200000ca

08000f10 <check_have_master_card>:
/**
 * @brief Check if there is a master RFID card stored in flash memory.
 * @return True if a master card is found, otherwise False.
 */
bool check_have_master_card()
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
	flash_read_array(ADDRESS_STORAGE_ID_CARD_MASTER, flash_read_master_card, MFRC522_LEN);
 8000f16:	2206      	movs	r2, #6
 8000f18:	490f      	ldr	r1, [pc, #60]	; (8000f58 <check_have_master_card+0x48>)
 8000f1a:	4810      	ldr	r0, [pc, #64]	; (8000f5c <check_have_master_card+0x4c>)
 8000f1c:	f001 faf2 	bl	8002504 <flash_read_array>
	for (int i = 0; i < MFRC522_LEN; i++)
 8000f20:	2300      	movs	r3, #0
 8000f22:	607b      	str	r3, [r7, #4]
 8000f24:	e010      	b.n	8000f48 <check_have_master_card+0x38>
	{
		if (flash_read_master_card[i] != 0x00 && flash_read_master_card[i] != 0xFF)
 8000f26:	4a0c      	ldr	r2, [pc, #48]	; (8000f58 <check_have_master_card+0x48>)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d007      	beq.n	8000f42 <check_have_master_card+0x32>
 8000f32:	4a09      	ldr	r2, [pc, #36]	; (8000f58 <check_have_master_card+0x48>)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	4413      	add	r3, r2
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	2bff      	cmp	r3, #255	; 0xff
 8000f3c:	d001      	beq.n	8000f42 <check_have_master_card+0x32>
		{
			return true;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e006      	b.n	8000f50 <check_have_master_card+0x40>
	for (int i = 0; i < MFRC522_LEN; i++)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	3301      	adds	r3, #1
 8000f46:	607b      	str	r3, [r7, #4]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2b05      	cmp	r3, #5
 8000f4c:	ddeb      	ble.n	8000f26 <check_have_master_card+0x16>
		}
	}
	return false;
 8000f4e:	2300      	movs	r3, #0
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	200000ac 	.word	0x200000ac
 8000f5c:	08060000 	.word	0x08060000

08000f60 <handle_state_master_card>:

/**
 * @brief Handle the state of the master RFID card.
 */
void handle_state_master_card()
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
	if (check_have_master_card())
 8000f66:	f7ff ffd3 	bl	8000f10 <check_have_master_card>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d012      	beq.n	8000f96 <handle_state_master_card+0x36>
	{
		for (int i = 0; i < MFRC522_LEN; i++)
 8000f70:	2300      	movs	r3, #0
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	e00b      	b.n	8000f8e <handle_state_master_card+0x2e>
		{
			id_card_master[i] = flash_read_master_card[i];
 8000f76:	4a1b      	ldr	r2, [pc, #108]	; (8000fe4 <handle_state_master_card+0x84>)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	7819      	ldrb	r1, [r3, #0]
 8000f7e:	4a1a      	ldr	r2, [pc, #104]	; (8000fe8 <handle_state_master_card+0x88>)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	4413      	add	r3, r2
 8000f84:	460a      	mov	r2, r1
 8000f86:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < MFRC522_LEN; i++)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	607b      	str	r3, [r7, #4]
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2b05      	cmp	r3, #5
 8000f92:	ddf0      	ble.n	8000f76 <handle_state_master_card+0x16>
				flash_read_array(ADDRESS_STORAGE_ID_CARD_MASTER, flash_read_master_card, MFRC522_LEN);
				break;
			}
		}
	}
}
 8000f94:	e023      	b.n	8000fde <handle_state_master_card+0x7e>
		h_display_tap_master_card();
 8000f96:	f7ff fcbb 	bl	8000910 <h_display_tap_master_card>
			if (check_have_card())
 8000f9a:	f000 fa23 	bl	80013e4 <check_have_card>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d0fa      	beq.n	8000f9a <handle_state_master_card+0x3a>
				for (int i = 0; i < MFRC522_LEN; i++)
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	e00b      	b.n	8000fc2 <handle_state_master_card+0x62>
					id_card_master[i] = card_uid[i];
 8000faa:	4a10      	ldr	r2, [pc, #64]	; (8000fec <handle_state_master_card+0x8c>)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	4413      	add	r3, r2
 8000fb0:	7819      	ldrb	r1, [r3, #0]
 8000fb2:	4a0d      	ldr	r2, [pc, #52]	; (8000fe8 <handle_state_master_card+0x88>)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	460a      	mov	r2, r1
 8000fba:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < MFRC522_LEN; i++)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	603b      	str	r3, [r7, #0]
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	2b05      	cmp	r3, #5
 8000fc6:	ddf0      	ble.n	8000faa <handle_state_master_card+0x4a>
				flash_write_array(ADDRESS_STORAGE_ID_CARD_MASTER, id_card_master, MFRC522_LEN);
 8000fc8:	2206      	movs	r2, #6
 8000fca:	4907      	ldr	r1, [pc, #28]	; (8000fe8 <handle_state_master_card+0x88>)
 8000fcc:	4808      	ldr	r0, [pc, #32]	; (8000ff0 <handle_state_master_card+0x90>)
 8000fce:	f001 fa67 	bl	80024a0 <flash_write_array>
				flash_read_array(ADDRESS_STORAGE_ID_CARD_MASTER, flash_read_master_card, MFRC522_LEN);
 8000fd2:	2206      	movs	r2, #6
 8000fd4:	4903      	ldr	r1, [pc, #12]	; (8000fe4 <handle_state_master_card+0x84>)
 8000fd6:	4806      	ldr	r0, [pc, #24]	; (8000ff0 <handle_state_master_card+0x90>)
 8000fd8:	f001 fa94 	bl	8002504 <flash_read_array>
				break;
 8000fdc:	bf00      	nop
}
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	200000ac 	.word	0x200000ac
 8000fe8:	200000c4 	.word	0x200000c4
 8000fec:	200000b4 	.word	0x200000b4
 8000ff0:	08060000 	.word	0x08060000

08000ff4 <check_master_card>:
/**
 * @brief Check if the scanned RFID card matches the master card.
 * @return True if the card matches the master card, otherwise False.
 */
bool check_master_card()
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
	mfrc522_status_t status = mfrc522_check(card_uid);
 8000ffa:	4821      	ldr	r0, [pc, #132]	; (8001080 <check_master_card+0x8c>)
 8000ffc:	f000 ffec 	bl	8001fd8 <mfrc522_check>
 8001000:	4603      	mov	r3, r0
 8001002:	70fb      	strb	r3, [r7, #3]
	if (status == MI_OK)
 8001004:	78fb      	ldrb	r3, [r7, #3]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d111      	bne.n	800102e <check_master_card+0x3a>
	{
		for (int i = 0; i < MFRC522_LEN; i++)
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	e00b      	b.n	8001028 <check_master_card+0x34>
		{
			id_card_check[i] = card_uid[i];
 8001010:	4a1b      	ldr	r2, [pc, #108]	; (8001080 <check_master_card+0x8c>)
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	4413      	add	r3, r2
 8001016:	7819      	ldrb	r1, [r3, #0]
 8001018:	4a1a      	ldr	r2, [pc, #104]	; (8001084 <check_master_card+0x90>)
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	4413      	add	r3, r2
 800101e:	460a      	mov	r2, r1
 8001020:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < MFRC522_LEN; i++)
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	3301      	adds	r3, #1
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	2b05      	cmp	r3, #5
 800102c:	ddf0      	ble.n	8001010 <check_master_card+0x1c>
		}
	}

	flash_read_array(ADDRESS_STORAGE_ID_CARD_MASTER, flash_read_master_card, MFRC522_LEN);
 800102e:	2206      	movs	r2, #6
 8001030:	4915      	ldr	r1, [pc, #84]	; (8001088 <check_master_card+0x94>)
 8001032:	4816      	ldr	r0, [pc, #88]	; (800108c <check_master_card+0x98>)
 8001034:	f001 fa66 	bl	8002504 <flash_read_array>
	uint8_t count_check_master_card = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	72fb      	strb	r3, [r7, #11]
	for (int i = 0; i < MFRC522_LEN; i++)
 800103c:	2300      	movs	r3, #0
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	e00f      	b.n	8001062 <check_master_card+0x6e>
	{
		if (id_card_check[i] == id_card_master[i])
 8001042:	4a10      	ldr	r2, [pc, #64]	; (8001084 <check_master_card+0x90>)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4413      	add	r3, r2
 8001048:	781a      	ldrb	r2, [r3, #0]
 800104a:	4911      	ldr	r1, [pc, #68]	; (8001090 <check_master_card+0x9c>)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	440b      	add	r3, r1
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	429a      	cmp	r2, r3
 8001054:	d109      	bne.n	800106a <check_master_card+0x76>
		{
			count_check_master_card++;
 8001056:	7afb      	ldrb	r3, [r7, #11]
 8001058:	3301      	adds	r3, #1
 800105a:	72fb      	strb	r3, [r7, #11]
	for (int i = 0; i < MFRC522_LEN; i++)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3301      	adds	r3, #1
 8001060:	607b      	str	r3, [r7, #4]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2b05      	cmp	r3, #5
 8001066:	ddec      	ble.n	8001042 <check_master_card+0x4e>
 8001068:	e000      	b.n	800106c <check_master_card+0x78>
		}
		else
		{
			break;
 800106a:	bf00      	nop
		}
	}
	return count_check_master_card == MFRC522_LEN;
 800106c:	7afb      	ldrb	r3, [r7, #11]
 800106e:	2b06      	cmp	r3, #6
 8001070:	bf0c      	ite	eq
 8001072:	2301      	moveq	r3, #1
 8001074:	2300      	movne	r3, #0
 8001076:	b2db      	uxtb	r3, r3
}
 8001078:	4618      	mov	r0, r3
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	200000b4 	.word	0x200000b4
 8001084:	200000bc 	.word	0x200000bc
 8001088:	200000ac 	.word	0x200000ac
 800108c:	08060000 	.word	0x08060000
 8001090:	200000c4 	.word	0x200000c4

08001094 <check_have_card_with_timeout>:
/**
 * @brief Check if a card is present and wait for up to 10 seconds for a card to be detected.
 * @return True if a card is detected within the timeout, otherwise False.
 */
bool check_have_card_with_timeout()
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
	uint32_t start_time = HAL_GetTick();
 800109a:	f002 f94d 	bl	8003338 <HAL_GetTick>
 800109e:	60b8      	str	r0, [r7, #8]
	bool value_timeout = true;
 80010a0:	2301      	movs	r3, #1
 80010a2:	73fb      	strb	r3, [r7, #15]
	mfrc522_status_t status;
	do
	{
		status = mfrc522_check(card_uid);
 80010a4:	480f      	ldr	r0, [pc, #60]	; (80010e4 <check_have_card_with_timeout+0x50>)
 80010a6:	f000 ff97 	bl	8001fd8 <mfrc522_check>
 80010aa:	4603      	mov	r3, r0
 80010ac:	71fb      	strb	r3, [r7, #7]
		if (status == MI_OK)
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d102      	bne.n	80010ba <check_have_card_with_timeout+0x26>
		{
			value_timeout = true;
 80010b4:	2301      	movs	r3, #1
 80010b6:	73fb      	strb	r3, [r7, #15]
			break;
 80010b8:	e00f      	b.n	80010da <check_have_card_with_timeout+0x46>
		}
		uint32_t elapsed_time = HAL_GetTick() - start_time;
 80010ba:	f002 f93d 	bl	8003338 <HAL_GetTick>
 80010be:	4602      	mov	r2, r0
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	603b      	str	r3, [r7, #0]
		if (elapsed_time >= 10000 && (status != MI_OK))
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	f242 720f 	movw	r2, #9999	; 0x270f
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d9e9      	bls.n	80010a4 <check_have_card_with_timeout+0x10>
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d0e6      	beq.n	80010a4 <check_have_card_with_timeout+0x10>
		{
			value_timeout = false;
 80010d6:	2300      	movs	r3, #0
 80010d8:	73fb      	strb	r3, [r7, #15]
			break;
		}
	} while (1);
	return value_timeout;
 80010da:	7bfb      	ldrb	r3, [r7, #15]
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	200000b4 	.word	0x200000b4

080010e8 <add_new_sub_card>:

/**
 * @brief Add a new sub-card to the list of authorized RFID cards.
 */
void add_new_sub_card()
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08c      	sub	sp, #48	; 0x30
 80010ec:	af00      	add	r7, sp, #0
	flash_read_2d_array(ADDRESS_STORAGE_ID_CARD_SUB_FIRST, existing_card, MAX_SUB_CARDS * 2, MFRC522_LEN);
 80010ee:	2306      	movs	r3, #6
 80010f0:	2214      	movs	r2, #20
 80010f2:	4974      	ldr	r1, [pc, #464]	; (80012c4 <add_new_sub_card+0x1dc>)
 80010f4:	4874      	ldr	r0, [pc, #464]	; (80012c8 <add_new_sub_card+0x1e0>)
 80010f6:	f001 fa5e 	bl	80025b6 <flash_read_2d_array>
	mfrc522_status_t status = mfrc522_check(card_uid);
 80010fa:	4874      	ldr	r0, [pc, #464]	; (80012cc <add_new_sub_card+0x1e4>)
 80010fc:	f000 ff6c 	bl	8001fd8 <mfrc522_check>
 8001100:	4603      	mov	r3, r0
 8001102:	72fb      	strb	r3, [r7, #11]

	if (status == MI_OK)
 8001104:	7afb      	ldrb	r3, [r7, #11]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d111      	bne.n	800112e <add_new_sub_card+0x46>
	{
		for (int i = 0; i < MFRC522_LEN; i++)
 800110a:	2300      	movs	r3, #0
 800110c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800110e:	e00b      	b.n	8001128 <add_new_sub_card+0x40>
		{
			id_card_check[i] = card_uid[i];
 8001110:	4a6e      	ldr	r2, [pc, #440]	; (80012cc <add_new_sub_card+0x1e4>)
 8001112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001114:	4413      	add	r3, r2
 8001116:	7819      	ldrb	r1, [r3, #0]
 8001118:	4a6d      	ldr	r2, [pc, #436]	; (80012d0 <add_new_sub_card+0x1e8>)
 800111a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800111c:	4413      	add	r3, r2
 800111e:	460a      	mov	r2, r1
 8001120:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < MFRC522_LEN; i++)
 8001122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001124:	3301      	adds	r3, #1
 8001126:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800112a:	2b05      	cmp	r3, #5
 800112c:	ddf0      	ble.n	8001110 <add_new_sub_card+0x28>
		}
	}
	bool is_match = false;
 800112e:	2300      	movs	r3, #0
 8001130:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	for (int i = 0; i < MAX_SUB_CARDS; i++)
 8001134:	2300      	movs	r3, #0
 8001136:	627b      	str	r3, [r7, #36]	; 0x24
 8001138:	e040      	b.n	80011bc <add_new_sub_card+0xd4>
	{
		is_match = true;
 800113a:	2301      	movs	r3, #1
 800113c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		for (int j = 0; j < MFRC522_LEN; j++)
 8001140:	2300      	movs	r3, #0
 8001142:	623b      	str	r3, [r7, #32]
 8001144:	e030      	b.n	80011a8 <add_new_sub_card+0xc0>
		{
			if ((id_card_check[j] != existing_card[i][j]) && (id_card_check[j] != id_card_sub[i][j]) && (id_card_check[j] != id_card_master[j]))
 8001146:	4a62      	ldr	r2, [pc, #392]	; (80012d0 <add_new_sub_card+0x1e8>)
 8001148:	6a3b      	ldr	r3, [r7, #32]
 800114a:	4413      	add	r3, r2
 800114c:	7819      	ldrb	r1, [r3, #0]
 800114e:	485d      	ldr	r0, [pc, #372]	; (80012c4 <add_new_sub_card+0x1dc>)
 8001150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001152:	4613      	mov	r3, r2
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	4413      	add	r3, r2
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	18c2      	adds	r2, r0, r3
 800115c:	6a3b      	ldr	r3, [r7, #32]
 800115e:	4413      	add	r3, r2
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	4299      	cmp	r1, r3
 8001164:	d01d      	beq.n	80011a2 <add_new_sub_card+0xba>
 8001166:	4a5a      	ldr	r2, [pc, #360]	; (80012d0 <add_new_sub_card+0x1e8>)
 8001168:	6a3b      	ldr	r3, [r7, #32]
 800116a:	4413      	add	r3, r2
 800116c:	7819      	ldrb	r1, [r3, #0]
 800116e:	4859      	ldr	r0, [pc, #356]	; (80012d4 <add_new_sub_card+0x1ec>)
 8001170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001172:	4613      	mov	r3, r2
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	4413      	add	r3, r2
 8001178:	005b      	lsls	r3, r3, #1
 800117a:	18c2      	adds	r2, r0, r3
 800117c:	6a3b      	ldr	r3, [r7, #32]
 800117e:	4413      	add	r3, r2
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	4299      	cmp	r1, r3
 8001184:	d00d      	beq.n	80011a2 <add_new_sub_card+0xba>
 8001186:	4a52      	ldr	r2, [pc, #328]	; (80012d0 <add_new_sub_card+0x1e8>)
 8001188:	6a3b      	ldr	r3, [r7, #32]
 800118a:	4413      	add	r3, r2
 800118c:	781a      	ldrb	r2, [r3, #0]
 800118e:	4952      	ldr	r1, [pc, #328]	; (80012d8 <add_new_sub_card+0x1f0>)
 8001190:	6a3b      	ldr	r3, [r7, #32]
 8001192:	440b      	add	r3, r1
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	429a      	cmp	r2, r3
 8001198:	d003      	beq.n	80011a2 <add_new_sub_card+0xba>
			{
				is_match = false;
 800119a:	2300      	movs	r3, #0
 800119c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 80011a0:	e005      	b.n	80011ae <add_new_sub_card+0xc6>
		for (int j = 0; j < MFRC522_LEN; j++)
 80011a2:	6a3b      	ldr	r3, [r7, #32]
 80011a4:	3301      	adds	r3, #1
 80011a6:	623b      	str	r3, [r7, #32]
 80011a8:	6a3b      	ldr	r3, [r7, #32]
 80011aa:	2b05      	cmp	r3, #5
 80011ac:	ddcb      	ble.n	8001146 <add_new_sub_card+0x5e>
			}
		}

		if (is_match)
 80011ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d106      	bne.n	80011c4 <add_new_sub_card+0xdc>
	for (int i = 0; i < MAX_SUB_CARDS; i++)
 80011b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b8:	3301      	adds	r3, #1
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24
 80011bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011be:	2b09      	cmp	r3, #9
 80011c0:	ddbb      	ble.n	800113a <add_new_sub_card+0x52>
 80011c2:	e000      	b.n	80011c6 <add_new_sub_card+0xde>
		{
			break;
 80011c4:	bf00      	nop
		}
	}

	bool already_added = false;
 80011c6:	2300      	movs	r3, #0
 80011c8:	77fb      	strb	r3, [r7, #31]

	for (int i = 0; i < num_sub_cards; i++)
 80011ca:	2300      	movs	r3, #0
 80011cc:	61bb      	str	r3, [r7, #24]
 80011ce:	e026      	b.n	800121e <add_new_sub_card+0x136>
	{
		bool card_match = true;
 80011d0:	2301      	movs	r3, #1
 80011d2:	75fb      	strb	r3, [r7, #23]
		for (int j = 0; j < MFRC522_LEN; j++)
 80011d4:	2300      	movs	r3, #0
 80011d6:	613b      	str	r3, [r7, #16]
 80011d8:	e015      	b.n	8001206 <add_new_sub_card+0x11e>
		{
			if (id_card_check[j] != id_card_sub[i][j])
 80011da:	4a3d      	ldr	r2, [pc, #244]	; (80012d0 <add_new_sub_card+0x1e8>)
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	4413      	add	r3, r2
 80011e0:	7819      	ldrb	r1, [r3, #0]
 80011e2:	483c      	ldr	r0, [pc, #240]	; (80012d4 <add_new_sub_card+0x1ec>)
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4613      	mov	r3, r2
 80011e8:	005b      	lsls	r3, r3, #1
 80011ea:	4413      	add	r3, r2
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	18c2      	adds	r2, r0, r3
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	4413      	add	r3, r2
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	4299      	cmp	r1, r3
 80011f8:	d002      	beq.n	8001200 <add_new_sub_card+0x118>
			{
				card_match = false;
 80011fa:	2300      	movs	r3, #0
 80011fc:	75fb      	strb	r3, [r7, #23]
				break;
 80011fe:	e005      	b.n	800120c <add_new_sub_card+0x124>
		for (int j = 0; j < MFRC522_LEN; j++)
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	3301      	adds	r3, #1
 8001204:	613b      	str	r3, [r7, #16]
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	2b05      	cmp	r3, #5
 800120a:	dde6      	ble.n	80011da <add_new_sub_card+0xf2>
			}
		}
		if (card_match)
 800120c:	7dfb      	ldrb	r3, [r7, #23]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d002      	beq.n	8001218 <add_new_sub_card+0x130>
		{
			already_added = true;
 8001212:	2301      	movs	r3, #1
 8001214:	77fb      	strb	r3, [r7, #31]
			break;
 8001216:	e008      	b.n	800122a <add_new_sub_card+0x142>
	for (int i = 0; i < num_sub_cards; i++)
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	3301      	adds	r3, #1
 800121c:	61bb      	str	r3, [r7, #24]
 800121e:	4b2f      	ldr	r3, [pc, #188]	; (80012dc <add_new_sub_card+0x1f4>)
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	461a      	mov	r2, r3
 8001224:	69bb      	ldr	r3, [r7, #24]
 8001226:	4293      	cmp	r3, r2
 8001228:	dbd2      	blt.n	80011d0 <add_new_sub_card+0xe8>
		}
	}

	if (!is_match && !already_added && (num_sub_cards < MAX_SUB_CARDS))
 800122a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800122e:	f083 0301 	eor.w	r3, r3, #1
 8001232:	b2db      	uxtb	r3, r3
 8001234:	2b00      	cmp	r3, #0
 8001236:	d041      	beq.n	80012bc <add_new_sub_card+0x1d4>
 8001238:	7ffb      	ldrb	r3, [r7, #31]
 800123a:	f083 0301 	eor.w	r3, r3, #1
 800123e:	b2db      	uxtb	r3, r3
 8001240:	2b00      	cmp	r3, #0
 8001242:	d03b      	beq.n	80012bc <add_new_sub_card+0x1d4>
 8001244:	4b25      	ldr	r3, [pc, #148]	; (80012dc <add_new_sub_card+0x1f4>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	2b09      	cmp	r3, #9
 800124a:	d837      	bhi.n	80012bc <add_new_sub_card+0x1d4>
	{
		for (int i = 0; i < MFRC522_LEN; i++)
 800124c:	2300      	movs	r3, #0
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	e013      	b.n	800127a <add_new_sub_card+0x192>
		{
			id_card_sub[num_sub_cards][i] = id_card_check[i];
 8001252:	4b22      	ldr	r3, [pc, #136]	; (80012dc <add_new_sub_card+0x1f4>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	4619      	mov	r1, r3
 8001258:	4a1d      	ldr	r2, [pc, #116]	; (80012d0 <add_new_sub_card+0x1e8>)
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	4413      	add	r3, r2
 800125e:	7818      	ldrb	r0, [r3, #0]
 8001260:	4a1c      	ldr	r2, [pc, #112]	; (80012d4 <add_new_sub_card+0x1ec>)
 8001262:	460b      	mov	r3, r1
 8001264:	005b      	lsls	r3, r3, #1
 8001266:	440b      	add	r3, r1
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	441a      	add	r2, r3
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	4413      	add	r3, r2
 8001270:	4602      	mov	r2, r0
 8001272:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < MFRC522_LEN; i++)
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	3301      	adds	r3, #1
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	2b05      	cmp	r3, #5
 800127e:	dde8      	ble.n	8001252 <add_new_sub_card+0x16a>
		}
		num_sub_cards++;
 8001280:	4b16      	ldr	r3, [pc, #88]	; (80012dc <add_new_sub_card+0x1f4>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	3301      	adds	r3, #1
 8001286:	b2da      	uxtb	r2, r3
 8001288:	4b14      	ldr	r3, [pc, #80]	; (80012dc <add_new_sub_card+0x1f4>)
 800128a:	701a      	strb	r2, [r3, #0]
		uint32_t next_flash_address = ADDRESS_STORAGE_ID_CARD_SUB_FIRST + (num_sub_cards * MFRC522_LEN);
 800128c:	4b13      	ldr	r3, [pc, #76]	; (80012dc <add_new_sub_card+0x1f4>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	461a      	mov	r2, r3
 8001292:	4613      	mov	r3, r2
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	4413      	add	r3, r2
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800129e:	f103 1306 	add.w	r3, r3, #393222	; 0x60006
 80012a2:	607b      	str	r3, [r7, #4]
		flash_write_2d_array(next_flash_address, id_card_sub, num_sub_cards + 1, MFRC522_LEN);
 80012a4:	4b0d      	ldr	r3, [pc, #52]	; (80012dc <add_new_sub_card+0x1f4>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	3301      	adds	r3, #1
 80012ac:	b29a      	uxth	r2, r3
 80012ae:	2306      	movs	r3, #6
 80012b0:	4908      	ldr	r1, [pc, #32]	; (80012d4 <add_new_sub_card+0x1ec>)
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f001 f950 	bl	8002558 <flash_write_2d_array>
		flash_read_existing_card();
 80012b8:	f7ff fdd0 	bl	8000e5c <flash_read_existing_card>
	}
}
 80012bc:	bf00      	nop
 80012be:	3730      	adds	r7, #48	; 0x30
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000108 	.word	0x20000108
 80012c8:	08060006 	.word	0x08060006
 80012cc:	200000b4 	.word	0x200000b4
 80012d0:	200000bc 	.word	0x200000bc
 80012d4:	200000cc 	.word	0x200000cc
 80012d8:	200000c4 	.word	0x200000c4
 80012dc:	200000ca 	.word	0x200000ca

080012e0 <check_card_to_access>:
/**
 * @brief Check if the scanned RFID card is authorized to access.
 * @return True if the card is authorized, otherwise False.
 */
bool check_card_to_access()
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
	flash_read_array(ADDRESS_STORAGE_ID_CARD_MASTER, id_card_master, MFRC522_LEN);
 80012e6:	2206      	movs	r2, #6
 80012e8:	4937      	ldr	r1, [pc, #220]	; (80013c8 <check_card_to_access+0xe8>)
 80012ea:	4838      	ldr	r0, [pc, #224]	; (80013cc <check_card_to_access+0xec>)
 80012ec:	f001 f90a 	bl	8002504 <flash_read_array>
	flash_read_2d_array(ADDRESS_STORAGE_ID_CARD_SUB_FIRST, existing_card, MAX_SUB_CARDS * 2, MFRC522_LEN);
 80012f0:	2306      	movs	r3, #6
 80012f2:	2214      	movs	r2, #20
 80012f4:	4936      	ldr	r1, [pc, #216]	; (80013d0 <check_card_to_access+0xf0>)
 80012f6:	4837      	ldr	r0, [pc, #220]	; (80013d4 <check_card_to_access+0xf4>)
 80012f8:	f001 f95d 	bl	80025b6 <flash_read_2d_array>

	mfrc522_status_t status = mfrc522_check(card_uid);
 80012fc:	4836      	ldr	r0, [pc, #216]	; (80013d8 <check_card_to_access+0xf8>)
 80012fe:	f000 fe6b 	bl	8001fd8 <mfrc522_check>
 8001302:	4603      	mov	r3, r0
 8001304:	70fb      	strb	r3, [r7, #3]
	bool is_match_access_card = false;
 8001306:	2300      	movs	r3, #0
 8001308:	75fb      	strb	r3, [r7, #23]

	if (status == MI_OK)
 800130a:	78fb      	ldrb	r3, [r7, #3]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d111      	bne.n	8001334 <check_card_to_access+0x54>
	{
		for (int i = 0; i < MFRC522_LEN; i++)
 8001310:	2300      	movs	r3, #0
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	e00b      	b.n	800132e <check_card_to_access+0x4e>
		{
			id_card_check[i] = card_uid[i];
 8001316:	4a30      	ldr	r2, [pc, #192]	; (80013d8 <check_card_to_access+0xf8>)
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	4413      	add	r3, r2
 800131c:	7819      	ldrb	r1, [r3, #0]
 800131e:	4a2f      	ldr	r2, [pc, #188]	; (80013dc <check_card_to_access+0xfc>)
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	4413      	add	r3, r2
 8001324:	460a      	mov	r2, r1
 8001326:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < MFRC522_LEN; i++)
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	3301      	adds	r3, #1
 800132c:	613b      	str	r3, [r7, #16]
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	2b05      	cmp	r3, #5
 8001332:	ddf0      	ble.n	8001316 <check_card_to_access+0x36>
		}
	}

	for (int i = 0; i < MAX_SUB_CARDS * 2; i++)
 8001334:	2300      	movs	r3, #0
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	e03e      	b.n	80013b8 <check_card_to_access+0xd8>
	{
		bool cardMatches = false;
 800133a:	2300      	movs	r3, #0
 800133c:	72fb      	strb	r3, [r7, #11]
		for (int j = 0; j < MFRC522_LEN; j++)
 800133e:	2300      	movs	r3, #0
 8001340:	607b      	str	r3, [r7, #4]
 8001342:	e02b      	b.n	800139c <check_card_to_access+0xbc>
		{
			if (id_card_check[j] != error_card[j])
 8001344:	4a25      	ldr	r2, [pc, #148]	; (80013dc <check_card_to_access+0xfc>)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4413      	add	r3, r2
 800134a:	781a      	ldrb	r2, [r3, #0]
 800134c:	4924      	ldr	r1, [pc, #144]	; (80013e0 <check_card_to_access+0x100>)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	440b      	add	r3, r1
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	429a      	cmp	r2, r3
 8001356:	d01e      	beq.n	8001396 <check_card_to_access+0xb6>
			{
				if ((id_card_check[j] != id_card_master[j]) && (id_card_check[j] != existing_card[i][j]))
 8001358:	4a20      	ldr	r2, [pc, #128]	; (80013dc <check_card_to_access+0xfc>)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4413      	add	r3, r2
 800135e:	781a      	ldrb	r2, [r3, #0]
 8001360:	4919      	ldr	r1, [pc, #100]	; (80013c8 <check_card_to_access+0xe8>)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	440b      	add	r3, r1
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	429a      	cmp	r2, r3
 800136a:	d012      	beq.n	8001392 <check_card_to_access+0xb2>
 800136c:	4a1b      	ldr	r2, [pc, #108]	; (80013dc <check_card_to_access+0xfc>)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4413      	add	r3, r2
 8001372:	7819      	ldrb	r1, [r3, #0]
 8001374:	4816      	ldr	r0, [pc, #88]	; (80013d0 <check_card_to_access+0xf0>)
 8001376:	68fa      	ldr	r2, [r7, #12]
 8001378:	4613      	mov	r3, r2
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	4413      	add	r3, r2
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	18c2      	adds	r2, r0, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4413      	add	r3, r2
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	4299      	cmp	r1, r3
 800138a:	d002      	beq.n	8001392 <check_card_to_access+0xb2>
				{
					cardMatches = false;
 800138c:	2300      	movs	r3, #0
 800138e:	72fb      	strb	r3, [r7, #11]
					break;
 8001390:	e007      	b.n	80013a2 <check_card_to_access+0xc2>
				}
				else
				{
					cardMatches = true;
 8001392:	2301      	movs	r3, #1
 8001394:	72fb      	strb	r3, [r7, #11]
		for (int j = 0; j < MFRC522_LEN; j++)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	3301      	adds	r3, #1
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2b05      	cmp	r3, #5
 80013a0:	ddd0      	ble.n	8001344 <check_card_to_access+0x64>
				}
			}
		}

		if (cardMatches)
 80013a2:	7afb      	ldrb	r3, [r7, #11]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d002      	beq.n	80013ae <check_card_to_access+0xce>
		{
			is_match_access_card = true;
 80013a8:	2301      	movs	r3, #1
 80013aa:	75fb      	strb	r3, [r7, #23]
			break;
 80013ac:	e007      	b.n	80013be <check_card_to_access+0xde>
		}
		else
		{
			is_match_access_card = false;
 80013ae:	2300      	movs	r3, #0
 80013b0:	75fb      	strb	r3, [r7, #23]
	for (int i = 0; i < MAX_SUB_CARDS * 2; i++)
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	3301      	adds	r3, #1
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	2b13      	cmp	r3, #19
 80013bc:	ddbd      	ble.n	800133a <check_card_to_access+0x5a>
		}
	}
	return is_match_access_card;
 80013be:	7dfb      	ldrb	r3, [r7, #23]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	200000c4 	.word	0x200000c4
 80013cc:	08060000 	.word	0x08060000
 80013d0:	20000108 	.word	0x20000108
 80013d4:	08060006 	.word	0x08060006
 80013d8:	200000b4 	.word	0x200000b4
 80013dc:	200000bc 	.word	0x200000bc
 80013e0:	20000180 	.word	0x20000180

080013e4 <check_have_card>:
/**
 * @brief Check if a card is present.
 * @return True if a card is detected, otherwise False.
 */
bool check_have_card()
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
	mfrc522_status_t status = mfrc522_check(card_uid);
 80013ea:	480a      	ldr	r0, [pc, #40]	; (8001414 <check_have_card+0x30>)
 80013ec:	f000 fdf4 	bl	8001fd8 <mfrc522_check>
 80013f0:	4603      	mov	r3, r0
 80013f2:	71bb      	strb	r3, [r7, #6]
	bool is_have_card = false;
 80013f4:	2300      	movs	r3, #0
 80013f6:	71fb      	strb	r3, [r7, #7]
	if (status == MI_OK)
 80013f8:	79bb      	ldrb	r3, [r7, #6]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d102      	bne.n	8001404 <check_have_card+0x20>
	{
		is_have_card = true;
 80013fe:	2301      	movs	r3, #1
 8001400:	71fb      	strb	r3, [r7, #7]
 8001402:	e001      	b.n	8001408 <check_have_card+0x24>
	}
	else
	{
		is_have_card = false;
 8001404:	2300      	movs	r3, #0
 8001406:	71fb      	strb	r3, [r7, #7]
	}
	return is_have_card;
 8001408:	79fb      	ldrb	r3, [r7, #7]
}
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	200000b4 	.word	0x200000b4

08001418 <bsp_delay>:
/* Private variables -------------------------------------------------------- */

/* Function definitions ----------------------------------------------- */

void bsp_delay(uint32_t delay)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	HAL_Delay(delay);
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f001 ff95 	bl	8003350 <HAL_Delay>
}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
	...

08001430 <bsp_flash_unlock>:
extern FLASH_ProcessTypeDef pFlash;
/* Public enumerate/structure ----------------------------------------- */

/* Function definitions ----------------------------------------------- */
HAL_StatusTypeDef bsp_flash_unlock(void)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status = HAL_OK;
 8001436:	2300      	movs	r3, #0
 8001438:	71fb      	strb	r3, [r7, #7]

	  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800143a:	4b0b      	ldr	r3, [pc, #44]	; (8001468 <bsp_flash_unlock+0x38>)
 800143c:	691b      	ldr	r3, [r3, #16]
 800143e:	2b00      	cmp	r3, #0
 8001440:	da0b      	bge.n	800145a <bsp_flash_unlock+0x2a>
	  {
	    /* Authorize the FLASH Registers access */
	    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001442:	4b09      	ldr	r3, [pc, #36]	; (8001468 <bsp_flash_unlock+0x38>)
 8001444:	4a09      	ldr	r2, [pc, #36]	; (800146c <bsp_flash_unlock+0x3c>)
 8001446:	605a      	str	r2, [r3, #4]
	    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001448:	4b07      	ldr	r3, [pc, #28]	; (8001468 <bsp_flash_unlock+0x38>)
 800144a:	4a09      	ldr	r2, [pc, #36]	; (8001470 <bsp_flash_unlock+0x40>)
 800144c:	605a      	str	r2, [r3, #4]

	    /* Verify Flash is unlocked */
	    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800144e:	4b06      	ldr	r3, [pc, #24]	; (8001468 <bsp_flash_unlock+0x38>)
 8001450:	691b      	ldr	r3, [r3, #16]
 8001452:	2b00      	cmp	r3, #0
 8001454:	da01      	bge.n	800145a <bsp_flash_unlock+0x2a>
	    {
	      status = HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	71fb      	strb	r3, [r7, #7]
	    }
	  }
	  return status;
 800145a:	79fb      	ldrb	r3, [r7, #7]
}
 800145c:	4618      	mov	r0, r3
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	40023c00 	.word	0x40023c00
 800146c:	45670123 	.word	0x45670123
 8001470:	cdef89ab 	.word	0xcdef89ab

08001474 <bsp_flash_lock>:

HAL_StatusTypeDef bsp_flash_lock(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001478:	4b05      	ldr	r3, [pc, #20]	; (8001490 <bsp_flash_lock+0x1c>)
 800147a:	691b      	ldr	r3, [r3, #16]
 800147c:	4a04      	ldr	r2, [pc, #16]	; (8001490 <bsp_flash_lock+0x1c>)
 800147e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001482:	6113      	str	r3, [r2, #16]
  return HAL_OK;
 8001484:	2300      	movs	r3, #0
}
 8001486:	4618      	mov	r0, r3
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	40023c00 	.word	0x40023c00

08001494 <bsp_flash_program>:

HAL_StatusTypeDef bsp_flash_program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0
 800149a:	60f8      	str	r0, [r7, #12]
 800149c:	60b9      	str	r1, [r7, #8]
 800149e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80014a6:	4b23      	ldr	r3, [pc, #140]	; (8001534 <bsp_flash_program+0xa0>)
 80014a8:	7e1b      	ldrb	r3, [r3, #24]
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d101      	bne.n	80014b2 <bsp_flash_program+0x1e>
 80014ae:	2302      	movs	r3, #2
 80014b0:	e03b      	b.n	800152a <bsp_flash_program+0x96>
 80014b2:	4b20      	ldr	r3, [pc, #128]	; (8001534 <bsp_flash_program+0xa0>)
 80014b4:	2201      	movs	r2, #1
 80014b6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80014b8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80014bc:	f002 f910 	bl	80036e0 <FLASH_WaitForLastOperation>
 80014c0:	4603      	mov	r3, r0
 80014c2:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 80014c4:	7dfb      	ldrb	r3, [r7, #23]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d12b      	bne.n	8001522 <bsp_flash_program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d105      	bne.n	80014dc <bsp_flash_program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      bsp_flash_program_byte(Address, (uint8_t) Data);
 80014d0:	783b      	ldrb	r3, [r7, #0]
 80014d2:	4619      	mov	r1, r3
 80014d4:	68b8      	ldr	r0, [r7, #8]
 80014d6:	f000 f831 	bl	800153c <bsp_flash_program_byte>
 80014da:	e016      	b.n	800150a <bsp_flash_program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d105      	bne.n	80014ee <bsp_flash_program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      bsp_flash_program_halfword(Address, (uint16_t) Data);
 80014e2:	883b      	ldrh	r3, [r7, #0]
 80014e4:	4619      	mov	r1, r3
 80014e6:	68b8      	ldr	r0, [r7, #8]
 80014e8:	f000 f84a 	bl	8001580 <bsp_flash_program_halfword>
 80014ec:	e00d      	b.n	800150a <bsp_flash_program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d105      	bne.n	8001500 <bsp_flash_program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      bsp_flash_program_word(Address, (uint32_t) Data);
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	4619      	mov	r1, r3
 80014f8:	68b8      	ldr	r0, [r7, #8]
 80014fa:	f000 f865 	bl	80015c8 <bsp_flash_program_word>
 80014fe:	e004      	b.n	800150a <bsp_flash_program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      bsp_flash_program_doubleword(Address, Data);
 8001500:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001504:	68b8      	ldr	r0, [r7, #8]
 8001506:	f000 f881 	bl	800160c <bsp_flash_program_doubleword>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800150a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800150e:	f002 f8e7 	bl	80036e0 <FLASH_WaitForLastOperation>
 8001512:	4603      	mov	r3, r0
 8001514:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8001516:	4b08      	ldr	r3, [pc, #32]	; (8001538 <bsp_flash_program+0xa4>)
 8001518:	691b      	ldr	r3, [r3, #16]
 800151a:	4a07      	ldr	r2, [pc, #28]	; (8001538 <bsp_flash_program+0xa4>)
 800151c:	f023 0301 	bic.w	r3, r3, #1
 8001520:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001522:	4b04      	ldr	r3, [pc, #16]	; (8001534 <bsp_flash_program+0xa0>)
 8001524:	2200      	movs	r2, #0
 8001526:	761a      	strb	r2, [r3, #24]

  return status;
 8001528:	7dfb      	ldrb	r3, [r7, #23]
}
 800152a:	4618      	mov	r0, r3
 800152c:	3718      	adds	r7, #24
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	20000388 	.word	0x20000388
 8001538:	40023c00 	.word	0x40023c00

0800153c <bsp_flash_program_byte>:
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
}

void bsp_flash_program_byte(uint32_t Address, uint8_t Data)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	460b      	mov	r3, r1
 8001546:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001548:	4b0c      	ldr	r3, [pc, #48]	; (800157c <bsp_flash_program_byte+0x40>)
 800154a:	691b      	ldr	r3, [r3, #16]
 800154c:	4a0b      	ldr	r2, [pc, #44]	; (800157c <bsp_flash_program_byte+0x40>)
 800154e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001552:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001554:	4b09      	ldr	r3, [pc, #36]	; (800157c <bsp_flash_program_byte+0x40>)
 8001556:	4a09      	ldr	r2, [pc, #36]	; (800157c <bsp_flash_program_byte+0x40>)
 8001558:	691b      	ldr	r3, [r3, #16]
 800155a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800155c:	4b07      	ldr	r3, [pc, #28]	; (800157c <bsp_flash_program_byte+0x40>)
 800155e:	691b      	ldr	r3, [r3, #16]
 8001560:	4a06      	ldr	r2, [pc, #24]	; (800157c <bsp_flash_program_byte+0x40>)
 8001562:	f043 0301 	orr.w	r3, r3, #1
 8001566:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	78fa      	ldrb	r2, [r7, #3]
 800156c:	701a      	strb	r2, [r3, #0]
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	40023c00 	.word	0x40023c00

08001580 <bsp_flash_program_halfword>:

void bsp_flash_program_halfword(uint32_t Address, uint16_t Data)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800158c:	4b0d      	ldr	r3, [pc, #52]	; (80015c4 <bsp_flash_program_halfword+0x44>)
 800158e:	691b      	ldr	r3, [r3, #16]
 8001590:	4a0c      	ldr	r2, [pc, #48]	; (80015c4 <bsp_flash_program_halfword+0x44>)
 8001592:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001596:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001598:	4b0a      	ldr	r3, [pc, #40]	; (80015c4 <bsp_flash_program_halfword+0x44>)
 800159a:	691b      	ldr	r3, [r3, #16]
 800159c:	4a09      	ldr	r2, [pc, #36]	; (80015c4 <bsp_flash_program_halfword+0x44>)
 800159e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80015a4:	4b07      	ldr	r3, [pc, #28]	; (80015c4 <bsp_flash_program_halfword+0x44>)
 80015a6:	691b      	ldr	r3, [r3, #16]
 80015a8:	4a06      	ldr	r2, [pc, #24]	; (80015c4 <bsp_flash_program_halfword+0x44>)
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	887a      	ldrh	r2, [r7, #2]
 80015b4:	801a      	strh	r2, [r3, #0]
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	40023c00 	.word	0x40023c00

080015c8 <bsp_flash_program_word>:

void bsp_flash_program_word(uint32_t Address, uint32_t Data)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80015d2:	4b0d      	ldr	r3, [pc, #52]	; (8001608 <bsp_flash_program_word+0x40>)
 80015d4:	691b      	ldr	r3, [r3, #16]
 80015d6:	4a0c      	ldr	r2, [pc, #48]	; (8001608 <bsp_flash_program_word+0x40>)
 80015d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015dc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80015de:	4b0a      	ldr	r3, [pc, #40]	; (8001608 <bsp_flash_program_word+0x40>)
 80015e0:	691b      	ldr	r3, [r3, #16]
 80015e2:	4a09      	ldr	r2, [pc, #36]	; (8001608 <bsp_flash_program_word+0x40>)
 80015e4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015e8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80015ea:	4b07      	ldr	r3, [pc, #28]	; (8001608 <bsp_flash_program_word+0x40>)
 80015ec:	691b      	ldr	r3, [r3, #16]
 80015ee:	4a06      	ldr	r2, [pc, #24]	; (8001608 <bsp_flash_program_word+0x40>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	683a      	ldr	r2, [r7, #0]
 80015fa:	601a      	str	r2, [r3, #0]
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	40023c00 	.word	0x40023c00

0800160c <bsp_flash_program_doubleword>:

void bsp_flash_program_doubleword(uint32_t Address, uint64_t Data)
{
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001618:	4b14      	ldr	r3, [pc, #80]	; (800166c <bsp_flash_program_doubleword+0x60>)
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	4a13      	ldr	r2, [pc, #76]	; (800166c <bsp_flash_program_doubleword+0x60>)
 800161e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001622:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001624:	4b11      	ldr	r3, [pc, #68]	; (800166c <bsp_flash_program_doubleword+0x60>)
 8001626:	691b      	ldr	r3, [r3, #16]
 8001628:	4a10      	ldr	r2, [pc, #64]	; (800166c <bsp_flash_program_doubleword+0x60>)
 800162a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800162e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001630:	4b0e      	ldr	r3, [pc, #56]	; (800166c <bsp_flash_program_doubleword+0x60>)
 8001632:	691b      	ldr	r3, [r3, #16]
 8001634:	4a0d      	ldr	r2, [pc, #52]	; (800166c <bsp_flash_program_doubleword+0x60>)
 8001636:	f043 0301 	orr.w	r3, r3, #1
 800163a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	683a      	ldr	r2, [r7, #0]
 8001640:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001642:	f3bf 8f6f 	isb	sy
}
 8001646:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001648:	e9d7 0100 	ldrd	r0, r1, [r7]
 800164c:	f04f 0200 	mov.w	r2, #0
 8001650:	f04f 0300 	mov.w	r3, #0
 8001654:	000a      	movs	r2, r1
 8001656:	2300      	movs	r3, #0
 8001658:	68f9      	ldr	r1, [r7, #12]
 800165a:	3104      	adds	r1, #4
 800165c:	4613      	mov	r3, r2
 800165e:	600b      	str	r3, [r1, #0]
}
 8001660:	bf00      	nop
 8001662:	3714      	adds	r7, #20
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	40023c00 	.word	0x40023c00

08001670 <bsp_gpio_set_pin>:

/* Private function prototypes ---------------------------------------- */

/* Function definitions ----------------------------------------------- */
void bsp_gpio_set_pin(GPIO_TypeDef *bsp_gpio_port, uint16_t bsp_gpio_pin)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	460b      	mov	r3, r1
 800167a:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(bsp_gpio_port, bsp_gpio_pin, GPIO_PIN_SET);
 800167c:	887b      	ldrh	r3, [r7, #2]
 800167e:	2201      	movs	r2, #1
 8001680:	4619      	mov	r1, r3
 8001682:	6878      	ldr	r0, [r7, #4]
 8001684:	f002 fa6e 	bl	8003b64 <HAL_GPIO_WritePin>
}
 8001688:	bf00      	nop
 800168a:	3708      	adds	r7, #8
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <bsp_gpio_reset_pin>:
void bsp_gpio_reset_pin(GPIO_TypeDef *bsp_gpio_port, uint16_t bsp_gpio_pin)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	460b      	mov	r3, r1
 800169a:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(bsp_gpio_port, bsp_gpio_pin, GPIO_PIN_RESET);
 800169c:	887b      	ldrh	r3, [r7, #2]
 800169e:	2200      	movs	r2, #0
 80016a0:	4619      	mov	r1, r3
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f002 fa5e 	bl	8003b64 <HAL_GPIO_WritePin>
}
 80016a8:	bf00      	nop
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <bsp_gpio_read_pin>:
void bsp_gpio_toggle_pin(GPIO_TypeDef *bsp_gpio_port, uint16_t bsp_gpio_pin)
{
	HAL_GPIO_TogglePin(bsp_gpio_port, bsp_gpio_pin);
}
GPIO_PinState bsp_gpio_read_pin(GPIO_TypeDef *bsp_gpio_port, uint16_t bsp_gpio_pin){
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	460b      	mov	r3, r1
 80016ba:	807b      	strh	r3, [r7, #2]

	return HAL_GPIO_ReadPin(bsp_gpio_port, bsp_gpio_pin);
 80016bc:	887b      	ldrh	r3, [r7, #2]
 80016be:	4619      	mov	r1, r3
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f002 fa37 	bl	8003b34 <HAL_GPIO_ReadPin>
 80016c6:	4603      	mov	r3, r0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <bsp_i2c_init>:
	}
	return 0;
}

void bsp_i2c_init(BSP_I2C_Handle *i2c_handle, I2C_HandleTypeDef *hi2c)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
	i2c_handle->hi2c = hi2c;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	601a      	str	r2, [r3, #0]
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <bsp_i2c_transmit>:


BSP_I2C_Status bsp_i2c_transmit(BSP_I2C_Handle *i2c_handle, uint16_t dev_address,
		uint8_t *data, uint16_t size)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af02      	add	r7, sp, #8
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	607a      	str	r2, [r7, #4]
 80016f6:	461a      	mov	r2, r3
 80016f8:	460b      	mov	r3, r1
 80016fa:	817b      	strh	r3, [r7, #10]
 80016fc:	4613      	mov	r3, r2
 80016fe:	813b      	strh	r3, [r7, #8]
	if (HAL_I2C_Master_Transmit(i2c_handle->hi2c, dev_address << 1, data, size,
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	6818      	ldr	r0, [r3, #0]
 8001704:	897b      	ldrh	r3, [r7, #10]
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	b299      	uxth	r1, r3
 800170a:	893b      	ldrh	r3, [r7, #8]
 800170c:	f04f 32ff 	mov.w	r2, #4294967295
 8001710:	9200      	str	r2, [sp, #0]
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	f002 fb84 	bl	8003e20 <HAL_I2C_Master_Transmit>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <bsp_i2c_transmit+0x36>
			HAL_MAX_DELAY) != HAL_OK)
	{
		return BSP_I2C_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e000      	b.n	8001724 <bsp_i2c_transmit+0x38>
	}
	return BSP_I2C_OK;
 8001722:	2300      	movs	r3, #0
}
 8001724:	4618      	mov	r0, r3
 8001726:	3710      	adds	r7, #16
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <bsp_i2C_master_transmit>:
/* Private variables -------------------------------------------------------- */

/* Function definitions ----------------------------------------------- */

bool bsp_i2C_master_transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af02      	add	r7, sp, #8
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	607a      	str	r2, [r7, #4]
 8001736:	461a      	mov	r2, r3
 8001738:	460b      	mov	r3, r1
 800173a:	817b      	strh	r3, [r7, #10]
 800173c:	4613      	mov	r3, r2
 800173e:	813b      	strh	r3, [r7, #8]
	if (HAL_I2C_Master_Transmit(hi2c, DevAddress, pData, Size, Timeout) != HAL_OK)
 8001740:	893a      	ldrh	r2, [r7, #8]
 8001742:	8979      	ldrh	r1, [r7, #10]
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	9300      	str	r3, [sp, #0]
 8001748:	4613      	mov	r3, r2
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	68f8      	ldr	r0, [r7, #12]
 800174e:	f002 fb67 	bl	8003e20 <HAL_I2C_Master_Transmit>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <bsp_i2C_master_transmit+0x30>
		return false;
 8001758:	2300      	movs	r3, #0
 800175a:	e000      	b.n	800175e <bsp_i2C_master_transmit+0x32>
	else
		return true;
 800175c:	2301      	movs	r3, #1
}
 800175e:	4618      	mov	r0, r3
 8001760:	3710      	adds	r7, #16
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <bsp_i2c_master_receive>:

bool bsp_i2c_master_receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b086      	sub	sp, #24
 800176a:	af02      	add	r7, sp, #8
 800176c:	60f8      	str	r0, [r7, #12]
 800176e:	607a      	str	r2, [r7, #4]
 8001770:	461a      	mov	r2, r3
 8001772:	460b      	mov	r3, r1
 8001774:	817b      	strh	r3, [r7, #10]
 8001776:	4613      	mov	r3, r2
 8001778:	813b      	strh	r3, [r7, #8]
	if (HAL_I2C_Master_Receive(hi2c, DevAddress, pData, Size, Timeout) != HAL_OK)
 800177a:	893a      	ldrh	r2, [r7, #8]
 800177c:	8979      	ldrh	r1, [r7, #10]
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	9300      	str	r3, [sp, #0]
 8001782:	4613      	mov	r3, r2
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	68f8      	ldr	r0, [r7, #12]
 8001788:	f002 fc48 	bl	800401c <HAL_I2C_Master_Receive>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <bsp_i2c_master_receive+0x30>
		return false;
 8001792:	2300      	movs	r3, #0
 8001794:	e000      	b.n	8001798 <bsp_i2c_master_receive+0x32>
	else
		return true;
 8001796:	2301      	movs	r3, #1
}
 8001798:	4618      	mov	r0, r3
 800179a:	3710      	adds	r7, #16
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}

080017a0 <bspGetSPI>:
#include "main.h"
SPI_HandleTypeDef *bspSPI;

/* Function definitions ----------------------------------------------- */
HAL_StatusTypeDef bspGetSPI(SPI_HandleTypeDef *spix)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
	if(!spix) return HAL_ERROR;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d101      	bne.n	80017b2 <bspGetSPI+0x12>
 80017ae:	2301      	movs	r3, #1
 80017b0:	e003      	b.n	80017ba <bspGetSPI+0x1a>
	bspSPI = spix;
 80017b2:	4a05      	ldr	r2, [pc, #20]	; (80017c8 <bspGetSPI+0x28>)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6013      	str	r3, [r2, #0]
	return HAL_OK;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	2000018c 	.word	0x2000018c

080017cc <bsp_spi_transmit_receive>:

HAL_StatusTypeDef bsp_spi_transmit_receive(uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,uint32_t Timeout)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af02      	add	r7, sp, #8
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	603b      	str	r3, [r7, #0]
 80017d8:	4613      	mov	r3, r2
 80017da:	80fb      	strh	r3, [r7, #6]
	if(!bspSPI) return HAL_ERROR;
 80017dc:	4b13      	ldr	r3, [pc, #76]	; (800182c <bsp_spi_transmit_receive+0x60>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d101      	bne.n	80017e8 <bsp_spi_transmit_receive+0x1c>
 80017e4:	2301      	movs	r3, #1
 80017e6:	e01c      	b.n	8001822 <bsp_spi_transmit_receive+0x56>
	while(!__HAL_SPI_GET_FLAG(bspSPI,SPI_FLAG_TXE));
 80017e8:	bf00      	nop
 80017ea:	4b10      	ldr	r3, [pc, #64]	; (800182c <bsp_spi_transmit_receive+0x60>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d1f7      	bne.n	80017ea <bsp_spi_transmit_receive+0x1e>
	HAL_SPI_TransmitReceive(bspSPI, pTxData,pRxData,Size, Timeout);
 80017fa:	4b0c      	ldr	r3, [pc, #48]	; (800182c <bsp_spi_transmit_receive+0x60>)
 80017fc:	6818      	ldr	r0, [r3, #0]
 80017fe:	88fa      	ldrh	r2, [r7, #6]
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	9300      	str	r3, [sp, #0]
 8001804:	4613      	mov	r3, r2
 8001806:	68ba      	ldr	r2, [r7, #8]
 8001808:	68f9      	ldr	r1, [r7, #12]
 800180a:	f003 fe7c 	bl	8005506 <HAL_SPI_TransmitReceive>
	while(__HAL_SPI_GET_FLAG(bspSPI,SPI_FLAG_BSY));	/*!< Send byte through the SPI1 peripheral */
 800180e:	bf00      	nop
 8001810:	4b06      	ldr	r3, [pc, #24]	; (800182c <bsp_spi_transmit_receive+0x60>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800181c:	2b80      	cmp	r3, #128	; 0x80
 800181e:	d0f7      	beq.n	8001810 <bsp_spi_transmit_receive+0x44>
	return HAL_OK;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	2000018c 	.word	0x2000018c

08001830 <bsp_uart_transmit>:
/* Private variables -------------------------------------------------------- */

/* Public implementations --------------------------------------------------- */

bool bsp_uart_transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	603b      	str	r3, [r7, #0]
 800183c:	4613      	mov	r3, r2
 800183e:	80fb      	strh	r3, [r7, #6]
	if (HAL_UART_Transmit(huart, pData, Size, Timeout) != HAL_OK)
 8001840:	88fa      	ldrh	r2, [r7, #6]
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	68b9      	ldr	r1, [r7, #8]
 8001846:	68f8      	ldr	r0, [r7, #12]
 8001848:	f004 fd5d 	bl	8006306 <HAL_UART_Transmit>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <bsp_uart_transmit+0x26>
		return false;
 8001852:	2300      	movs	r3, #0
 8001854:	e000      	b.n	8001858 <bsp_uart_transmit+0x28>
	else
		return true;
 8001856:	2301      	movs	r3, #1
}
 8001858:	4618      	mov	r0, r3
 800185a:	3710      	adds	r7, #16
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <bsp_uart_receive_it>:


bool bsp_uart_receive_it(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	4613      	mov	r3, r2
 800186c:	80fb      	strh	r3, [r7, #6]
	if (HAL_UART_Receive_IT(huart, pData, Size) != HAL_OK)
 800186e:	88fb      	ldrh	r3, [r7, #6]
 8001870:	461a      	mov	r2, r3
 8001872:	68b9      	ldr	r1, [r7, #8]
 8001874:	68f8      	ldr	r0, [r7, #12]
 8001876:	f004 fdd8 	bl	800642a <HAL_UART_Receive_IT>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <bsp_uart_receive_it+0x24>
		return false;
 8001880:	2300      	movs	r3, #0
 8001882:	e000      	b.n	8001886 <bsp_uart_receive_it+0x26>
	else
		return true;
 8001884:	2301      	movs	r3, #1
}
 8001886:	4618      	mov	r0, r3
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <time_delay>:
/* Private variables -------------------------------------------------------- */

/* Public implementations --------------------------------------------------- */

void time_delay(uint32_t delay)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b082      	sub	sp, #8
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
	bsp_delay(delay);
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f7ff fdbe 	bl	8001418 <bsp_delay>
}
 800189c:	bf00      	nop
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <ds1307_init>:
/* Private function prototypes ---------------------------------------------- */

/* Public implementations --------------------------------------------------- */
/*----------------------------------Init--------------------------------------*/
void ds1307_init(I2C_HandleTypeDef *hi2c)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  _ds1307_ui2c = hi2c;
 80018ac:	4a04      	ldr	r2, [pc, #16]	; (80018c0 <ds1307_init+0x1c>)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6013      	str	r3, [r2, #0]
  ds1307_set_clock_halt(0);
 80018b2:	2000      	movs	r0, #0
 80018b4:	f000 f806 	bl	80018c4 <ds1307_set_clock_halt>
  //Check if device is connected
  // if (...)
  //   return TM_DS1307_Result_DeviceNotConnected;
  // else
  //   return TM_DS1307_Result_Ok;
}
 80018b8:	bf00      	nop
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20000188 	.word	0x20000188

080018c4 <ds1307_set_clock_halt>:

void ds1307_set_clock_halt(uint8_t halt)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b084      	sub	sp, #16
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	71fb      	strb	r3, [r7, #7]
  uint8_t clock_halt = (halt ? 1 << 7 : 0);
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <ds1307_set_clock_halt+0x14>
 80018d4:	2380      	movs	r3, #128	; 0x80
 80018d6:	e000      	b.n	80018da <ds1307_set_clock_halt+0x16>
 80018d8:	2300      	movs	r3, #0
 80018da:	73fb      	strb	r3, [r7, #15]
  ds1307_set_reg_byte(DS1307_REG_SECOND, clock_halt | (ds1307_get_reg_byte(DS1307_REG_SECOND) & 0x7f));
 80018dc:	2000      	movs	r0, #0
 80018de:	f000 f831 	bl	8001944 <ds1307_get_reg_byte>
 80018e2:	4603      	mov	r3, r0
 80018e4:	b25b      	sxtb	r3, r3
 80018e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018ea:	b25a      	sxtb	r2, r3
 80018ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	b25b      	sxtb	r3, r3
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	4619      	mov	r1, r3
 80018f8:	2000      	movs	r0, #0
 80018fa:	f000 f805 	bl	8001908 <ds1307_set_reg_byte>
}
 80018fe:	bf00      	nop
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
	...

08001908 <ds1307_set_reg_byte>:
  return (ds1307_get_reg_byte(DS1307_REG_SECOND) & 0x80) >> 7;
}

/*-----------------------------Get and Set register-------------------- ------*/
void ds1307_set_reg_byte(uint8_t reg_addr, uint8_t val)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af02      	add	r7, sp, #8
 800190e:	4603      	mov	r3, r0
 8001910:	460a      	mov	r2, r1
 8001912:	71fb      	strb	r3, [r7, #7]
 8001914:	4613      	mov	r3, r2
 8001916:	71bb      	strb	r3, [r7, #6]
  uint8_t bytes[2] = {reg_addr, val};
 8001918:	79fb      	ldrb	r3, [r7, #7]
 800191a:	733b      	strb	r3, [r7, #12]
 800191c:	79bb      	ldrb	r3, [r7, #6]
 800191e:	737b      	strb	r3, [r7, #13]
  bsp_i2C_master_transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, bytes, 2, DS1307_TIMEOUT);
 8001920:	4b07      	ldr	r3, [pc, #28]	; (8001940 <ds1307_set_reg_byte+0x38>)
 8001922:	6818      	ldr	r0, [r3, #0]
 8001924:	f107 020c 	add.w	r2, r7, #12
 8001928:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800192c:	9300      	str	r3, [sp, #0]
 800192e:	2302      	movs	r3, #2
 8001930:	21d0      	movs	r1, #208	; 0xd0
 8001932:	f7ff fefb 	bl	800172c <bsp_i2C_master_transmit>
}
 8001936:	bf00      	nop
 8001938:	3710      	adds	r7, #16
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000188 	.word	0x20000188

08001944 <ds1307_get_reg_byte>:

uint8_t ds1307_get_reg_byte(uint8_t reg_addr)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b086      	sub	sp, #24
 8001948:	af02      	add	r7, sp, #8
 800194a:	4603      	mov	r3, r0
 800194c:	71fb      	strb	r3, [r7, #7]
  uint8_t val;
  bsp_i2C_master_transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &reg_addr, 1, DS1307_TIMEOUT);
 800194e:	4b0d      	ldr	r3, [pc, #52]	; (8001984 <ds1307_get_reg_byte+0x40>)
 8001950:	6818      	ldr	r0, [r3, #0]
 8001952:	1dfa      	adds	r2, r7, #7
 8001954:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001958:	9300      	str	r3, [sp, #0]
 800195a:	2301      	movs	r3, #1
 800195c:	21d0      	movs	r1, #208	; 0xd0
 800195e:	f7ff fee5 	bl	800172c <bsp_i2C_master_transmit>
  bsp_i2c_master_receive(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &val, 1, DS1307_TIMEOUT);
 8001962:	4b08      	ldr	r3, [pc, #32]	; (8001984 <ds1307_get_reg_byte+0x40>)
 8001964:	6818      	ldr	r0, [r3, #0]
 8001966:	f107 020f 	add.w	r2, r7, #15
 800196a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800196e:	9300      	str	r3, [sp, #0]
 8001970:	2301      	movs	r3, #1
 8001972:	21d0      	movs	r1, #208	; 0xd0
 8001974:	f7ff fef7 	bl	8001766 <bsp_i2c_master_receive>
  return val;
 8001978:	7bfb      	ldrb	r3, [r7, #15]
}
 800197a:	4618      	mov	r0, r3
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20000188 	.word	0x20000188

08001988 <ds1307_get_date_time>:

/*-----------------------------------Get time--------------------------------*/

/* Get full time */
void ds1307_get_date_time(ds1307_time_t *ds1307)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
    uint16_t cen;
    ds1307->seconds=ds1307_bin_to_bcd(ds1307_get_reg_byte(DS1307_REG_SECOND) & 0x7f);
 8001990:	2000      	movs	r0, #0
 8001992:	f7ff ffd7 	bl	8001944 <ds1307_get_reg_byte>
 8001996:	4603      	mov	r3, r0
 8001998:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800199c:	b2db      	uxtb	r3, r3
 800199e:	4618      	mov	r0, r3
 80019a0:	f000 f863 	bl	8001a6a <ds1307_bin_to_bcd>
 80019a4:	4603      	mov	r3, r0
 80019a6:	461a      	mov	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	701a      	strb	r2, [r3, #0]
    ds1307->minutes=ds1307_bin_to_bcd(ds1307_get_reg_byte(DS1307_REG_MINUTE));
 80019ac:	2001      	movs	r0, #1
 80019ae:	f7ff ffc9 	bl	8001944 <ds1307_get_reg_byte>
 80019b2:	4603      	mov	r3, r0
 80019b4:	4618      	mov	r0, r3
 80019b6:	f000 f858 	bl	8001a6a <ds1307_bin_to_bcd>
 80019ba:	4603      	mov	r3, r0
 80019bc:	461a      	mov	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	705a      	strb	r2, [r3, #1]
    ds1307->hours=ds1307_bin_to_bcd(ds1307_get_reg_byte(DS1307_REG_HOUR) & 0x3f);
 80019c2:	2002      	movs	r0, #2
 80019c4:	f7ff ffbe 	bl	8001944 <ds1307_get_reg_byte>
 80019c8:	4603      	mov	r3, r0
 80019ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	4618      	mov	r0, r3
 80019d2:	f000 f84a 	bl	8001a6a <ds1307_bin_to_bcd>
 80019d6:	4603      	mov	r3, r0
 80019d8:	461a      	mov	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	709a      	strb	r2, [r3, #2]
    ds1307->dow=ds1307_bin_to_bcd(ds1307_get_reg_byte(DS1307_REG_DOW));
 80019de:	2003      	movs	r0, #3
 80019e0:	f7ff ffb0 	bl	8001944 <ds1307_get_reg_byte>
 80019e4:	4603      	mov	r3, r0
 80019e6:	4618      	mov	r0, r3
 80019e8:	f000 f83f 	bl	8001a6a <ds1307_bin_to_bcd>
 80019ec:	4603      	mov	r3, r0
 80019ee:	461a      	mov	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	70da      	strb	r2, [r3, #3]
    ds1307->date=ds1307_bin_to_bcd(ds1307_get_reg_byte(DS1307_REG_DATE));
 80019f4:	2004      	movs	r0, #4
 80019f6:	f7ff ffa5 	bl	8001944 <ds1307_get_reg_byte>
 80019fa:	4603      	mov	r3, r0
 80019fc:	4618      	mov	r0, r3
 80019fe:	f000 f834 	bl	8001a6a <ds1307_bin_to_bcd>
 8001a02:	4603      	mov	r3, r0
 8001a04:	461a      	mov	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	711a      	strb	r2, [r3, #4]
    ds1307->month=ds1307_bin_to_bcd(ds1307_get_reg_byte(DS1307_REG_MONTH));
 8001a0a:	2005      	movs	r0, #5
 8001a0c:	f7ff ff9a 	bl	8001944 <ds1307_get_reg_byte>
 8001a10:	4603      	mov	r3, r0
 8001a12:	4618      	mov	r0, r3
 8001a14:	f000 f829 	bl	8001a6a <ds1307_bin_to_bcd>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	715a      	strb	r2, [r3, #5]
    cen = ds1307_bin_to_bcd(ds1307_get_reg_byte(DS1307_REG_CENT));
 8001a20:	2010      	movs	r0, #16
 8001a22:	f7ff ff8f 	bl	8001944 <ds1307_get_reg_byte>
 8001a26:	4603      	mov	r3, r0
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f000 f81e 	bl	8001a6a <ds1307_bin_to_bcd>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	81fb      	strh	r3, [r7, #14]
    ds1307->year=ds1307_bin_to_bcd(ds1307_get_reg_byte(DS1307_REG_YEAR)) + (cen * 100);
 8001a32:	2006      	movs	r0, #6
 8001a34:	f7ff ff86 	bl	8001944 <ds1307_get_reg_byte>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f000 f815 	bl	8001a6a <ds1307_bin_to_bcd>
 8001a40:	4603      	mov	r3, r0
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	89fb      	ldrh	r3, [r7, #14]
 8001a46:	4619      	mov	r1, r3
 8001a48:	0089      	lsls	r1, r1, #2
 8001a4a:	440b      	add	r3, r1
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	0088      	lsls	r0, r1, #2
 8001a50:	4619      	mov	r1, r3
 8001a52:	4603      	mov	r3, r0
 8001a54:	440b      	add	r3, r1
 8001a56:	009b      	lsls	r3, r3, #2
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	4413      	add	r3, r2
 8001a5c:	b29a      	uxth	r2, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	80da      	strh	r2, [r3, #6]
}
 8001a62:	bf00      	nop
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <ds1307_bin_to_bcd>:
  ds1307_set_reg_byte(DS1307_REG_SECOND, ds1307_bcd_to_bin(second | clock_halt));
}

/*---------------------------------Convert BCD - BIN-------------------------------*/
uint8_t ds1307_bin_to_bcd(uint8_t bin)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b083      	sub	sp, #12
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	4603      	mov	r3, r0
 8001a72:	71fb      	strb	r3, [r7, #7]
  return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	091b      	lsrs	r3, r3, #4
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	0092      	lsls	r2, r2, #2
 8001a7e:	4413      	add	r3, r2
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	f003 030f 	and.w	r3, r3, #15
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	4413      	add	r3, r2
 8001a8e:	b2db      	uxtb	r3, r3
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <lcd_i2c_init>:
 * @param[in] hi2c Pointer to the I2C handle used for communication with the LCD module.
 */
static void lcd_i2c_init(I2C_HandleTypeDef *hi2c);

/* Function definitions ----------------------------------------------- */
static void lcd_i2c_init(I2C_HandleTypeDef *hi2c) {
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
    bsp_i2c_init(&i2c1_handle, hi2c);
 8001aa4:	6879      	ldr	r1, [r7, #4]
 8001aa6:	4803      	ldr	r0, [pc, #12]	; (8001ab4 <lcd_i2c_init+0x18>)
 8001aa8:	f7ff fe12 	bl	80016d0 <bsp_i2c_init>
}
 8001aac:	bf00      	nop
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	20000194 	.word	0x20000194

08001ab8 <lcd_send_cmd>:

void lcd_send_cmd(char cmd) {
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (cmd & 0xf0);
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	f023 030f 	bic.w	r3, r3, #15
 8001ac8:	73fb      	strb	r3, [r7, #15]
    data_l = ((cmd << 4) & 0xf0);
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	011b      	lsls	r3, r3, #4
 8001ace:	73bb      	strb	r3, [r7, #14]
    data_t[0] = data_u | 0x0C;  // en=1, rs=0
 8001ad0:	7bfb      	ldrb	r3, [r7, #15]
 8001ad2:	f043 030c 	orr.w	r3, r3, #12
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x08;  // en=0, rs=0
 8001ada:	7bfb      	ldrb	r3, [r7, #15]
 8001adc:	f043 0308 	orr.w	r3, r3, #8
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0C;  // en=1, rs=0
 8001ae4:	7bbb      	ldrb	r3, [r7, #14]
 8001ae6:	f043 030c 	orr.w	r3, r3, #12
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x08;  // en=0, rs=0
 8001aee:	7bbb      	ldrb	r3, [r7, #14]
 8001af0:	f043 0308 	orr.w	r3, r3, #8
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	72fb      	strb	r3, [r7, #11]
    bsp_i2c_transmit(&i2c1_handle, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4);
 8001af8:	f107 0208 	add.w	r2, r7, #8
 8001afc:	2304      	movs	r3, #4
 8001afe:	2127      	movs	r1, #39	; 0x27
 8001b00:	4803      	ldr	r0, [pc, #12]	; (8001b10 <lcd_send_cmd+0x58>)
 8001b02:	f7ff fdf3 	bl	80016ec <bsp_i2c_transmit>
}
 8001b06:	bf00      	nop
 8001b08:	3710      	adds	r7, #16
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	20000194 	.word	0x20000194

08001b14 <lcd_send_data>:

void lcd_send_data(char data) {
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (data & 0xf0);
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	f023 030f 	bic.w	r3, r3, #15
 8001b24:	73fb      	strb	r3, [r7, #15]
    data_l = ((data << 4) & 0xf0);
 8001b26:	79fb      	ldrb	r3, [r7, #7]
 8001b28:	011b      	lsls	r3, r3, #4
 8001b2a:	73bb      	strb	r3, [r7, #14]
    data_t[0] = data_u | 0x0D;  // en=1, rs=0
 8001b2c:	7bfb      	ldrb	r3, [r7, #15]
 8001b2e:	f043 030d 	orr.w	r3, r3, #13
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  // en=0, rs=0
 8001b36:	7bfb      	ldrb	r3, [r7, #15]
 8001b38:	f043 0309 	orr.w	r3, r3, #9
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  // en=1, rs=0
 8001b40:	7bbb      	ldrb	r3, [r7, #14]
 8001b42:	f043 030d 	orr.w	r3, r3, #13
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  // en=0, rs=0
 8001b4a:	7bbb      	ldrb	r3, [r7, #14]
 8001b4c:	f043 0309 	orr.w	r3, r3, #9
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	72fb      	strb	r3, [r7, #11]
    bsp_i2c_transmit(&i2c1_handle, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4);
 8001b54:	f107 0208 	add.w	r2, r7, #8
 8001b58:	2304      	movs	r3, #4
 8001b5a:	2127      	movs	r1, #39	; 0x27
 8001b5c:	4803      	ldr	r0, [pc, #12]	; (8001b6c <lcd_send_data+0x58>)
 8001b5e:	f7ff fdc5 	bl	80016ec <bsp_i2c_transmit>
}
 8001b62:	bf00      	nop
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000194 	.word	0x20000194

08001b70 <lcd_clear>:

void lcd_clear(void) {
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8001b76:	2080      	movs	r0, #128	; 0x80
 8001b78:	f7ff ff9e 	bl	8001ab8 <lcd_send_cmd>
    for (int i = 0; i < 70; i++) {
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	607b      	str	r3, [r7, #4]
 8001b80:	e005      	b.n	8001b8e <lcd_clear+0x1e>
        lcd_send_data(' ');
 8001b82:	2020      	movs	r0, #32
 8001b84:	f7ff ffc6 	bl	8001b14 <lcd_send_data>
    for (int i = 0; i < 70; i++) {
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	607b      	str	r3, [r7, #4]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2b45      	cmp	r3, #69	; 0x45
 8001b92:	ddf6      	ble.n	8001b82 <lcd_clear+0x12>
    }
}
 8001b94:	bf00      	nop
 8001b96:	bf00      	nop
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <lcd_goto_xy>:

void lcd_goto_xy(int row, int col) {
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b082      	sub	sp, #8
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
 8001ba6:	6039      	str	r1, [r7, #0]
    switch (row) {
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <lcd_goto_xy+0x18>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d005      	beq.n	8001bc0 <lcd_goto_xy+0x22>
 8001bb4:	e009      	b.n	8001bca <lcd_goto_xy+0x2c>
        case 0:
            col |= 0x80;
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bbc:	603b      	str	r3, [r7, #0]
            break;
 8001bbe:	e004      	b.n	8001bca <lcd_goto_xy+0x2c>
        case 1:
            col |= 0xC0;
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001bc6:	603b      	str	r3, [r7, #0]
            break;
 8001bc8:	bf00      	nop
    }

    lcd_send_cmd(col);
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff ff72 	bl	8001ab8 <lcd_send_cmd>
}
 8001bd4:	bf00      	nop
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <lcd_init>:

void lcd_init(I2C_HandleTypeDef *hi2c) {
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
    lcd_i2c_init(hi2c);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f7ff ff59 	bl	8001a9c <lcd_i2c_init>
    // 4-bit initialization
    HAL_Delay(50);  // wait for >40ms
 8001bea:	2032      	movs	r0, #50	; 0x32
 8001bec:	f001 fbb0 	bl	8003350 <HAL_Delay>
    lcd_send_cmd(0x30);
 8001bf0:	2030      	movs	r0, #48	; 0x30
 8001bf2:	f7ff ff61 	bl	8001ab8 <lcd_send_cmd>
    HAL_Delay(5);  // wait for >4.1ms
 8001bf6:	2005      	movs	r0, #5
 8001bf8:	f001 fbaa 	bl	8003350 <HAL_Delay>
    lcd_send_cmd(0x30);
 8001bfc:	2030      	movs	r0, #48	; 0x30
 8001bfe:	f7ff ff5b 	bl	8001ab8 <lcd_send_cmd>
    HAL_Delay(1);  // wait for >100us
 8001c02:	2001      	movs	r0, #1
 8001c04:	f001 fba4 	bl	8003350 <HAL_Delay>
    lcd_send_cmd(0x30);
 8001c08:	2030      	movs	r0, #48	; 0x30
 8001c0a:	f7ff ff55 	bl	8001ab8 <lcd_send_cmd>
    HAL_Delay(10);
 8001c0e:	200a      	movs	r0, #10
 8001c10:	f001 fb9e 	bl	8003350 <HAL_Delay>
    lcd_send_cmd(0x20);  // 4-bit mode
 8001c14:	2020      	movs	r0, #32
 8001c16:	f7ff ff4f 	bl	8001ab8 <lcd_send_cmd>
    HAL_Delay(10);
 8001c1a:	200a      	movs	r0, #10
 8001c1c:	f001 fb98 	bl	8003350 <HAL_Delay>

    // Display initialization
    lcd_send_cmd(0x28);  // Function set --> DL=0 (4-bit mode), N = 1 (2-line display), F = 0 (5x8 characters)
 8001c20:	2028      	movs	r0, #40	; 0x28
 8001c22:	f7ff ff49 	bl	8001ab8 <lcd_send_cmd>
    HAL_Delay(1);
 8001c26:	2001      	movs	r0, #1
 8001c28:	f001 fb92 	bl	8003350 <HAL_Delay>
    lcd_send_cmd(0x08);  // Display on/off control --> D=0, C=0, B=0  ---> display off
 8001c2c:	2008      	movs	r0, #8
 8001c2e:	f7ff ff43 	bl	8001ab8 <lcd_send_cmd>
    HAL_Delay(1);
 8001c32:	2001      	movs	r0, #1
 8001c34:	f001 fb8c 	bl	8003350 <HAL_Delay>
    lcd_send_cmd(0x01);  // Clear display
 8001c38:	2001      	movs	r0, #1
 8001c3a:	f7ff ff3d 	bl	8001ab8 <lcd_send_cmd>
    HAL_Delay(1);
 8001c3e:	2001      	movs	r0, #1
 8001c40:	f001 fb86 	bl	8003350 <HAL_Delay>
    HAL_Delay(1);
 8001c44:	2001      	movs	r0, #1
 8001c46:	f001 fb83 	bl	8003350 <HAL_Delay>
    lcd_send_cmd(0x06);  // Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001c4a:	2006      	movs	r0, #6
 8001c4c:	f7ff ff34 	bl	8001ab8 <lcd_send_cmd>
    HAL_Delay(1);
 8001c50:	2001      	movs	r0, #1
 8001c52:	f001 fb7d 	bl	8003350 <HAL_Delay>
    lcd_send_cmd(0x0C);  // Display on/off
 8001c56:	200c      	movs	r0, #12
 8001c58:	f7ff ff2e 	bl	8001ab8 <lcd_send_cmd>
}
 8001c5c:	bf00      	nop
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <lcd_send_string>:

void lcd_send_string(char *str) {
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
    while (*str) {
 8001c6c:	e006      	b.n	8001c7c <lcd_send_string+0x18>
        lcd_send_data(*str++);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	1c5a      	adds	r2, r3, #1
 8001c72:	607a      	str	r2, [r7, #4]
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7ff ff4c 	bl	8001b14 <lcd_send_data>
    while (*str) {
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d1f4      	bne.n	8001c6e <lcd_send_string+0xa>
    }
}
 8001c84:	bf00      	nop
 8001c86:	bf00      	nop
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <lcd_display>:

void lcd_display(int row, int col, char *str)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b084      	sub	sp, #16
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	60f8      	str	r0, [r7, #12]
 8001c96:	60b9      	str	r1, [r7, #8]
 8001c98:	607a      	str	r2, [r7, #4]
	lcd_goto_xy(row, col);
 8001c9a:	68b9      	ldr	r1, [r7, #8]
 8001c9c:	68f8      	ldr	r0, [r7, #12]
 8001c9e:	f7ff ff7e 	bl	8001b9e <lcd_goto_xy>
	lcd_send_string(str);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f7ff ffde 	bl	8001c64 <lcd_send_string>
}
 8001ca8:	bf00      	nop
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <keypad3x4_init>:
										 GPIO_TypeDef* COL2_PORT, uint32_t COL2_PIN,
										 GPIO_TypeDef* ROW0_PORT, uint32_t ROW0_PIN,
										 GPIO_TypeDef* ROW1_PORT, uint32_t ROW1_PIN,
										 GPIO_TypeDef* ROW2_PORT, uint32_t ROW2_PIN,
										 GPIO_TypeDef* ROW3_PORT, uint32_t ROW3_PIN)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
 8001cbc:	603b      	str	r3, [r7, #0]
	keypad->col_port[0] = COL0_PORT;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	68ba      	ldr	r2, [r7, #8]
 8001cc2:	62da      	str	r2, [r3, #44]	; 0x2c
	keypad->col_pins[0] = COL0_PIN;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	611a      	str	r2, [r3, #16]
	keypad->col_port[1] = COL1_PORT;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	683a      	ldr	r2, [r7, #0]
 8001cce:	631a      	str	r2, [r3, #48]	; 0x30
	keypad->col_pins[1] = COL1_PIN;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	615a      	str	r2, [r3, #20]
	keypad->col_port[2] = COL2_PORT;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	69fa      	ldr	r2, [r7, #28]
 8001cda:	635a      	str	r2, [r3, #52]	; 0x34
	keypad->col_pins[2] = COL2_PIN;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	6a3a      	ldr	r2, [r7, #32]
 8001ce0:	619a      	str	r2, [r3, #24]

	keypad->row_port[0] = ROW0_PORT;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ce6:	61da      	str	r2, [r3, #28]
	keypad->row_pins[0] = ROW0_PIN;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001cec:	601a      	str	r2, [r3, #0]
	keypad->row_port[1] = ROW1_PORT;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cf2:	621a      	str	r2, [r3, #32]
	keypad->row_pins[1] = ROW1_PIN;
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001cf8:	605a      	str	r2, [r3, #4]
	keypad->row_port[2] = ROW2_PORT;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001cfe:	625a      	str	r2, [r3, #36]	; 0x24
	keypad->row_pins[2] = ROW2_PIN;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d04:	609a      	str	r2, [r3, #8]
	keypad->row_port[3] = ROW3_PORT;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d0a:	629a      	str	r2, [r3, #40]	; 0x28
	keypad->row_pins[3] = ROW3_PIN;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001d10:	60da      	str	r2, [r3, #12]

	keypad->key_current_status = 0;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	2200      	movs	r2, #0
 8001d16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	keypad->key_debouce_time = 0;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	63da      	str	r2, [r3, #60]	; 0x3c
	keypad->key_debounce_status = 0;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	keypad->key_is_debouncing = 0;
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	keypad->key_last_status = 0;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8001d38:	bf00      	nop
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <keypad_select_row>:
static void keypad_select_row(keypad_name* keypad, uint8_t row){
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	70fb      	strb	r3, [r7, #3]
	bsp_gpio_reset_pin(keypad->row_port[row], keypad->row_pins[row]);
 8001d50:	78fb      	ldrb	r3, [r7, #3]
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	3306      	adds	r3, #6
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	4413      	add	r3, r2
 8001d5a:	6858      	ldr	r0, [r3, #4]
 8001d5c:	78fa      	ldrb	r2, [r7, #3]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	4619      	mov	r1, r3
 8001d68:	f7ff fc92 	bl	8001690 <bsp_gpio_reset_pin>
}
 8001d6c:	bf00      	nop
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <keypad_unselect_row>:
static void keypad_unselect_row(keypad_name* keypad){
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
	for (uint8_t row = 0; row < KEYPAD_ROW; row++){
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	73fb      	strb	r3, [r7, #15]
 8001d80:	e010      	b.n	8001da4 <keypad_unselect_row+0x30>
		bsp_gpio_set_pin(keypad->row_port[row], keypad->row_pins[row]);
 8001d82:	7bfb      	ldrb	r3, [r7, #15]
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	3306      	adds	r3, #6
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	4413      	add	r3, r2
 8001d8c:	6858      	ldr	r0, [r3, #4]
 8001d8e:	7bfa      	ldrb	r2, [r7, #15]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d96:	b29b      	uxth	r3, r3
 8001d98:	4619      	mov	r1, r3
 8001d9a:	f7ff fc69 	bl	8001670 <bsp_gpio_set_pin>
	for (uint8_t row = 0; row < KEYPAD_ROW; row++){
 8001d9e:	7bfb      	ldrb	r3, [r7, #15]
 8001da0:	3301      	adds	r3, #1
 8001da2:	73fb      	strb	r3, [r7, #15]
 8001da4:	7bfb      	ldrb	r3, [r7, #15]
 8001da6:	2b03      	cmp	r3, #3
 8001da8:	d9eb      	bls.n	8001d82 <keypad_unselect_row+0xe>
	}
}
 8001daa:	bf00      	nop
 8001dac:	bf00      	nop
 8001dae:	3710      	adds	r7, #16
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <keypad_getkey>:
uint8_t keypad_getkey(keypad_name* keypad){
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
	for (uint8_t row = 0; row < KEYPAD_ROW; row++){
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	73fb      	strb	r3, [r7, #15]
 8001dc0:	e02f      	b.n	8001e22 <keypad_getkey+0x6e>
		keypad_unselect_row(keypad);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7ff ffd6 	bl	8001d74 <keypad_unselect_row>
		keypad_select_row(keypad, row);
 8001dc8:	7bfb      	ldrb	r3, [r7, #15]
 8001dca:	4619      	mov	r1, r3
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f7ff ffb9 	bl	8001d44 <keypad_select_row>
		for (uint8_t col = 0; col < KEYPAD_COL; col++){
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	73bb      	strb	r3, [r7, #14]
 8001dd6:	e01e      	b.n	8001e16 <keypad_getkey+0x62>
			if(!bsp_gpio_read_pin(keypad->col_port[col], keypad->col_pins[col])){
 8001dd8:	7bbb      	ldrb	r3, [r7, #14]
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	330a      	adds	r3, #10
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	4413      	add	r3, r2
 8001de2:	6858      	ldr	r0, [r3, #4]
 8001de4:	7bba      	ldrb	r2, [r7, #14]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	3204      	adds	r2, #4
 8001dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	4619      	mov	r1, r3
 8001df2:	f7ff fc5d 	bl	80016b0 <bsp_gpio_read_pin>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d109      	bne.n	8001e10 <keypad_getkey+0x5c>
				//HAL_Delay(500);
				return key_code[row][col]; //1
 8001dfc:	7bfa      	ldrb	r2, [r7, #15]
 8001dfe:	7bb9      	ldrb	r1, [r7, #14]
 8001e00:	480c      	ldr	r0, [pc, #48]	; (8001e34 <keypad_getkey+0x80>)
 8001e02:	4613      	mov	r3, r2
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	4413      	add	r3, r2
 8001e08:	4403      	add	r3, r0
 8001e0a:	440b      	add	r3, r1
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	e00c      	b.n	8001e2a <keypad_getkey+0x76>
		for (uint8_t col = 0; col < KEYPAD_COL; col++){
 8001e10:	7bbb      	ldrb	r3, [r7, #14]
 8001e12:	3301      	adds	r3, #1
 8001e14:	73bb      	strb	r3, [r7, #14]
 8001e16:	7bbb      	ldrb	r3, [r7, #14]
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d9dd      	bls.n	8001dd8 <keypad_getkey+0x24>
	for (uint8_t row = 0; row < KEYPAD_ROW; row++){
 8001e1c:	7bfb      	ldrb	r3, [r7, #15]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	73fb      	strb	r3, [r7, #15]
 8001e22:	7bfb      	ldrb	r3, [r7, #15]
 8001e24:	2b03      	cmp	r3, #3
 8001e26:	d9cc      	bls.n	8001dc2 <keypad_getkey+0xe>
			}
		}
	}
	return 0;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	08007ee0 	.word	0x08007ee0

08001e38 <keypad_filter>:
void keypad_filter(keypad_name* keypad){
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
	uint8_t key = keypad_getkey(keypad); // get the key status
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f7ff ffb7 	bl	8001db4 <keypad_getkey>
 8001e46:	4603      	mov	r3, r0
 8001e48:	73fb      	strb	r3, [r7, #15]
	// state handle filter
	if(key != keypad->key_debounce_status){
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e50:	7bfa      	ldrb	r2, [r7, #15]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d00c      	beq.n	8001e70 <keypad_filter+0x38>
		keypad->key_is_debouncing = 1;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		keypad->key_debouce_time = HAL_GetTick();
 8001e5e:	f001 fa6b 	bl	8003338 <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	63da      	str	r2, [r3, #60]	; 0x3c
		keypad->key_debounce_status = key;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	7bfa      	ldrb	r2, [r7, #15]
 8001e6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	}
	// finish filter
	if(keypad->key_is_debouncing && (HAL_GetTick() - keypad->key_debouce_time >= 50)){
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d011      	beq.n	8001e9e <keypad_filter+0x66>
 8001e7a:	f001 fa5d 	bl	8003338 <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b31      	cmp	r3, #49	; 0x31
 8001e88:	d909      	bls.n	8001e9e <keypad_filter+0x66>
		keypad->key_current_status = keypad->key_debounce_status;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		keypad->key_is_debouncing = 0;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		//return keypad->key_current_status;
	}

}
 8001e9e:	bf00      	nop
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
	...

08001ea8 <keypad_handler>:
//
//}
//void keypad_hold_callback(uint8_t key){
//
//}
void keypad_handler(keypad_name* keypad){
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
	keypad_filter(keypad); //key
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f7ff ffc1 	bl	8001e38 <keypad_filter>
	if(keypad->key_current_status != keypad->key_last_status){
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d020      	beq.n	8001f08 <keypad_handler+0x60>
		if(keypad->key_current_status != 0){ // button is switch  //key *
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d012      	beq.n	8001ef6 <keypad_handler+0x4e>
			keypad_is_press = 1;
 8001ed0:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <keypad_handler+0x68>)
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	701a      	strb	r2, [r3, #0]
			keypad->press_flag = 1;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
			keypad_start_pressing = HAL_GetTick();
 8001ede:	f001 fa2b 	bl	8003338 <HAL_GetTick>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	4a0b      	ldr	r2, [pc, #44]	; (8001f14 <keypad_handler+0x6c>)
 8001ee6:	6013      	str	r3, [r2, #0]
			//keypad_press_callback(keypad->key_current_status, keypad->keychar);
			//key_char = key_current_status;
			keypad->keychar = keypad->key_current_status; // 1
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ef4:	e002      	b.n	8001efc <keypad_handler+0x54>
		}
		else{
			keypad_is_press = 0;
 8001ef6:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <keypad_handler+0x68>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	701a      	strb	r2, [r3, #0]
			//keypad_release_callback(keypad->key_last_status, keypad->keychar);
			//keypad->keychar = keypad->key_last_status;
		}
		keypad->key_last_status = keypad->key_current_status;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
//	if(keypad_is_press && HAL_GetTick() - keypad_start_pressing > 2000){
//		//keypad_hold_callback(keypad->key_current_status, keypad->keychar);
//		keypad->keychar = keypad->key_current_status;
//		keypad_is_press = 0;
//	}
}
 8001f08:	bf00      	nop
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	2000019c 	.word	0x2000019c
 8001f14:	20000198 	.word	0x20000198

08001f18 <tm_spi_send>:

/* Private function prototypes ---------------------------------------- */

/* Function definitions ----------------------------------------------- */

uint8_t tm_spi_send(uint8_t data) {
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	71fb      	strb	r3, [r7, #7]
	uint8_t data_se[1], data_re[1];
	data_se[0] = data;
 8001f22:	79fb      	ldrb	r3, [r7, #7]
 8001f24:	733b      	strb	r3, [r7, #12]
	bsp_spi_transmit_receive(data_se, data_re, 1, 10);
 8001f26:	f107 0108 	add.w	r1, r7, #8
 8001f2a:	f107 000c 	add.w	r0, r7, #12
 8001f2e:	230a      	movs	r3, #10
 8001f30:	2201      	movs	r2, #1
 8001f32:	f7ff fc4b 	bl	80017cc <bsp_spi_transmit_receive>
	return data_re[0];
 8001f36:	7a3b      	ldrb	r3, [r7, #8]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <mfrc522_read_register>:
	}

	return size;
}

uint8_t mfrc522_read_register(uint8_t addr) {
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	//CS low
	MFRC522_CS_LOW;
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	2110      	movs	r1, #16
 8001f4e:	480f      	ldr	r0, [pc, #60]	; (8001f8c <mfrc522_read_register+0x4c>)
 8001f50:	f001 fe08 	bl	8003b64 <HAL_GPIO_WritePin>
	tm_spi_send(((addr << 1) & 0x7E) | 0x80);
 8001f54:	79fb      	ldrb	r3, [r7, #7]
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	b25b      	sxtb	r3, r3
 8001f5a:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8001f5e:	b25b      	sxtb	r3, r3
 8001f60:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f64:	b25b      	sxtb	r3, r3
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff ffd5 	bl	8001f18 <tm_spi_send>
	val = tm_spi_send(MFRC522_DUMMY);
 8001f6e:	2000      	movs	r0, #0
 8001f70:	f7ff ffd2 	bl	8001f18 <tm_spi_send>
 8001f74:	4603      	mov	r3, r0
 8001f76:	73fb      	strb	r3, [r7, #15]
	//CS high
	MFRC522_CS_HIGH;
 8001f78:	2201      	movs	r2, #1
 8001f7a:	2110      	movs	r1, #16
 8001f7c:	4803      	ldr	r0, [pc, #12]	; (8001f8c <mfrc522_read_register+0x4c>)
 8001f7e:	f001 fdf1 	bl	8003b64 <HAL_GPIO_WritePin>
	return val;
 8001f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3710      	adds	r7, #16
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40020000 	.word	0x40020000

08001f90 <mfrc522_init>:

void mfrc522_init(void) {
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
	mfrc522_reset();
 8001f94:	f000 f9dd 	bl	8002352 <mfrc522_reset>

	mfrc522_write_register(MFRC522_REG_T_MODE, 0x8D);
 8001f98:	218d      	movs	r1, #141	; 0x8d
 8001f9a:	202a      	movs	r0, #42	; 0x2a
 8001f9c:	f000 f966 	bl	800226c <mfrc522_write_register>
	mfrc522_write_register(MFRC522_REG_T_PRESCALER, 0x3E);
 8001fa0:	213e      	movs	r1, #62	; 0x3e
 8001fa2:	202b      	movs	r0, #43	; 0x2b
 8001fa4:	f000 f962 	bl	800226c <mfrc522_write_register>
	mfrc522_write_register(MFRC522_REG_T_RELOAD_L, 30);
 8001fa8:	211e      	movs	r1, #30
 8001faa:	202d      	movs	r0, #45	; 0x2d
 8001fac:	f000 f95e 	bl	800226c <mfrc522_write_register>
	mfrc522_write_register(MFRC522_REG_T_RELOAD_H, 0);
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	202c      	movs	r0, #44	; 0x2c
 8001fb4:	f000 f95a 	bl	800226c <mfrc522_write_register>

	/* 48dB gain */
	mfrc522_write_register(MFRC522_REG_RF_CFG, 0x70);
 8001fb8:	2170      	movs	r1, #112	; 0x70
 8001fba:	2026      	movs	r0, #38	; 0x26
 8001fbc:	f000 f956 	bl	800226c <mfrc522_write_register>

	mfrc522_write_register(MFRC522_REG_TX_AUTO, 0x40);
 8001fc0:	2140      	movs	r1, #64	; 0x40
 8001fc2:	2015      	movs	r0, #21
 8001fc4:	f000 f952 	bl	800226c <mfrc522_write_register>
	mfrc522_write_register(MFRC522_REG_MODE, 0x3D);
 8001fc8:	213d      	movs	r1, #61	; 0x3d
 8001fca:	2011      	movs	r0, #17
 8001fcc:	f000 f94e 	bl	800226c <mfrc522_write_register>

	mfrc522_antenna_on();	//Open the antenna
 8001fd0:	f000 f9aa 	bl	8002328 <mfrc522_antenna_on>
}
 8001fd4:	bf00      	nop
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <mfrc522_check>:

mfrc522_status_t mfrc522_check(uint8_t *id) {
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
	mfrc522_status_t status;
	//Find cards, return card type

	status = mfrc522_request(PICC_REQIDL, id);
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	2026      	movs	r0, #38	; 0x26
 8001fe4:	f000 f811 	bl	800200a <mfrc522_request>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 8001fec:	7bfb      	ldrb	r3, [r7, #15]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d104      	bne.n	8001ffc <mfrc522_check+0x24>
		//Card detected
		//Anti-collision, return card serial number 4 bytes
		status = mfrc522_anticoll(id);
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f000 f8fd 	bl	80021f2 <mfrc522_anticoll>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	73fb      	strb	r3, [r7, #15]
	}
	mfrc522_halt();			//Command card into hibernation
 8001ffc:	f000 f9fa 	bl	80023f4 <mfrc522_halt>
	return status;
 8002000:	7bfb      	ldrb	r3, [r7, #15]
}
 8002002:	4618      	mov	r0, r3
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}

0800200a <mfrc522_request>:
		}
	}
	return MI_OK;
}

mfrc522_status_t mfrc522_request(uint8_t request_mode, uint8_t *tag_type) {
 800200a:	b580      	push	{r7, lr}
 800200c:	b086      	sub	sp, #24
 800200e:	af02      	add	r7, sp, #8
 8002010:	4603      	mov	r3, r0
 8002012:	6039      	str	r1, [r7, #0]
 8002014:	71fb      	strb	r3, [r7, #7]
	mfrc522_status_t status;
	uint16_t backBits;			//The received data bits

	mfrc522_write_register(MFRC522_REG_BIT_FRAMING, 0x07);//TxLastBists = BitFramingReg[2..0]	???
 8002016:	2107      	movs	r1, #7
 8002018:	200d      	movs	r0, #13
 800201a:	f000 f927 	bl	800226c <mfrc522_write_register>

	tag_type[0] = request_mode;
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	79fa      	ldrb	r2, [r7, #7]
 8002022:	701a      	strb	r2, [r3, #0]
	status = mfrc522_to_card(PCD_TRANSCEIVE, tag_type, 1, tag_type, &backBits);
 8002024:	f107 030c 	add.w	r3, r7, #12
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	2201      	movs	r2, #1
 800202e:	6839      	ldr	r1, [r7, #0]
 8002030:	200c      	movs	r0, #12
 8002032:	f000 f80f 	bl	8002054 <mfrc522_to_card>
 8002036:	4603      	mov	r3, r0
 8002038:	73fb      	strb	r3, [r7, #15]
	if ((status != MI_OK) || (backBits != 0x10)) {
 800203a:	7bfb      	ldrb	r3, [r7, #15]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d102      	bne.n	8002046 <mfrc522_request+0x3c>
 8002040:	89bb      	ldrh	r3, [r7, #12]
 8002042:	2b10      	cmp	r3, #16
 8002044:	d001      	beq.n	800204a <mfrc522_request+0x40>
		status = MI_ERR;
 8002046:	2302      	movs	r3, #2
 8002048:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 800204a:	7bfb      	ldrb	r3, [r7, #15]
}
 800204c:	4618      	mov	r0, r3
 800204e:	3710      	adds	r7, #16
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <mfrc522_to_card>:

mfrc522_status_t mfrc522_to_card(uint8_t command, uint8_t *send_data,
		uint8_t send_len, uint8_t *back_data, uint16_t *back_len) {
 8002054:	b590      	push	{r4, r7, lr}
 8002056:	b087      	sub	sp, #28
 8002058:	af00      	add	r7, sp, #0
 800205a:	60b9      	str	r1, [r7, #8]
 800205c:	607b      	str	r3, [r7, #4]
 800205e:	4603      	mov	r3, r0
 8002060:	73fb      	strb	r3, [r7, #15]
 8002062:	4613      	mov	r3, r2
 8002064:	73bb      	strb	r3, [r7, #14]
	mfrc522_status_t status = MI_ERR;
 8002066:	2302      	movs	r3, #2
 8002068:	75fb      	strb	r3, [r7, #23]
	uint8_t irqEn = 0x00;
 800206a:	2300      	movs	r3, #0
 800206c:	75bb      	strb	r3, [r7, #22]
	uint8_t waitIRq = 0x00;
 800206e:	2300      	movs	r3, #0
 8002070:	757b      	strb	r3, [r7, #21]
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

	switch (command) {
 8002072:	7bfb      	ldrb	r3, [r7, #15]
 8002074:	2b0c      	cmp	r3, #12
 8002076:	d006      	beq.n	8002086 <mfrc522_to_card+0x32>
 8002078:	2b0e      	cmp	r3, #14
 800207a:	d109      	bne.n	8002090 <mfrc522_to_card+0x3c>
	case PCD_AUTHENT: {
		irqEn = 0x12;
 800207c:	2312      	movs	r3, #18
 800207e:	75bb      	strb	r3, [r7, #22]
		waitIRq = 0x10;
 8002080:	2310      	movs	r3, #16
 8002082:	757b      	strb	r3, [r7, #21]
		break;
 8002084:	e005      	b.n	8002092 <mfrc522_to_card+0x3e>
	}
	case PCD_TRANSCEIVE: {
		irqEn = 0x77;
 8002086:	2377      	movs	r3, #119	; 0x77
 8002088:	75bb      	strb	r3, [r7, #22]
		waitIRq = 0x30;
 800208a:	2330      	movs	r3, #48	; 0x30
 800208c:	757b      	strb	r3, [r7, #21]
		break;
 800208e:	e000      	b.n	8002092 <mfrc522_to_card+0x3e>
	}
	default:
		break;
 8002090:	bf00      	nop
	}

	mfrc522_write_register(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 8002092:	7dbb      	ldrb	r3, [r7, #22]
 8002094:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002098:	b2db      	uxtb	r3, r3
 800209a:	4619      	mov	r1, r3
 800209c:	2002      	movs	r0, #2
 800209e:	f000 f8e5 	bl	800226c <mfrc522_write_register>
	mfrc522_clear_bit_mask(MFRC522_REG_COMM_IRQ, 0x80);
 80020a2:	2180      	movs	r1, #128	; 0x80
 80020a4:	2004      	movs	r0, #4
 80020a6:	f000 f921 	bl	80022ec <mfrc522_clear_bit_mask>
	mfrc522_set_bit_mask(MFRC522_REG_FIFO_LEVEL, 0x80);
 80020aa:	2180      	movs	r1, #128	; 0x80
 80020ac:	200a      	movs	r0, #10
 80020ae:	f000 f903 	bl	80022b8 <mfrc522_set_bit_mask>

	mfrc522_write_register(MFRC522_REG_COMMAND, PCD_IDLE);
 80020b2:	2100      	movs	r1, #0
 80020b4:	2001      	movs	r0, #1
 80020b6:	f000 f8d9 	bl	800226c <mfrc522_write_register>

	//Writing data to the FIFO
	for (i = 0; i < send_len; i++) {
 80020ba:	2300      	movs	r3, #0
 80020bc:	827b      	strh	r3, [r7, #18]
 80020be:	e00a      	b.n	80020d6 <mfrc522_to_card+0x82>
		mfrc522_write_register(MFRC522_REG_FIFO_DATA, send_data[i]);
 80020c0:	8a7b      	ldrh	r3, [r7, #18]
 80020c2:	68ba      	ldr	r2, [r7, #8]
 80020c4:	4413      	add	r3, r2
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	4619      	mov	r1, r3
 80020ca:	2009      	movs	r0, #9
 80020cc:	f000 f8ce 	bl	800226c <mfrc522_write_register>
	for (i = 0; i < send_len; i++) {
 80020d0:	8a7b      	ldrh	r3, [r7, #18]
 80020d2:	3301      	adds	r3, #1
 80020d4:	827b      	strh	r3, [r7, #18]
 80020d6:	7bbb      	ldrb	r3, [r7, #14]
 80020d8:	b29b      	uxth	r3, r3
 80020da:	8a7a      	ldrh	r2, [r7, #18]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d3ef      	bcc.n	80020c0 <mfrc522_to_card+0x6c>
	}

	//Execute the command
	mfrc522_write_register(MFRC522_REG_COMMAND, command);
 80020e0:	7bfb      	ldrb	r3, [r7, #15]
 80020e2:	4619      	mov	r1, r3
 80020e4:	2001      	movs	r0, #1
 80020e6:	f000 f8c1 	bl	800226c <mfrc522_write_register>
	if (command == PCD_TRANSCEIVE) {
 80020ea:	7bfb      	ldrb	r3, [r7, #15]
 80020ec:	2b0c      	cmp	r3, #12
 80020ee:	d103      	bne.n	80020f8 <mfrc522_to_card+0xa4>
		mfrc522_set_bit_mask(MFRC522_REG_BIT_FRAMING, 0x80);//StartSend=1,transmission of data starts
 80020f0:	2180      	movs	r1, #128	; 0x80
 80020f2:	200d      	movs	r0, #13
 80020f4:	f000 f8e0 	bl	80022b8 <mfrc522_set_bit_mask>
	}

	//Waiting to receive data to complete
	i = 2000;//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
 80020f8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80020fc:	827b      	strh	r3, [r7, #18]
	do {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
		n = mfrc522_read_register(MFRC522_REG_COMM_IRQ);
 80020fe:	2004      	movs	r0, #4
 8002100:	f7ff ff1e 	bl	8001f40 <mfrc522_read_register>
 8002104:	4603      	mov	r3, r0
 8002106:	753b      	strb	r3, [r7, #20]
		i--;
 8002108:	8a7b      	ldrh	r3, [r7, #18]
 800210a:	3b01      	subs	r3, #1
 800210c:	827b      	strh	r3, [r7, #18]
	} while ((i != 0) && !(n & 0x01) && !(n & waitIRq));
 800210e:	8a7b      	ldrh	r3, [r7, #18]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d00a      	beq.n	800212a <mfrc522_to_card+0xd6>
 8002114:	7d3b      	ldrb	r3, [r7, #20]
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	2b00      	cmp	r3, #0
 800211c:	d105      	bne.n	800212a <mfrc522_to_card+0xd6>
 800211e:	7d3a      	ldrb	r2, [r7, #20]
 8002120:	7d7b      	ldrb	r3, [r7, #21]
 8002122:	4013      	ands	r3, r2
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	d0e9      	beq.n	80020fe <mfrc522_to_card+0xaa>

	mfrc522_clear_bit_mask(MFRC522_REG_BIT_FRAMING, 0x80);		//StartSend=0
 800212a:	2180      	movs	r1, #128	; 0x80
 800212c:	200d      	movs	r0, #13
 800212e:	f000 f8dd 	bl	80022ec <mfrc522_clear_bit_mask>

	if (i != 0) {
 8002132:	8a7b      	ldrh	r3, [r7, #18]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d057      	beq.n	80021e8 <mfrc522_to_card+0x194>
		if (!(mfrc522_read_register(MFRC522_REG_ERROR) & 0x1B)) {
 8002138:	2006      	movs	r0, #6
 800213a:	f7ff ff01 	bl	8001f40 <mfrc522_read_register>
 800213e:	4603      	mov	r3, r0
 8002140:	f003 031b 	and.w	r3, r3, #27
 8002144:	2b00      	cmp	r3, #0
 8002146:	d14d      	bne.n	80021e4 <mfrc522_to_card+0x190>
			status = MI_OK;
 8002148:	2300      	movs	r3, #0
 800214a:	75fb      	strb	r3, [r7, #23]
			if (n & irqEn & 0x01) {
 800214c:	7d3a      	ldrb	r2, [r7, #20]
 800214e:	7dbb      	ldrb	r3, [r7, #22]
 8002150:	4013      	ands	r3, r2
 8002152:	b2db      	uxtb	r3, r3
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <mfrc522_to_card+0x10c>
				status = MI_NOTAGERR;
 800215c:	2301      	movs	r3, #1
 800215e:	75fb      	strb	r3, [r7, #23]
			}

			if (command == PCD_TRANSCEIVE) {
 8002160:	7bfb      	ldrb	r3, [r7, #15]
 8002162:	2b0c      	cmp	r3, #12
 8002164:	d140      	bne.n	80021e8 <mfrc522_to_card+0x194>
				n = mfrc522_read_register(MFRC522_REG_FIFO_LEVEL);
 8002166:	200a      	movs	r0, #10
 8002168:	f7ff feea 	bl	8001f40 <mfrc522_read_register>
 800216c:	4603      	mov	r3, r0
 800216e:	753b      	strb	r3, [r7, #20]
				lastBits = mfrc522_read_register(MFRC522_REG_CONTROL) & 0x07;
 8002170:	200c      	movs	r0, #12
 8002172:	f7ff fee5 	bl	8001f40 <mfrc522_read_register>
 8002176:	4603      	mov	r3, r0
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	747b      	strb	r3, [r7, #17]
				if (lastBits) {
 800217e:	7c7b      	ldrb	r3, [r7, #17]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d00b      	beq.n	800219c <mfrc522_to_card+0x148>
					*back_len = (n - 1) * 8 + lastBits;
 8002184:	7d3b      	ldrb	r3, [r7, #20]
 8002186:	3b01      	subs	r3, #1
 8002188:	b29b      	uxth	r3, r3
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	b29a      	uxth	r2, r3
 800218e:	7c7b      	ldrb	r3, [r7, #17]
 8002190:	b29b      	uxth	r3, r3
 8002192:	4413      	add	r3, r2
 8002194:	b29a      	uxth	r2, r3
 8002196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002198:	801a      	strh	r2, [r3, #0]
 800219a:	e005      	b.n	80021a8 <mfrc522_to_card+0x154>
				} else {
					*back_len = n * 8;
 800219c:	7d3b      	ldrb	r3, [r7, #20]
 800219e:	b29b      	uxth	r3, r3
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021a6:	801a      	strh	r2, [r3, #0]
				}

				if (n == 0) {
 80021a8:	7d3b      	ldrb	r3, [r7, #20]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <mfrc522_to_card+0x15e>
					n = 1;
 80021ae:	2301      	movs	r3, #1
 80021b0:	753b      	strb	r3, [r7, #20]
				}
				if (n > MFRC522_MAX_LEN) {
 80021b2:	7d3b      	ldrb	r3, [r7, #20]
 80021b4:	2b10      	cmp	r3, #16
 80021b6:	d901      	bls.n	80021bc <mfrc522_to_card+0x168>
					n = MFRC522_MAX_LEN;
 80021b8:	2310      	movs	r3, #16
 80021ba:	753b      	strb	r3, [r7, #20]
				}

				//Reading the received data in FIFO
				for (i = 0; i < n; i++) {
 80021bc:	2300      	movs	r3, #0
 80021be:	827b      	strh	r3, [r7, #18]
 80021c0:	e00a      	b.n	80021d8 <mfrc522_to_card+0x184>
					back_data[i] = mfrc522_read_register(MFRC522_REG_FIFO_DATA);
 80021c2:	8a7b      	ldrh	r3, [r7, #18]
 80021c4:	687a      	ldr	r2, [r7, #4]
 80021c6:	18d4      	adds	r4, r2, r3
 80021c8:	2009      	movs	r0, #9
 80021ca:	f7ff feb9 	bl	8001f40 <mfrc522_read_register>
 80021ce:	4603      	mov	r3, r0
 80021d0:	7023      	strb	r3, [r4, #0]
				for (i = 0; i < n; i++) {
 80021d2:	8a7b      	ldrh	r3, [r7, #18]
 80021d4:	3301      	adds	r3, #1
 80021d6:	827b      	strh	r3, [r7, #18]
 80021d8:	7d3b      	ldrb	r3, [r7, #20]
 80021da:	b29b      	uxth	r3, r3
 80021dc:	8a7a      	ldrh	r2, [r7, #18]
 80021de:	429a      	cmp	r2, r3
 80021e0:	d3ef      	bcc.n	80021c2 <mfrc522_to_card+0x16e>
 80021e2:	e001      	b.n	80021e8 <mfrc522_to_card+0x194>
				}
			}
		} else {
			status = MI_ERR;
 80021e4:	2302      	movs	r3, #2
 80021e6:	75fb      	strb	r3, [r7, #23]
		}
	}

	return status;
 80021e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	371c      	adds	r7, #28
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd90      	pop	{r4, r7, pc}

080021f2 <mfrc522_anticoll>:

mfrc522_status_t mfrc522_anticoll(uint8_t *ser_num) {
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b086      	sub	sp, #24
 80021f6:	af02      	add	r7, sp, #8
 80021f8:	6078      	str	r0, [r7, #4]
	mfrc522_status_t status;
	uint8_t i;
	uint8_t ser_numCheck = 0;
 80021fa:	2300      	movs	r3, #0
 80021fc:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;

	mfrc522_write_register(MFRC522_REG_BIT_FRAMING, 0x00);//TxLastBists = BitFramingReg[2..0]
 80021fe:	2100      	movs	r1, #0
 8002200:	200d      	movs	r0, #13
 8002202:	f000 f833 	bl	800226c <mfrc522_write_register>

	ser_num[0] = PICC_ANTICOLL;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2293      	movs	r2, #147	; 0x93
 800220a:	701a      	strb	r2, [r3, #0]
	ser_num[1] = 0x20;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	3301      	adds	r3, #1
 8002210:	2220      	movs	r2, #32
 8002212:	701a      	strb	r2, [r3, #0]
	status = mfrc522_to_card(PCD_TRANSCEIVE, ser_num, 2, ser_num, &unLen);
 8002214:	f107 030a 	add.w	r3, r7, #10
 8002218:	9300      	str	r3, [sp, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2202      	movs	r2, #2
 800221e:	6879      	ldr	r1, [r7, #4]
 8002220:	200c      	movs	r0, #12
 8002222:	f7ff ff17 	bl	8002054 <mfrc522_to_card>
 8002226:	4603      	mov	r3, r0
 8002228:	73fb      	strb	r3, [r7, #15]

	if (status == MI_OK) {
 800222a:	7bfb      	ldrb	r3, [r7, #15]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d118      	bne.n	8002262 <mfrc522_anticoll+0x70>
		//Check card serial number
		for (i = 0; i < 4; i++) {
 8002230:	2300      	movs	r3, #0
 8002232:	73bb      	strb	r3, [r7, #14]
 8002234:	e009      	b.n	800224a <mfrc522_anticoll+0x58>
			ser_numCheck ^= ser_num[i];
 8002236:	7bbb      	ldrb	r3, [r7, #14]
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	4413      	add	r3, r2
 800223c:	781a      	ldrb	r2, [r3, #0]
 800223e:	7b7b      	ldrb	r3, [r7, #13]
 8002240:	4053      	eors	r3, r2
 8002242:	737b      	strb	r3, [r7, #13]
		for (i = 0; i < 4; i++) {
 8002244:	7bbb      	ldrb	r3, [r7, #14]
 8002246:	3301      	adds	r3, #1
 8002248:	73bb      	strb	r3, [r7, #14]
 800224a:	7bbb      	ldrb	r3, [r7, #14]
 800224c:	2b03      	cmp	r3, #3
 800224e:	d9f2      	bls.n	8002236 <mfrc522_anticoll+0x44>
		}
		if (ser_numCheck != ser_num[i]) {
 8002250:	7bbb      	ldrb	r3, [r7, #14]
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	4413      	add	r3, r2
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	7b7a      	ldrb	r2, [r7, #13]
 800225a:	429a      	cmp	r2, r3
 800225c:	d001      	beq.n	8002262 <mfrc522_anticoll+0x70>
			status = MI_ERR;
 800225e:	2302      	movs	r3, #2
 8002260:	73fb      	strb	r3, [r7, #15]
		}
	}
	return status;
 8002262:	7bfb      	ldrb	r3, [r7, #15]
}
 8002264:	4618      	mov	r0, r3
 8002266:	3710      	adds	r7, #16
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <mfrc522_write_register>:
	}

	return status;
}

void mfrc522_write_register(uint8_t addr, uint8_t val) {
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	460a      	mov	r2, r1
 8002276:	71fb      	strb	r3, [r7, #7]
 8002278:	4613      	mov	r3, r2
 800227a:	71bb      	strb	r3, [r7, #6]
	//CS low
	MFRC522_CS_LOW;
 800227c:	2200      	movs	r2, #0
 800227e:	2110      	movs	r1, #16
 8002280:	480c      	ldr	r0, [pc, #48]	; (80022b4 <mfrc522_write_register+0x48>)
 8002282:	f001 fc6f 	bl	8003b64 <HAL_GPIO_WritePin>
	//Send address
	tm_spi_send((addr << 1) & 0x7E);
 8002286:	79fb      	ldrb	r3, [r7, #7]
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	b2db      	uxtb	r3, r3
 800228c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8002290:	b2db      	uxtb	r3, r3
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff fe40 	bl	8001f18 <tm_spi_send>
	//Send data
	tm_spi_send(val);
 8002298:	79bb      	ldrb	r3, [r7, #6]
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff fe3c 	bl	8001f18 <tm_spi_send>
	//CS high
	MFRC522_CS_HIGH;
 80022a0:	2201      	movs	r2, #1
 80022a2:	2110      	movs	r1, #16
 80022a4:	4803      	ldr	r0, [pc, #12]	; (80022b4 <mfrc522_write_register+0x48>)
 80022a6:	f001 fc5d 	bl	8003b64 <HAL_GPIO_WritePin>
}
 80022aa:	bf00      	nop
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	40020000 	.word	0x40020000

080022b8 <mfrc522_set_bit_mask>:

void mfrc522_set_bit_mask(uint8_t reg, uint8_t mask) {
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	4603      	mov	r3, r0
 80022c0:	460a      	mov	r2, r1
 80022c2:	71fb      	strb	r3, [r7, #7]
 80022c4:	4613      	mov	r3, r2
 80022c6:	71bb      	strb	r3, [r7, #6]
	mfrc522_write_register(reg, mfrc522_read_register(reg) | mask);
 80022c8:	79fb      	ldrb	r3, [r7, #7]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7ff fe38 	bl	8001f40 <mfrc522_read_register>
 80022d0:	4603      	mov	r3, r0
 80022d2:	461a      	mov	r2, r3
 80022d4:	79bb      	ldrb	r3, [r7, #6]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	b2da      	uxtb	r2, r3
 80022da:	79fb      	ldrb	r3, [r7, #7]
 80022dc:	4611      	mov	r1, r2
 80022de:	4618      	mov	r0, r3
 80022e0:	f7ff ffc4 	bl	800226c <mfrc522_write_register>
}
 80022e4:	bf00      	nop
 80022e6:	3708      	adds	r7, #8
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}

080022ec <mfrc522_clear_bit_mask>:

void mfrc522_clear_bit_mask(uint8_t reg, uint8_t mask) {
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	4603      	mov	r3, r0
 80022f4:	460a      	mov	r2, r1
 80022f6:	71fb      	strb	r3, [r7, #7]
 80022f8:	4613      	mov	r3, r2
 80022fa:	71bb      	strb	r3, [r7, #6]
	mfrc522_write_register(reg, mfrc522_read_register(reg) & (~mask));
 80022fc:	79fb      	ldrb	r3, [r7, #7]
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff fe1e 	bl	8001f40 <mfrc522_read_register>
 8002304:	4603      	mov	r3, r0
 8002306:	b25a      	sxtb	r2, r3
 8002308:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800230c:	43db      	mvns	r3, r3
 800230e:	b25b      	sxtb	r3, r3
 8002310:	4013      	ands	r3, r2
 8002312:	b25b      	sxtb	r3, r3
 8002314:	b2da      	uxtb	r2, r3
 8002316:	79fb      	ldrb	r3, [r7, #7]
 8002318:	4611      	mov	r1, r2
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff ffa6 	bl	800226c <mfrc522_write_register>
}
 8002320:	bf00      	nop
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <mfrc522_antenna_on>:

void mfrc522_antenna_on(void) {
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
	uint8_t temp;

	temp = mfrc522_read_register(MFRC522_REG_TX_CONTROL);
 800232e:	2014      	movs	r0, #20
 8002330:	f7ff fe06 	bl	8001f40 <mfrc522_read_register>
 8002334:	4603      	mov	r3, r0
 8002336:	71fb      	strb	r3, [r7, #7]
	if (!(temp & 0x03)) {
 8002338:	79fb      	ldrb	r3, [r7, #7]
 800233a:	f003 0303 	and.w	r3, r3, #3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d103      	bne.n	800234a <mfrc522_antenna_on+0x22>
		mfrc522_set_bit_mask(MFRC522_REG_TX_CONTROL, 0x03);
 8002342:	2103      	movs	r1, #3
 8002344:	2014      	movs	r0, #20
 8002346:	f7ff ffb7 	bl	80022b8 <mfrc522_set_bit_mask>
	}
}
 800234a:	bf00      	nop
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <mfrc522_reset>:

void mfrc522_antenna_off(void) {
	mfrc522_clear_bit_mask(MFRC522_REG_TX_CONTROL, 0x03);
}

void mfrc522_reset(void) {
 8002352:	b580      	push	{r7, lr}
 8002354:	af00      	add	r7, sp, #0
	mfrc522_write_register(MFRC522_REG_COMMAND, PCD_RESETPHASE);
 8002356:	210f      	movs	r1, #15
 8002358:	2001      	movs	r0, #1
 800235a:	f7ff ff87 	bl	800226c <mfrc522_write_register>
}
 800235e:	bf00      	nop
 8002360:	bd80      	pop	{r7, pc}

08002362 <mfrc522_calculate_crc>:

void mfrc522_calculate_crc(uint8_t *picc_in_data, uint8_t len,
		uint8_t *picc_out_data) {
 8002362:	b590      	push	{r4, r7, lr}
 8002364:	b087      	sub	sp, #28
 8002366:	af00      	add	r7, sp, #0
 8002368:	60f8      	str	r0, [r7, #12]
 800236a:	460b      	mov	r3, r1
 800236c:	607a      	str	r2, [r7, #4]
 800236e:	72fb      	strb	r3, [r7, #11]
	uint8_t i, n;

	mfrc522_clear_bit_mask(MFRC522_REG_DIV_IRQ, 0x04);			//CRCIrq = 0
 8002370:	2104      	movs	r1, #4
 8002372:	2005      	movs	r0, #5
 8002374:	f7ff ffba 	bl	80022ec <mfrc522_clear_bit_mask>
	mfrc522_set_bit_mask(MFRC522_REG_FIFO_LEVEL, 0x80);	//Clear the FIFO pointer
 8002378:	2180      	movs	r1, #128	; 0x80
 800237a:	200a      	movs	r0, #10
 800237c:	f7ff ff9c 	bl	80022b8 <mfrc522_set_bit_mask>
	//Write_MFRC522(CommandReg, PCD_IDLE);

	//Writing data to the FIFO
	for (i = 0; i < len; i++) {
 8002380:	2300      	movs	r3, #0
 8002382:	75fb      	strb	r3, [r7, #23]
 8002384:	e00a      	b.n	800239c <mfrc522_calculate_crc+0x3a>
		mfrc522_write_register(MFRC522_REG_FIFO_DATA, *(picc_in_data + i));
 8002386:	7dfb      	ldrb	r3, [r7, #23]
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	4413      	add	r3, r2
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	4619      	mov	r1, r3
 8002390:	2009      	movs	r0, #9
 8002392:	f7ff ff6b 	bl	800226c <mfrc522_write_register>
	for (i = 0; i < len; i++) {
 8002396:	7dfb      	ldrb	r3, [r7, #23]
 8002398:	3301      	adds	r3, #1
 800239a:	75fb      	strb	r3, [r7, #23]
 800239c:	7dfa      	ldrb	r2, [r7, #23]
 800239e:	7afb      	ldrb	r3, [r7, #11]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d3f0      	bcc.n	8002386 <mfrc522_calculate_crc+0x24>
	}
	mfrc522_write_register(MFRC522_REG_COMMAND, PCD_CALCCRC);
 80023a4:	2103      	movs	r1, #3
 80023a6:	2001      	movs	r0, #1
 80023a8:	f7ff ff60 	bl	800226c <mfrc522_write_register>

	//Wait CRC calculation is complete
	i = 0xFF;
 80023ac:	23ff      	movs	r3, #255	; 0xff
 80023ae:	75fb      	strb	r3, [r7, #23]
	do {
		n = mfrc522_read_register(MFRC522_REG_DIV_IRQ);
 80023b0:	2005      	movs	r0, #5
 80023b2:	f7ff fdc5 	bl	8001f40 <mfrc522_read_register>
 80023b6:	4603      	mov	r3, r0
 80023b8:	75bb      	strb	r3, [r7, #22]
		i--;
 80023ba:	7dfb      	ldrb	r3, [r7, #23]
 80023bc:	3b01      	subs	r3, #1
 80023be:	75fb      	strb	r3, [r7, #23]
	} while ((i != 0) && !(n & 0x04));			//CRCIrq = 1
 80023c0:	7dfb      	ldrb	r3, [r7, #23]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d004      	beq.n	80023d0 <mfrc522_calculate_crc+0x6e>
 80023c6:	7dbb      	ldrb	r3, [r7, #22]
 80023c8:	f003 0304 	and.w	r3, r3, #4
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d0ef      	beq.n	80023b0 <mfrc522_calculate_crc+0x4e>

	//Read CRC calculation result
	picc_out_data[0] = mfrc522_read_register(MFRC522_REG_CRC_RESULT_L);
 80023d0:	2022      	movs	r0, #34	; 0x22
 80023d2:	f7ff fdb5 	bl	8001f40 <mfrc522_read_register>
 80023d6:	4603      	mov	r3, r0
 80023d8:	461a      	mov	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	701a      	strb	r2, [r3, #0]
	picc_out_data[1] = mfrc522_read_register(MFRC522_REG_CRC_RESULT_M);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	1c5c      	adds	r4, r3, #1
 80023e2:	2021      	movs	r0, #33	; 0x21
 80023e4:	f7ff fdac 	bl	8001f40 <mfrc522_read_register>
 80023e8:	4603      	mov	r3, r0
 80023ea:	7023      	strb	r3, [r4, #0]
}
 80023ec:	bf00      	nop
 80023ee:	371c      	adds	r7, #28
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd90      	pop	{r4, r7, pc}

080023f4 <mfrc522_halt>:

void mfrc522_halt(void) {
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af02      	add	r7, sp, #8
	uint16_t unLen;
	uint8_t buff[4];

	buff[0] = PICC_HALT;
 80023fa:	2350      	movs	r3, #80	; 0x50
 80023fc:	703b      	strb	r3, [r7, #0]
	buff[1] = 0;
 80023fe:	2300      	movs	r3, #0
 8002400:	707b      	strb	r3, [r7, #1]
	mfrc522_calculate_crc(buff, 2, &buff[2]);
 8002402:	463b      	mov	r3, r7
 8002404:	1c9a      	adds	r2, r3, #2
 8002406:	463b      	mov	r3, r7
 8002408:	2102      	movs	r1, #2
 800240a:	4618      	mov	r0, r3
 800240c:	f7ff ffa9 	bl	8002362 <mfrc522_calculate_crc>
	mfrc522_to_card(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 8002410:	463a      	mov	r2, r7
 8002412:	4639      	mov	r1, r7
 8002414:	1dbb      	adds	r3, r7, #6
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	4613      	mov	r3, r2
 800241a:	2204      	movs	r2, #4
 800241c:	200c      	movs	r0, #12
 800241e:	f7ff fe19 	bl	8002054 <mfrc522_to_card>
}
 8002422:	bf00      	nop
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
	...

0800242c <uart_init>:
/* Public variables --------------------------------------------------- */
/* Private variables -------------------------------------------------- */
/* Private function prototypes ---------------------------------------- */
/* Function definitions ----------------------------------------------- */
void uart_init(UART_HandleTypeDef *huart)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
	_pc_huart = huart;
 8002434:	4a04      	ldr	r2, [pc, #16]	; (8002448 <uart_init+0x1c>)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6013      	str	r3, [r2, #0]
}
 800243a:	bf00      	nop
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	20000190 	.word	0x20000190

0800244c <uart_transmit>:

bool uart_transmit(const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b084      	sub	sp, #16
 8002450:	af00      	add	r7, sp, #0
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	460b      	mov	r3, r1
 8002456:	607a      	str	r2, [r7, #4]
 8002458:	817b      	strh	r3, [r7, #10]
	return bsp_uart_transmit(_pc_huart, pData, Size, Timeout);
 800245a:	4b06      	ldr	r3, [pc, #24]	; (8002474 <uart_transmit+0x28>)
 800245c:	6818      	ldr	r0, [r3, #0]
 800245e:	897a      	ldrh	r2, [r7, #10]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68f9      	ldr	r1, [r7, #12]
 8002464:	f7ff f9e4 	bl	8001830 <bsp_uart_transmit>
 8002468:	4603      	mov	r3, r0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	20000190 	.word	0x20000190

08002478 <uart_receive_it>:

bool uart_receive_it(uint8_t *pData, uint16_t Size)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	460b      	mov	r3, r1
 8002482:	807b      	strh	r3, [r7, #2]
	return bsp_uart_receive_it(_pc_huart, pData, Size);
 8002484:	4b05      	ldr	r3, [pc, #20]	; (800249c <uart_receive_it+0x24>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	887a      	ldrh	r2, [r7, #2]
 800248a:	6879      	ldr	r1, [r7, #4]
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff f9e7 	bl	8001860 <bsp_uart_receive_it>
 8002492:	4603      	mov	r3, r0
}
 8002494:	4618      	mov	r0, r3
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	20000190 	.word	0x20000190

080024a0 <flash_write_array>:
	bsp_flash_program(FLASH_TYPEPROGRAM_WORD, address, *(uint32_t*)data);
	bsp_flash_lock();
}

void flash_write_array(uint32_t address, uint8_t *arr, uint16_t len)
{
 80024a0:	b5b0      	push	{r4, r5, r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	4613      	mov	r3, r2
 80024ac:	80fb      	strh	r3, [r7, #6]
	bsp_flash_unlock();
 80024ae:	f7fe ffbf 	bl	8001430 <bsp_flash_unlock>
	uint16_t *pt = (uint16_t*)arr;
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < (len + 1)/2; i++)
 80024b6:	2300      	movs	r3, #0
 80024b8:	827b      	strh	r3, [r7, #18]
 80024ba:	e015      	b.n	80024e8 <flash_write_array+0x48>
	{
		bsp_flash_program(FLASH_TYPEPROGRAM_HALFWORD, address + 2*i, *pt);
 80024bc:	8a7b      	ldrh	r3, [r7, #18]
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	461a      	mov	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	18d1      	adds	r1, r2, r3
 80024c6:	697b      	ldr	r3, [r7, #20]
 80024c8:	881b      	ldrh	r3, [r3, #0]
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	2200      	movs	r2, #0
 80024ce:	461c      	mov	r4, r3
 80024d0:	4615      	mov	r5, r2
 80024d2:	4622      	mov	r2, r4
 80024d4:	462b      	mov	r3, r5
 80024d6:	2001      	movs	r0, #1
 80024d8:	f7fe ffdc 	bl	8001494 <bsp_flash_program>
		pt++;
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	3302      	adds	r3, #2
 80024e0:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < (len + 1)/2; i++)
 80024e2:	8a7b      	ldrh	r3, [r7, #18]
 80024e4:	3301      	adds	r3, #1
 80024e6:	827b      	strh	r3, [r7, #18]
 80024e8:	8a7a      	ldrh	r2, [r7, #18]
 80024ea:	88fb      	ldrh	r3, [r7, #6]
 80024ec:	3301      	adds	r3, #1
 80024ee:	0fd9      	lsrs	r1, r3, #31
 80024f0:	440b      	add	r3, r1
 80024f2:	105b      	asrs	r3, r3, #1
 80024f4:	429a      	cmp	r2, r3
 80024f6:	dbe1      	blt.n	80024bc <flash_write_array+0x1c>
	}
	bsp_flash_lock();
 80024f8:	f7fe ffbc 	bl	8001474 <bsp_flash_lock>
}
 80024fc:	bf00      	nop
 80024fe:	3718      	adds	r7, #24
 8002500:	46bd      	mov	sp, r7
 8002502:	bdb0      	pop	{r4, r5, r7, pc}

08002504 <flash_read_array>:

void flash_read_array(uint32_t address, uint8_t *arr, uint16_t len)
{
 8002504:	b480      	push	{r7}
 8002506:	b087      	sub	sp, #28
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	4613      	mov	r3, r2
 8002510:	80fb      	strh	r3, [r7, #6]
	uint16_t *pt = (uint16_t*)arr;
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < (len + 1)/2; i++)
 8002516:	2300      	movs	r3, #0
 8002518:	827b      	strh	r3, [r7, #18]
 800251a:	e00e      	b.n	800253a <flash_read_array+0x36>
	{
		*pt = *(__IO uint16_t *)(address + 2*i);
 800251c:	8a7b      	ldrh	r3, [r7, #18]
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	461a      	mov	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	4413      	add	r3, r2
 8002526:	881b      	ldrh	r3, [r3, #0]
 8002528:	b29a      	uxth	r2, r3
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	801a      	strh	r2, [r3, #0]
		pt++;
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	3302      	adds	r3, #2
 8002532:	617b      	str	r3, [r7, #20]
	for(uint16_t i = 0; i < (len + 1)/2; i++)
 8002534:	8a7b      	ldrh	r3, [r7, #18]
 8002536:	3301      	adds	r3, #1
 8002538:	827b      	strh	r3, [r7, #18]
 800253a:	8a7a      	ldrh	r2, [r7, #18]
 800253c:	88fb      	ldrh	r3, [r7, #6]
 800253e:	3301      	adds	r3, #1
 8002540:	0fd9      	lsrs	r1, r3, #31
 8002542:	440b      	add	r3, r1
 8002544:	105b      	asrs	r3, r3, #1
 8002546:	429a      	cmp	r2, r3
 8002548:	dbe8      	blt.n	800251c <flash_read_array+0x18>
	}
}
 800254a:	bf00      	nop
 800254c:	bf00      	nop
 800254e:	371c      	adds	r7, #28
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <flash_write_2d_array>:

void flash_write_2d_array(uint32_t address, uint8_t arr[][MAX_COLS], uint16_t rows, uint16_t cols)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	4611      	mov	r1, r2
 8002564:	461a      	mov	r2, r3
 8002566:	460b      	mov	r3, r1
 8002568:	80fb      	strh	r3, [r7, #6]
 800256a:	4613      	mov	r3, r2
 800256c:	80bb      	strh	r3, [r7, #4]
    for (uint16_t i = 0; i < rows; i++) {
 800256e:	2300      	movs	r3, #0
 8002570:	82fb      	strh	r3, [r7, #22]
 8002572:	e017      	b.n	80025a4 <flash_write_2d_array+0x4c>
        uint32_t row_address = address + i * cols;
 8002574:	8afb      	ldrh	r3, [r7, #22]
 8002576:	88ba      	ldrh	r2, [r7, #4]
 8002578:	fb02 f303 	mul.w	r3, r2, r3
 800257c:	461a      	mov	r2, r3
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	4413      	add	r3, r2
 8002582:	613b      	str	r3, [r7, #16]
        flash_write_array(row_address, arr[i], cols);
 8002584:	8afa      	ldrh	r2, [r7, #22]
 8002586:	4613      	mov	r3, r2
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	4413      	add	r3, r2
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	461a      	mov	r2, r3
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	4413      	add	r3, r2
 8002594:	88ba      	ldrh	r2, [r7, #4]
 8002596:	4619      	mov	r1, r3
 8002598:	6938      	ldr	r0, [r7, #16]
 800259a:	f7ff ff81 	bl	80024a0 <flash_write_array>
    for (uint16_t i = 0; i < rows; i++) {
 800259e:	8afb      	ldrh	r3, [r7, #22]
 80025a0:	3301      	adds	r3, #1
 80025a2:	82fb      	strh	r3, [r7, #22]
 80025a4:	8afa      	ldrh	r2, [r7, #22]
 80025a6:	88fb      	ldrh	r3, [r7, #6]
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d3e3      	bcc.n	8002574 <flash_write_2d_array+0x1c>
    }
}
 80025ac:	bf00      	nop
 80025ae:	bf00      	nop
 80025b0:	3718      	adds	r7, #24
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <flash_read_2d_array>:

void flash_read_2d_array(uint32_t address, uint8_t arr[][MAX_COLS], uint16_t rows, uint16_t cols)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b086      	sub	sp, #24
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	60f8      	str	r0, [r7, #12]
 80025be:	60b9      	str	r1, [r7, #8]
 80025c0:	4611      	mov	r1, r2
 80025c2:	461a      	mov	r2, r3
 80025c4:	460b      	mov	r3, r1
 80025c6:	80fb      	strh	r3, [r7, #6]
 80025c8:	4613      	mov	r3, r2
 80025ca:	80bb      	strh	r3, [r7, #4]
    for (uint16_t i = 0; i < rows; i++) {
 80025cc:	2300      	movs	r3, #0
 80025ce:	82fb      	strh	r3, [r7, #22]
 80025d0:	e017      	b.n	8002602 <flash_read_2d_array+0x4c>
        uint32_t row_address = address + i * cols;
 80025d2:	8afb      	ldrh	r3, [r7, #22]
 80025d4:	88ba      	ldrh	r2, [r7, #4]
 80025d6:	fb02 f303 	mul.w	r3, r2, r3
 80025da:	461a      	mov	r2, r3
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	4413      	add	r3, r2
 80025e0:	613b      	str	r3, [r7, #16]
        flash_read_array(row_address, arr[i], cols);
 80025e2:	8afa      	ldrh	r2, [r7, #22]
 80025e4:	4613      	mov	r3, r2
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	4413      	add	r3, r2
 80025ea:	005b      	lsls	r3, r3, #1
 80025ec:	461a      	mov	r2, r3
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	4413      	add	r3, r2
 80025f2:	88ba      	ldrh	r2, [r7, #4]
 80025f4:	4619      	mov	r1, r3
 80025f6:	6938      	ldr	r0, [r7, #16]
 80025f8:	f7ff ff84 	bl	8002504 <flash_read_array>
    for (uint16_t i = 0; i < rows; i++) {
 80025fc:	8afb      	ldrh	r3, [r7, #22]
 80025fe:	3301      	adds	r3, #1
 8002600:	82fb      	strh	r3, [r7, #22]
 8002602:	8afa      	ldrh	r2, [r7, #22]
 8002604:	88fb      	ldrh	r3, [r7, #6]
 8002606:	429a      	cmp	r2, r3
 8002608:	d3e3      	bcc.n	80025d2 <flash_read_2d_array+0x1c>
    }
}
 800260a:	bf00      	nop
 800260c:	bf00      	nop
 800260e:	3718      	adds	r7, #24
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b08c      	sub	sp, #48	; 0x30
 8002618:	af0c      	add	r7, sp, #48	; 0x30
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800261a:	f000 fe27 	bl	800326c <HAL_Init>
	/* USER CODE BEGIN Init */
	//
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800261e:	f000 f9cf 	bl	80029c0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */
	//
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002622:	f000 fb35 	bl	8002c90 <MX_GPIO_Init>
	MX_TIM3_Init();
 8002626:	f000 fabb 	bl	8002ba0 <MX_TIM3_Init>
	MX_I2C1_Init();
 800262a:	f000 fa27 	bl	8002a7c <MX_I2C1_Init>
	MX_I2C3_Init();
 800262e:	f000 fa53 	bl	8002ad8 <MX_I2C3_Init>
	MX_SPI1_Init();
 8002632:	f000 fa7f 	bl	8002b34 <MX_SPI1_Init>
	MX_USART6_UART_Init();
 8002636:	f000 fb01 	bl	8002c3c <MX_USART6_UART_Init>
	/* USER CODE BEGIN 2 */

	flash_load();
 800263a:	f7fd ffa7 	bl	800058c <flash_load>
	flash_load_password();
 800263e:	f7fe f8cb 	bl	80007d8 <flash_load_password>
	bspGetSPI(&hspi1);
 8002642:	48b7      	ldr	r0, [pc, #732]	; (8002920 <main+0x30c>)
 8002644:	f7ff f8ac 	bl	80017a0 <bspGetSPI>
	mfrc522_init();
 8002648:	f7ff fca2 	bl	8001f90 <mfrc522_init>
	lcd_init(&hi2c3);
 800264c:	48b5      	ldr	r0, [pc, #724]	; (8002924 <main+0x310>)
 800264e:	f7ff fac5 	bl	8001bdc <lcd_init>
	ds1307_init(&hi2c1);
 8002652:	48b5      	ldr	r0, [pc, #724]	; (8002928 <main+0x314>)
 8002654:	f7ff f926 	bl	80018a4 <ds1307_init>
	//ds1307_set_date_time (3, 27, 14, 6, 8, 9, 2023);
	HAL_TIM_Base_Start_IT(&htim3);
 8002658:	48b4      	ldr	r0, [pc, #720]	; (800292c <main+0x318>)
 800265a:	f003 fa11 	bl	8005a80 <HAL_TIM_Base_Start_IT>
	uart_init(&huart6);
 800265e:	48b4      	ldr	r0, [pc, #720]	; (8002930 <main+0x31c>)
 8002660:	f7ff fee4 	bl	800242c <uart_init>
	uart_receive_it(uart, 1);
 8002664:	2101      	movs	r1, #1
 8002666:	48b3      	ldr	r0, [pc, #716]	; (8002934 <main+0x320>)
 8002668:	f7ff ff06 	bl	8002478 <uart_receive_it>

	//keypad_name keypad;
	api_keypad_init(&keypad, GPIOB, GPIO_PIN_10, GPIOB, GPIO_PIN_4,
 800266c:	2308      	movs	r3, #8
 800266e:	930a      	str	r3, [sp, #40]	; 0x28
 8002670:	4bb1      	ldr	r3, [pc, #708]	; (8002938 <main+0x324>)
 8002672:	9309      	str	r3, [sp, #36]	; 0x24
 8002674:	2304      	movs	r3, #4
 8002676:	9308      	str	r3, [sp, #32]
 8002678:	4baf      	ldr	r3, [pc, #700]	; (8002938 <main+0x324>)
 800267a:	9307      	str	r3, [sp, #28]
 800267c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002680:	9306      	str	r3, [sp, #24]
 8002682:	4bad      	ldr	r3, [pc, #692]	; (8002938 <main+0x324>)
 8002684:	9305      	str	r3, [sp, #20]
 8002686:	2308      	movs	r3, #8
 8002688:	9304      	str	r3, [sp, #16]
 800268a:	4bac      	ldr	r3, [pc, #688]	; (800293c <main+0x328>)
 800268c:	9303      	str	r3, [sp, #12]
 800268e:	2320      	movs	r3, #32
 8002690:	9302      	str	r3, [sp, #8]
 8002692:	4baa      	ldr	r3, [pc, #680]	; (800293c <main+0x328>)
 8002694:	9301      	str	r3, [sp, #4]
 8002696:	2310      	movs	r3, #16
 8002698:	9300      	str	r3, [sp, #0]
 800269a:	4ba8      	ldr	r3, [pc, #672]	; (800293c <main+0x328>)
 800269c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026a0:	49a6      	ldr	r1, [pc, #664]	; (800293c <main+0x328>)
 80026a2:	48a7      	ldr	r0, [pc, #668]	; (8002940 <main+0x32c>)
 80026a4:	f7fe fa8d 	bl	8000bc2 <api_keypad_init>
			GPIOB,	GPIO_PIN_5, GPIOB, GPIO_PIN_3,
			GPIOA, GPIO_PIN_10, GPIOA, GPIO_PIN_2,
			GPIOA, GPIO_PIN_3);

	handle_state_master_card();
 80026a8:	f7fe fc5a 	bl	8000f60 <handle_state_master_card>
	time_delay(1000);
 80026ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026b0:	f7ff f8ed 	bl	800188e <time_delay>

	flash_read_existing_card();
 80026b4:	f7fe fbd2 	bl	8000e5c <flash_read_existing_card>
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		switch (current_state)
 80026b8:	4ba2      	ldr	r3, [pc, #648]	; (8002944 <main+0x330>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	2b09      	cmp	r3, #9
 80026be:	d8fb      	bhi.n	80026b8 <main+0xa4>
 80026c0:	a201      	add	r2, pc, #4	; (adr r2, 80026c8 <main+0xb4>)
 80026c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026c6:	bf00      	nop
 80026c8:	080026f1 	.word	0x080026f1
 80026cc:	08002751 	.word	0x08002751
 80026d0:	08002775 	.word	0x08002775
 80026d4:	0800279d 	.word	0x0800279d
 80026d8:	08002829 	.word	0x08002829
 80026dc:	08002877 	.word	0x08002877
 80026e0:	080028b7 	.word	0x080028b7
 80026e4:	080028f3 	.word	0x080028f3
 80026e8:	08002959 	.word	0x08002959
 80026ec:	0800299f 	.word	0x0800299f
		{
		case IDLE_STATE:
			// Check condition to display time on LCD
			if (flag)
 80026f0:	4b95      	ldr	r3, [pc, #596]	; (8002948 <main+0x334>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d004      	beq.n	8002704 <main+0xf0>
			{
				h_display_time();
 80026fa:	f7fe f91d 	bl	8000938 <h_display_time>
				flag = false;
 80026fe:	4b92      	ldr	r3, [pc, #584]	; (8002948 <main+0x334>)
 8002700:	2200      	movs	r2, #0
 8002702:	701a      	strb	r2, [r3, #0]
			}

			// Check for the presence of a card
			if (check_have_card())
 8002704:	f7fe fe6e 	bl	80013e4 <check_have_card>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d002      	beq.n	8002714 <main+0x100>
			{
				current_state = CHECK_CARD_STATE;
 800270e:	4b8d      	ldr	r3, [pc, #564]	; (8002944 <main+0x330>)
 8002710:	2201      	movs	r2, #1
 8002712:	701a      	strb	r2, [r3, #0]
			}

			// Check the keypad button
			if (api_check_have_button(&keypad))
 8002714:	488a      	ldr	r0, [pc, #552]	; (8002940 <main+0x32c>)
 8002716:	f7fe fa94 	bl	8000c42 <api_check_have_button>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	f000 8144 	beq.w	80029aa <main+0x396>
			{
				// If the '*' button is pressed, switch to enter password state
				if (api_check_button(&keypad, '*'))
 8002722:	212a      	movs	r1, #42	; 0x2a
 8002724:	4886      	ldr	r0, [pc, #536]	; (8002940 <main+0x32c>)
 8002726:	f7fe fa73 	bl	8000c10 <api_check_button>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d003      	beq.n	8002738 <main+0x124>
				{
					current_state = ENTER_PASSWORD_STATE;
 8002730:	4b84      	ldr	r3, [pc, #528]	; (8002944 <main+0x330>)
 8002732:	2202      	movs	r2, #2
 8002734:	701a      	strb	r2, [r3, #0]
				else if (api_check_button(&keypad, '#'))
				{
					current_state = CHANGE_PASS_ADD_CARD_STATE;
				}
			}
			break;
 8002736:	e138      	b.n	80029aa <main+0x396>
				else if (api_check_button(&keypad, '#'))
 8002738:	2123      	movs	r1, #35	; 0x23
 800273a:	4881      	ldr	r0, [pc, #516]	; (8002940 <main+0x32c>)
 800273c:	f7fe fa68 	bl	8000c10 <api_check_button>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	f000 8131 	beq.w	80029aa <main+0x396>
					current_state = CHANGE_PASS_ADD_CARD_STATE;
 8002748:	4b7e      	ldr	r3, [pc, #504]	; (8002944 <main+0x330>)
 800274a:	2204      	movs	r2, #4
 800274c:	701a      	strb	r2, [r3, #0]
			break;
 800274e:	e12c      	b.n	80029aa <main+0x396>

		case CHECK_CARD_STATE:
			// Check if the card is valid
			if (check_card_to_access())
 8002750:	f7fe fdc6 	bl	80012e0 <check_card_to_access>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d006      	beq.n	8002768 <main+0x154>
			{
				open_door();
 800275a:	f7fe fa17 	bl	8000b8c <open_door>
				time_delay(1000);
 800275e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002762:	f7ff f894 	bl	800188e <time_delay>
 8002766:	e001      	b.n	800276c <main+0x158>
			}
			else
			{
				h_wrong_card();
 8002768:	f7fe f938 	bl	80009dc <h_wrong_card>
			}

			current_state = IDLE_STATE;
 800276c:	4b75      	ldr	r3, [pc, #468]	; (8002944 <main+0x330>)
 800276e:	2200      	movs	r2, #0
 8002770:	701a      	strb	r2, [r3, #0]
			break;
 8002772:	e11e      	b.n	80029b2 <main+0x39e>

		case ENTER_PASSWORD_STATE:
			// Call the function to enter the password
			if (api_enter_pass(&keypad, password))
 8002774:	4975      	ldr	r1, [pc, #468]	; (800294c <main+0x338>)
 8002776:	4872      	ldr	r0, [pc, #456]	; (8002940 <main+0x32c>)
 8002778:	f7fe fac6 	bl	8000d08 <api_enter_pass>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d006      	beq.n	8002790 <main+0x17c>
			{
				current_state = CHECK_PASSWORD_TIMEOUT_STATE;
 8002782:	4b70      	ldr	r3, [pc, #448]	; (8002944 <main+0x330>)
 8002784:	2203      	movs	r2, #3
 8002786:	701a      	strb	r2, [r3, #0]
				state = false;
 8002788:	4b71      	ldr	r3, [pc, #452]	; (8002950 <main+0x33c>)
 800278a:	2200      	movs	r2, #0
 800278c:	701a      	strb	r2, [r3, #0]
			else
			{
				h_timeout();
				current_state = IDLE_STATE;
			}
			break;
 800278e:	e110      	b.n	80029b2 <main+0x39e>
				h_timeout();
 8002790:	f7fe f954 	bl	8000a3c <h_timeout>
				current_state = IDLE_STATE;
 8002794:	4b6b      	ldr	r3, [pc, #428]	; (8002944 <main+0x330>)
 8002796:	2200      	movs	r2, #0
 8002798:	701a      	strb	r2, [r3, #0]
			break;
 800279a:	e10a      	b.n	80029b2 <main+0x39e>

		case CHECK_PASSWORD_TIMEOUT_STATE:
			// Check button and timeout
			if (api_check_button_timeout(&keypad, '#', 10000))
 800279c:	f242 7210 	movw	r2, #10000	; 0x2710
 80027a0:	2123      	movs	r1, #35	; 0x23
 80027a2:	4867      	ldr	r0, [pc, #412]	; (8002940 <main+0x32c>)
 80027a4:	f7fe fa88 	bl	8000cb8 <api_check_button_timeout>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d033      	beq.n	8002816 <main+0x202>
			{
				// Check if the password is correct
				if (!check_password(password))
 80027ae:	4867      	ldr	r0, [pc, #412]	; (800294c <main+0x338>)
 80027b0:	f7fe f88c 	bl	80008cc <check_password>
 80027b4:	4603      	mov	r3, r0
 80027b6:	f083 0301 	eor.w	r3, r3, #1
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d018      	beq.n	80027f2 <main+0x1de>
				{
					wrong++;
 80027c0:	4b64      	ldr	r3, [pc, #400]	; (8002954 <main+0x340>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	3301      	adds	r3, #1
 80027c8:	b2da      	uxtb	r2, r3
 80027ca:	4b62      	ldr	r3, [pc, #392]	; (8002954 <main+0x340>)
 80027cc:	701a      	strb	r2, [r3, #0]
					if (wrong > 3)
 80027ce:	4b61      	ldr	r3, [pc, #388]	; (8002954 <main+0x340>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	2b03      	cmp	r3, #3
 80027d6:	d906      	bls.n	80027e6 <main+0x1d2>
					{
						wrong = 0;
 80027d8:	4b5e      	ldr	r3, [pc, #376]	; (8002954 <main+0x340>)
 80027da:	2200      	movs	r2, #0
 80027dc:	701a      	strb	r2, [r3, #0]
						current_state = BLOCK_STATE;
 80027de:	4b59      	ldr	r3, [pc, #356]	; (8002944 <main+0x330>)
 80027e0:	2209      	movs	r2, #9
 80027e2:	701a      	strb	r2, [r3, #0]
			{
				h_timeout();
				wrong = 0;
				current_state = IDLE_STATE;
			}
			break;
 80027e4:	e0e5      	b.n	80029b2 <main+0x39e>
						h_wrong_pass();
 80027e6:	f7fe f911 	bl	8000a0c <h_wrong_pass>
						current_state = ENTER_PASSWORD_STATE;
 80027ea:	4b56      	ldr	r3, [pc, #344]	; (8002944 <main+0x330>)
 80027ec:	2202      	movs	r2, #2
 80027ee:	701a      	strb	r2, [r3, #0]
			break;
 80027f0:	e0df      	b.n	80029b2 <main+0x39e>
					if (state)
 80027f2:	4b57      	ldr	r3, [pc, #348]	; (8002950 <main+0x33c>)
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d003      	beq.n	8002804 <main+0x1f0>
						current_state = ENTER_NEW_PASSWORD_STATE;
 80027fc:	4b51      	ldr	r3, [pc, #324]	; (8002944 <main+0x330>)
 80027fe:	2208      	movs	r2, #8
 8002800:	701a      	strb	r2, [r3, #0]
			break;
 8002802:	e0d6      	b.n	80029b2 <main+0x39e>
						open_door();
 8002804:	f7fe f9c2 	bl	8000b8c <open_door>
						wrong = 0;
 8002808:	4b52      	ldr	r3, [pc, #328]	; (8002954 <main+0x340>)
 800280a:	2200      	movs	r2, #0
 800280c:	701a      	strb	r2, [r3, #0]
						current_state = IDLE_STATE;
 800280e:	4b4d      	ldr	r3, [pc, #308]	; (8002944 <main+0x330>)
 8002810:	2200      	movs	r2, #0
 8002812:	701a      	strb	r2, [r3, #0]
			break;
 8002814:	e0cd      	b.n	80029b2 <main+0x39e>
				h_timeout();
 8002816:	f7fe f911 	bl	8000a3c <h_timeout>
				wrong = 0;
 800281a:	4b4e      	ldr	r3, [pc, #312]	; (8002954 <main+0x340>)
 800281c:	2200      	movs	r2, #0
 800281e:	701a      	strb	r2, [r3, #0]
				current_state = IDLE_STATE;
 8002820:	4b48      	ldr	r3, [pc, #288]	; (8002944 <main+0x330>)
 8002822:	2200      	movs	r2, #0
 8002824:	701a      	strb	r2, [r3, #0]
			break;
 8002826:	e0c4      	b.n	80029b2 <main+0x39e>

		case CHANGE_PASS_ADD_CARD_STATE:
			// Display the mode selection options
			h_display_choose_mode();
 8002828:	f7fe f974 	bl	8000b14 <h_display_choose_mode>

			// Check button and timeout
			if (api_check_have_button_timeout(&keypad, 10000))
 800282c:	f242 7110 	movw	r1, #10000	; 0x2710
 8002830:	4843      	ldr	r0, [pc, #268]	; (8002940 <main+0x32c>)
 8002832:	f7fe fa1d 	bl	8000c70 <api_check_have_button_timeout>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d016      	beq.n	800286a <main+0x256>
			{
				// If button '7' is pressed, switch to the state to add a card
				if (api_check_button(&keypad, '7'))
 800283c:	2137      	movs	r1, #55	; 0x37
 800283e:	4840      	ldr	r0, [pc, #256]	; (8002940 <main+0x32c>)
 8002840:	f7fe f9e6 	bl	8000c10 <api_check_button>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d003      	beq.n	8002852 <main+0x23e>
				{
					current_state = ADD_CARD_STATE;
 800284a:	4b3e      	ldr	r3, [pc, #248]	; (8002944 <main+0x330>)
 800284c:	2205      	movs	r2, #5
 800284e:	701a      	strb	r2, [r3, #0]
			else
			{
				h_timeout();
				current_state = IDLE_STATE;
			}
			break;
 8002850:	e0ad      	b.n	80029ae <main+0x39a>
				else if (api_check_button(&keypad, '8'))
 8002852:	2138      	movs	r1, #56	; 0x38
 8002854:	483a      	ldr	r0, [pc, #232]	; (8002940 <main+0x32c>)
 8002856:	f7fe f9db 	bl	8000c10 <api_check_button>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	f000 80a6 	beq.w	80029ae <main+0x39a>
					current_state = CHANGE_PASS_STATE;
 8002862:	4b38      	ldr	r3, [pc, #224]	; (8002944 <main+0x330>)
 8002864:	2207      	movs	r2, #7
 8002866:	701a      	strb	r2, [r3, #0]
			break;
 8002868:	e0a1      	b.n	80029ae <main+0x39a>
				h_timeout();
 800286a:	f7fe f8e7 	bl	8000a3c <h_timeout>
				current_state = IDLE_STATE;
 800286e:	4b35      	ldr	r3, [pc, #212]	; (8002944 <main+0x330>)
 8002870:	2200      	movs	r2, #0
 8002872:	701a      	strb	r2, [r3, #0]
			break;
 8002874:	e09b      	b.n	80029ae <main+0x39a>

		case ADD_CARD_STATE:
			h_display_tap_master_card();
 8002876:	f7fe f84b 	bl	8000910 <h_display_tap_master_card>

			// Check for the presence of a card and timeout
			if (check_have_card_with_timeout())
 800287a:	f7fe fc0b 	bl	8001094 <check_have_card_with_timeout>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d012      	beq.n	80028aa <main+0x296>
			{
				// Check if the card is a Master card
				if (check_master_card())
 8002884:	f7fe fbb6 	bl	8000ff4 <check_master_card>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d007      	beq.n	800289e <main+0x28a>
				{
					current_state = TAP_NEW_CARD_STATE;
 800288e:	4b2d      	ldr	r3, [pc, #180]	; (8002944 <main+0x330>)
 8002890:	2206      	movs	r2, #6
 8002892:	701a      	strb	r2, [r3, #0]
					time_delay(1000);
 8002894:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002898:	f7fe fff9 	bl	800188e <time_delay>
			else
			{
				h_timeout();
				current_state = IDLE_STATE;
			}
			break;
 800289c:	e089      	b.n	80029b2 <main+0x39e>
					h_wrong_card();
 800289e:	f7fe f89d 	bl	80009dc <h_wrong_card>
					current_state = IDLE_STATE;
 80028a2:	4b28      	ldr	r3, [pc, #160]	; (8002944 <main+0x330>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	701a      	strb	r2, [r3, #0]
			break;
 80028a8:	e083      	b.n	80029b2 <main+0x39e>
				h_timeout();
 80028aa:	f7fe f8c7 	bl	8000a3c <h_timeout>
				current_state = IDLE_STATE;
 80028ae:	4b25      	ldr	r3, [pc, #148]	; (8002944 <main+0x330>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	701a      	strb	r2, [r3, #0]
			break;
 80028b4:	e07d      	b.n	80029b2 <main+0x39e>

		case TAP_NEW_CARD_STATE:
			h_display_tap_new_card();
 80028b6:	f7fe f919 	bl	8000aec <h_display_tap_new_card>

			// Check for the presence of a card and timeout
			if (check_have_card_with_timeout())
 80028ba:	f7fe fbeb 	bl	8001094 <check_have_card_with_timeout>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d010      	beq.n	80028e6 <main+0x2d2>
			{
				// Check if the card has been registered or not
				if (!check_card_to_access())
 80028c4:	f7fe fd0c 	bl	80012e0 <check_card_to_access>
 80028c8:	4603      	mov	r3, r0
 80028ca:	f083 0301 	eor.w	r3, r3, #1
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00a      	beq.n	80028ea <main+0x2d6>
				{
					flash_read_existing_card();
 80028d4:	f7fe fac2 	bl	8000e5c <flash_read_existing_card>
					add_new_sub_card();
 80028d8:	f7fe fc06 	bl	80010e8 <add_new_sub_card>
					time_delay(1000);
 80028dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028e0:	f7fe ffd5 	bl	800188e <time_delay>
 80028e4:	e001      	b.n	80028ea <main+0x2d6>
				}
			}
			else
			{
				h_timeout();
 80028e6:	f7fe f8a9 	bl	8000a3c <h_timeout>
			}

			current_state = IDLE_STATE;
 80028ea:	4b16      	ldr	r3, [pc, #88]	; (8002944 <main+0x330>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	701a      	strb	r2, [r3, #0]
			break;
 80028f0:	e05f      	b.n	80029b2 <main+0x39e>

		case CHANGE_PASS_STATE:
			h_display_enter_current_pass();
 80028f2:	f7fe f8e7 	bl	8000ac4 <h_display_enter_current_pass>

			// Enter the current password
			if (api_enter_pass(&keypad, password))
 80028f6:	4915      	ldr	r1, [pc, #84]	; (800294c <main+0x338>)
 80028f8:	4811      	ldr	r0, [pc, #68]	; (8002940 <main+0x32c>)
 80028fa:	f7fe fa05 	bl	8000d08 <api_enter_pass>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d006      	beq.n	8002912 <main+0x2fe>
			{
				current_state = CHECK_PASSWORD_TIMEOUT_STATE;
 8002904:	4b0f      	ldr	r3, [pc, #60]	; (8002944 <main+0x330>)
 8002906:	2203      	movs	r2, #3
 8002908:	701a      	strb	r2, [r3, #0]
				state = true;
 800290a:	4b11      	ldr	r3, [pc, #68]	; (8002950 <main+0x33c>)
 800290c:	2201      	movs	r2, #1
 800290e:	701a      	strb	r2, [r3, #0]
			else
			{
				h_timeout();
				current_state = IDLE_STATE;
			}
			break;
 8002910:	e04f      	b.n	80029b2 <main+0x39e>
				h_timeout();
 8002912:	f7fe f893 	bl	8000a3c <h_timeout>
				current_state = IDLE_STATE;
 8002916:	4b0b      	ldr	r3, [pc, #44]	; (8002944 <main+0x330>)
 8002918:	2200      	movs	r2, #0
 800291a:	701a      	strb	r2, [r3, #0]
			break;
 800291c:	e049      	b.n	80029b2 <main+0x39e>
 800291e:	bf00      	nop
 8002920:	20000248 	.word	0x20000248
 8002924:	200001f4 	.word	0x200001f4
 8002928:	200001a0 	.word	0x200001a0
 800292c:	200002a0 	.word	0x200002a0
 8002930:	200002e8 	.word	0x200002e8
 8002934:	20000330 	.word	0x20000330
 8002938:	40020000 	.word	0x40020000
 800293c:	40020400 	.word	0x40020400
 8002940:	2000033c 	.word	0x2000033c
 8002944:	20000338 	.word	0x20000338
 8002948:	20000005 	.word	0x20000005
 800294c:	20000334 	.word	0x20000334
 8002950:	2000032c 	.word	0x2000032c
 8002954:	2000032d 	.word	0x2000032d

		case ENTER_NEW_PASSWORD_STATE:
			h_display_enter_new_pass();
 8002958:	f7fe f8a0 	bl	8000a9c <h_display_enter_new_pass>
			time_delay(1000);
 800295c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002960:	f7fe ff95 	bl	800188e <time_delay>

			// Check button and timeout
			if (api_enter_pass(&keypad, password))
 8002964:	4913      	ldr	r1, [pc, #76]	; (80029b4 <main+0x3a0>)
 8002966:	4814      	ldr	r0, [pc, #80]	; (80029b8 <main+0x3a4>)
 8002968:	f7fe f9ce 	bl	8000d08 <api_enter_pass>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00f      	beq.n	8002992 <main+0x37e>
			{
				if (api_check_button_timeout(&keypad,'#',10000))
 8002972:	f242 7210 	movw	r2, #10000	; 0x2710
 8002976:	2123      	movs	r1, #35	; 0x23
 8002978:	480f      	ldr	r0, [pc, #60]	; (80029b8 <main+0x3a4>)
 800297a:	f7fe f99d 	bl	8000cb8 <api_check_button_timeout>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d003      	beq.n	800298c <main+0x378>
				{
					save_password_to_flash(password);
 8002984:	480b      	ldr	r0, [pc, #44]	; (80029b4 <main+0x3a0>)
 8002986:	f7fd ff63 	bl	8000850 <save_password_to_flash>
 800298a:	e004      	b.n	8002996 <main+0x382>
				}
				else
				{
					h_timeout();
 800298c:	f7fe f856 	bl	8000a3c <h_timeout>
 8002990:	e001      	b.n	8002996 <main+0x382>
				}
			}
			else
			{
				h_timeout();
 8002992:	f7fe f853 	bl	8000a3c <h_timeout>
			}
			current_state = IDLE_STATE;
 8002996:	4b09      	ldr	r3, [pc, #36]	; (80029bc <main+0x3a8>)
 8002998:	2200      	movs	r2, #0
 800299a:	701a      	strb	r2, [r3, #0]
			break;
 800299c:	e009      	b.n	80029b2 <main+0x39e>

		case BLOCK_STATE:
			// Display the system blocked message
			h_block();
 800299e:	f7fe f865 	bl	8000a6c <h_block>
			current_state = IDLE_STATE;
 80029a2:	4b06      	ldr	r3, [pc, #24]	; (80029bc <main+0x3a8>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	701a      	strb	r2, [r3, #0]
			break;
 80029a8:	e003      	b.n	80029b2 <main+0x39e>
			break;
 80029aa:	bf00      	nop
 80029ac:	e684      	b.n	80026b8 <main+0xa4>
			break;
 80029ae:	bf00      	nop
 80029b0:	e682      	b.n	80026b8 <main+0xa4>
		switch (current_state)
 80029b2:	e681      	b.n	80026b8 <main+0xa4>
 80029b4:	20000334 	.word	0x20000334
 80029b8:	2000033c 	.word	0x2000033c
 80029bc:	20000338 	.word	0x20000338

080029c0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b094      	sub	sp, #80	; 0x50
 80029c4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029c6:	f107 0320 	add.w	r3, r7, #32
 80029ca:	2230      	movs	r2, #48	; 0x30
 80029cc:	2100      	movs	r1, #0
 80029ce:	4618      	mov	r0, r3
 80029d0:	f004 fd28 	bl	8007424 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029d4:	f107 030c 	add.w	r3, r7, #12
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	605a      	str	r2, [r3, #4]
 80029de:	609a      	str	r2, [r3, #8]
 80029e0:	60da      	str	r2, [r3, #12]
 80029e2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80029e4:	2300      	movs	r3, #0
 80029e6:	60bb      	str	r3, [r7, #8]
 80029e8:	4b22      	ldr	r3, [pc, #136]	; (8002a74 <SystemClock_Config+0xb4>)
 80029ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ec:	4a21      	ldr	r2, [pc, #132]	; (8002a74 <SystemClock_Config+0xb4>)
 80029ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029f2:	6413      	str	r3, [r2, #64]	; 0x40
 80029f4:	4b1f      	ldr	r3, [pc, #124]	; (8002a74 <SystemClock_Config+0xb4>)
 80029f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029fc:	60bb      	str	r3, [r7, #8]
 80029fe:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a00:	2300      	movs	r3, #0
 8002a02:	607b      	str	r3, [r7, #4]
 8002a04:	4b1c      	ldr	r3, [pc, #112]	; (8002a78 <SystemClock_Config+0xb8>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a1b      	ldr	r2, [pc, #108]	; (8002a78 <SystemClock_Config+0xb8>)
 8002a0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a0e:	6013      	str	r3, [r2, #0]
 8002a10:	4b19      	ldr	r3, [pc, #100]	; (8002a78 <SystemClock_Config+0xb8>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a18:	607b      	str	r3, [r7, #4]
 8002a1a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a20:	2301      	movs	r3, #1
 8002a22:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a24:	2310      	movs	r3, #16
 8002a26:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a2c:	f107 0320 	add.w	r3, r7, #32
 8002a30:	4618      	mov	r0, r3
 8002a32:	f002 f847 	bl	8004ac4 <HAL_RCC_OscConfig>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <SystemClock_Config+0x80>
	{
		Error_Handler();
 8002a3c:	f000 f9d8 	bl	8002df0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a40:	230f      	movs	r3, #15
 8002a42:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002a44:	2300      	movs	r3, #0
 8002a46:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a50:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a52:	2300      	movs	r3, #0
 8002a54:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002a56:	f107 030c 	add.w	r3, r7, #12
 8002a5a:	2100      	movs	r1, #0
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f002 faa9 	bl	8004fb4 <HAL_RCC_ClockConfig>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d001      	beq.n	8002a6c <SystemClock_Config+0xac>
	{
		Error_Handler();
 8002a68:	f000 f9c2 	bl	8002df0 <Error_Handler>
	}
}
 8002a6c:	bf00      	nop
 8002a6e:	3750      	adds	r7, #80	; 0x50
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	40023800 	.word	0x40023800
 8002a78:	40007000 	.word	0x40007000

08002a7c <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8002a80:	4b12      	ldr	r3, [pc, #72]	; (8002acc <MX_I2C1_Init+0x50>)
 8002a82:	4a13      	ldr	r2, [pc, #76]	; (8002ad0 <MX_I2C1_Init+0x54>)
 8002a84:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8002a86:	4b11      	ldr	r3, [pc, #68]	; (8002acc <MX_I2C1_Init+0x50>)
 8002a88:	4a12      	ldr	r2, [pc, #72]	; (8002ad4 <MX_I2C1_Init+0x58>)
 8002a8a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002a8c:	4b0f      	ldr	r3, [pc, #60]	; (8002acc <MX_I2C1_Init+0x50>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8002a92:	4b0e      	ldr	r3, [pc, #56]	; (8002acc <MX_I2C1_Init+0x50>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002a98:	4b0c      	ldr	r3, [pc, #48]	; (8002acc <MX_I2C1_Init+0x50>)
 8002a9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a9e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002aa0:	4b0a      	ldr	r3, [pc, #40]	; (8002acc <MX_I2C1_Init+0x50>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8002aa6:	4b09      	ldr	r3, [pc, #36]	; (8002acc <MX_I2C1_Init+0x50>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002aac:	4b07      	ldr	r3, [pc, #28]	; (8002acc <MX_I2C1_Init+0x50>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002ab2:	4b06      	ldr	r3, [pc, #24]	; (8002acc <MX_I2C1_Init+0x50>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002ab8:	4804      	ldr	r0, [pc, #16]	; (8002acc <MX_I2C1_Init+0x50>)
 8002aba:	f001 f86d 	bl	8003b98 <HAL_I2C_Init>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8002ac4:	f000 f994 	bl	8002df0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8002ac8:	bf00      	nop
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	200001a0 	.word	0x200001a0
 8002ad0:	40005400 	.word	0x40005400
 8002ad4:	000186a0 	.word	0x000186a0

08002ad8 <MX_I2C3_Init>:
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
	/* USER CODE END I2C3_Init 0 */

	/* USER CODE BEGIN I2C3_Init 1 */

	/* USER CODE END I2C3_Init 1 */
	hi2c3.Instance = I2C3;
 8002adc:	4b12      	ldr	r3, [pc, #72]	; (8002b28 <MX_I2C3_Init+0x50>)
 8002ade:	4a13      	ldr	r2, [pc, #76]	; (8002b2c <MX_I2C3_Init+0x54>)
 8002ae0:	601a      	str	r2, [r3, #0]
	hi2c3.Init.ClockSpeed = 100000;
 8002ae2:	4b11      	ldr	r3, [pc, #68]	; (8002b28 <MX_I2C3_Init+0x50>)
 8002ae4:	4a12      	ldr	r2, [pc, #72]	; (8002b30 <MX_I2C3_Init+0x58>)
 8002ae6:	605a      	str	r2, [r3, #4]
	hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002ae8:	4b0f      	ldr	r3, [pc, #60]	; (8002b28 <MX_I2C3_Init+0x50>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	609a      	str	r2, [r3, #8]
	hi2c3.Init.OwnAddress1 = 0;
 8002aee:	4b0e      	ldr	r3, [pc, #56]	; (8002b28 <MX_I2C3_Init+0x50>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	60da      	str	r2, [r3, #12]
	hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002af4:	4b0c      	ldr	r3, [pc, #48]	; (8002b28 <MX_I2C3_Init+0x50>)
 8002af6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002afa:	611a      	str	r2, [r3, #16]
	hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002afc:	4b0a      	ldr	r3, [pc, #40]	; (8002b28 <MX_I2C3_Init+0x50>)
 8002afe:	2200      	movs	r2, #0
 8002b00:	615a      	str	r2, [r3, #20]
	hi2c3.Init.OwnAddress2 = 0;
 8002b02:	4b09      	ldr	r3, [pc, #36]	; (8002b28 <MX_I2C3_Init+0x50>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	619a      	str	r2, [r3, #24]
	hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b08:	4b07      	ldr	r3, [pc, #28]	; (8002b28 <MX_I2C3_Init+0x50>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	61da      	str	r2, [r3, #28]
	hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b0e:	4b06      	ldr	r3, [pc, #24]	; (8002b28 <MX_I2C3_Init+0x50>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002b14:	4804      	ldr	r0, [pc, #16]	; (8002b28 <MX_I2C3_Init+0x50>)
 8002b16:	f001 f83f 	bl	8003b98 <HAL_I2C_Init>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d001      	beq.n	8002b24 <MX_I2C3_Init+0x4c>
	{
		Error_Handler();
 8002b20:	f000 f966 	bl	8002df0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C3_Init 2 */

	/* USER CODE END I2C3_Init 2 */

}
 8002b24:	bf00      	nop
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	200001f4 	.word	0x200001f4
 8002b2c:	40005c00 	.word	0x40005c00
 8002b30:	000186a0 	.word	0x000186a0

08002b34 <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */
	//
	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8002b38:	4b17      	ldr	r3, [pc, #92]	; (8002b98 <MX_SPI1_Init+0x64>)
 8002b3a:	4a18      	ldr	r2, [pc, #96]	; (8002b9c <MX_SPI1_Init+0x68>)
 8002b3c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8002b3e:	4b16      	ldr	r3, [pc, #88]	; (8002b98 <MX_SPI1_Init+0x64>)
 8002b40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002b44:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002b46:	4b14      	ldr	r3, [pc, #80]	; (8002b98 <MX_SPI1_Init+0x64>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b4c:	4b12      	ldr	r3, [pc, #72]	; (8002b98 <MX_SPI1_Init+0x64>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b52:	4b11      	ldr	r3, [pc, #68]	; (8002b98 <MX_SPI1_Init+0x64>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b58:	4b0f      	ldr	r3, [pc, #60]	; (8002b98 <MX_SPI1_Init+0x64>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8002b5e:	4b0e      	ldr	r3, [pc, #56]	; (8002b98 <MX_SPI1_Init+0x64>)
 8002b60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b64:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b66:	4b0c      	ldr	r3, [pc, #48]	; (8002b98 <MX_SPI1_Init+0x64>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b6c:	4b0a      	ldr	r3, [pc, #40]	; (8002b98 <MX_SPI1_Init+0x64>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b72:	4b09      	ldr	r3, [pc, #36]	; (8002b98 <MX_SPI1_Init+0x64>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b78:	4b07      	ldr	r3, [pc, #28]	; (8002b98 <MX_SPI1_Init+0x64>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8002b7e:	4b06      	ldr	r3, [pc, #24]	; (8002b98 <MX_SPI1_Init+0x64>)
 8002b80:	220a      	movs	r2, #10
 8002b82:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002b84:	4804      	ldr	r0, [pc, #16]	; (8002b98 <MX_SPI1_Init+0x64>)
 8002b86:	f002 fc35 	bl	80053f4 <HAL_SPI_Init>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <MX_SPI1_Init+0x60>
	{
		Error_Handler();
 8002b90:	f000 f92e 	bl	8002df0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */
	//
	/* USER CODE END SPI1_Init 2 */

}
 8002b94:	bf00      	nop
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	20000248 	.word	0x20000248
 8002b9c:	40013000 	.word	0x40013000

08002ba0 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ba6:	f107 0308 	add.w	r3, r7, #8
 8002baa:	2200      	movs	r2, #0
 8002bac:	601a      	str	r2, [r3, #0]
 8002bae:	605a      	str	r2, [r3, #4]
 8002bb0:	609a      	str	r2, [r3, #8]
 8002bb2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bb4:	463b      	mov	r3, r7
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]
 8002bba:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8002bbc:	4b1d      	ldr	r3, [pc, #116]	; (8002c34 <MX_TIM3_Init+0x94>)
 8002bbe:	4a1e      	ldr	r2, [pc, #120]	; (8002c38 <MX_TIM3_Init+0x98>)
 8002bc0:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 999;
 8002bc2:	4b1c      	ldr	r3, [pc, #112]	; (8002c34 <MX_TIM3_Init+0x94>)
 8002bc4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002bc8:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bca:	4b1a      	ldr	r3, [pc, #104]	; (8002c34 <MX_TIM3_Init+0x94>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 15999;
 8002bd0:	4b18      	ldr	r3, [pc, #96]	; (8002c34 <MX_TIM3_Init+0x94>)
 8002bd2:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8002bd6:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bd8:	4b16      	ldr	r3, [pc, #88]	; (8002c34 <MX_TIM3_Init+0x94>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bde:	4b15      	ldr	r3, [pc, #84]	; (8002c34 <MX_TIM3_Init+0x94>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002be4:	4813      	ldr	r0, [pc, #76]	; (8002c34 <MX_TIM3_Init+0x94>)
 8002be6:	f002 fefb 	bl	80059e0 <HAL_TIM_Base_Init>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d001      	beq.n	8002bf4 <MX_TIM3_Init+0x54>
	{
		Error_Handler();
 8002bf0:	f000 f8fe 	bl	8002df0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bf4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bf8:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002bfa:	f107 0308 	add.w	r3, r7, #8
 8002bfe:	4619      	mov	r1, r3
 8002c00:	480c      	ldr	r0, [pc, #48]	; (8002c34 <MX_TIM3_Init+0x94>)
 8002c02:	f003 f8a7 	bl	8005d54 <HAL_TIM_ConfigClockSource>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <MX_TIM3_Init+0x70>
	{
		Error_Handler();
 8002c0c:	f000 f8f0 	bl	8002df0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c10:	2300      	movs	r3, #0
 8002c12:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c14:	2300      	movs	r3, #0
 8002c16:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002c18:	463b      	mov	r3, r7
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	4805      	ldr	r0, [pc, #20]	; (8002c34 <MX_TIM3_Init+0x94>)
 8002c1e:	f003 faa3 	bl	8006168 <HAL_TIMEx_MasterConfigSynchronization>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <MX_TIM3_Init+0x8c>
	{
		Error_Handler();
 8002c28:	f000 f8e2 	bl	8002df0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8002c2c:	bf00      	nop
 8002c2e:	3718      	adds	r7, #24
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	200002a0 	.word	0x200002a0
 8002c38:	40000400 	.word	0x40000400

08002c3c <MX_USART6_UART_Init>:
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8002c40:	4b11      	ldr	r3, [pc, #68]	; (8002c88 <MX_USART6_UART_Init+0x4c>)
 8002c42:	4a12      	ldr	r2, [pc, #72]	; (8002c8c <MX_USART6_UART_Init+0x50>)
 8002c44:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 8002c46:	4b10      	ldr	r3, [pc, #64]	; (8002c88 <MX_USART6_UART_Init+0x4c>)
 8002c48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c4c:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002c4e:	4b0e      	ldr	r3, [pc, #56]	; (8002c88 <MX_USART6_UART_Init+0x4c>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8002c54:	4b0c      	ldr	r3, [pc, #48]	; (8002c88 <MX_USART6_UART_Init+0x4c>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 8002c5a:	4b0b      	ldr	r3, [pc, #44]	; (8002c88 <MX_USART6_UART_Init+0x4c>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8002c60:	4b09      	ldr	r3, [pc, #36]	; (8002c88 <MX_USART6_UART_Init+0x4c>)
 8002c62:	220c      	movs	r2, #12
 8002c64:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c66:	4b08      	ldr	r3, [pc, #32]	; (8002c88 <MX_USART6_UART_Init+0x4c>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c6c:	4b06      	ldr	r3, [pc, #24]	; (8002c88 <MX_USART6_UART_Init+0x4c>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK)
 8002c72:	4805      	ldr	r0, [pc, #20]	; (8002c88 <MX_USART6_UART_Init+0x4c>)
 8002c74:	f003 fafa 	bl	800626c <HAL_UART_Init>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <MX_USART6_UART_Init+0x46>
	{
		Error_Handler();
 8002c7e:	f000 f8b7 	bl	8002df0 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 8002c82:	bf00      	nop
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	200002e8 	.word	0x200002e8
 8002c8c:	40011400 	.word	0x40011400

08002c90 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b08a      	sub	sp, #40	; 0x28
 8002c94:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c96:	f107 0314 	add.w	r3, r7, #20
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	601a      	str	r2, [r3, #0]
 8002c9e:	605a      	str	r2, [r3, #4]
 8002ca0:	609a      	str	r2, [r3, #8]
 8002ca2:	60da      	str	r2, [r3, #12]
 8002ca4:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	613b      	str	r3, [r7, #16]
 8002caa:	4b37      	ldr	r3, [pc, #220]	; (8002d88 <MX_GPIO_Init+0xf8>)
 8002cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cae:	4a36      	ldr	r2, [pc, #216]	; (8002d88 <MX_GPIO_Init+0xf8>)
 8002cb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cb6:	4b34      	ldr	r3, [pc, #208]	; (8002d88 <MX_GPIO_Init+0xf8>)
 8002cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cbe:	613b      	str	r3, [r7, #16]
 8002cc0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	60fb      	str	r3, [r7, #12]
 8002cc6:	4b30      	ldr	r3, [pc, #192]	; (8002d88 <MX_GPIO_Init+0xf8>)
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cca:	4a2f      	ldr	r2, [pc, #188]	; (8002d88 <MX_GPIO_Init+0xf8>)
 8002ccc:	f043 0301 	orr.w	r3, r3, #1
 8002cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cd2:	4b2d      	ldr	r3, [pc, #180]	; (8002d88 <MX_GPIO_Init+0xf8>)
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	60fb      	str	r3, [r7, #12]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002cde:	2300      	movs	r3, #0
 8002ce0:	60bb      	str	r3, [r7, #8]
 8002ce2:	4b29      	ldr	r3, [pc, #164]	; (8002d88 <MX_GPIO_Init+0xf8>)
 8002ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce6:	4a28      	ldr	r2, [pc, #160]	; (8002d88 <MX_GPIO_Init+0xf8>)
 8002ce8:	f043 0302 	orr.w	r3, r3, #2
 8002cec:	6313      	str	r3, [r2, #48]	; 0x30
 8002cee:	4b26      	ldr	r3, [pc, #152]	; (8002d88 <MX_GPIO_Init+0xf8>)
 8002cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	60bb      	str	r3, [r7, #8]
 8002cf8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	607b      	str	r3, [r7, #4]
 8002cfe:	4b22      	ldr	r3, [pc, #136]	; (8002d88 <MX_GPIO_Init+0xf8>)
 8002d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d02:	4a21      	ldr	r2, [pc, #132]	; (8002d88 <MX_GPIO_Init+0xf8>)
 8002d04:	f043 0304 	orr.w	r3, r3, #4
 8002d08:	6313      	str	r3, [r2, #48]	; 0x30
 8002d0a:	4b1f      	ldr	r3, [pc, #124]	; (8002d88 <MX_GPIO_Init+0xf8>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0e:	f003 0304 	and.w	r3, r3, #4
 8002d12:	607b      	str	r3, [r7, #4]
 8002d14:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_10, GPIO_PIN_RESET);
 8002d16:	2200      	movs	r2, #0
 8002d18:	f240 411c 	movw	r1, #1052	; 0x41c
 8002d1c:	481b      	ldr	r0, [pc, #108]	; (8002d8c <MX_GPIO_Init+0xfc>)
 8002d1e:	f000 ff21 	bl	8003b64 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002d22:	2200      	movs	r2, #0
 8002d24:	2108      	movs	r1, #8
 8002d26:	481a      	ldr	r0, [pc, #104]	; (8002d90 <MX_GPIO_Init+0x100>)
 8002d28:	f000 ff1c 	bl	8003b64 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PA2 PA3 PA4 PA10 */
	GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_10;
 8002d2c:	f240 431c 	movw	r3, #1052	; 0x41c
 8002d30:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d32:	2301      	movs	r3, #1
 8002d34:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d36:	2300      	movs	r3, #0
 8002d38:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d3e:	f107 0314 	add.w	r3, r7, #20
 8002d42:	4619      	mov	r1, r3
 8002d44:	4811      	ldr	r0, [pc, #68]	; (8002d8c <MX_GPIO_Init+0xfc>)
 8002d46:	f000 fd71 	bl	800382c <HAL_GPIO_Init>

	/*Configure GPIO pins : PB10 PB4 PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4|GPIO_PIN_5;
 8002d4a:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8002d4e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d50:	2300      	movs	r3, #0
 8002d52:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d54:	2301      	movs	r3, #1
 8002d56:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d58:	f107 0314 	add.w	r3, r7, #20
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	480c      	ldr	r0, [pc, #48]	; (8002d90 <MX_GPIO_Init+0x100>)
 8002d60:	f000 fd64 	bl	800382c <HAL_GPIO_Init>

	/*Configure GPIO pin : PB3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002d64:	2308      	movs	r3, #8
 8002d66:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d70:	2300      	movs	r3, #0
 8002d72:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d74:	f107 0314 	add.w	r3, r7, #20
 8002d78:	4619      	mov	r1, r3
 8002d7a:	4805      	ldr	r0, [pc, #20]	; (8002d90 <MX_GPIO_Init+0x100>)
 8002d7c:	f000 fd56 	bl	800382c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8002d80:	bf00      	nop
 8002d82:	3728      	adds	r7, #40	; 0x28
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	40023800 	.word	0x40023800
 8002d8c:	40020000 	.word	0x40020000
 8002d90:	40020400 	.word	0x40020400

08002d94 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a05      	ldr	r2, [pc, #20]	; (8002db8 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d102      	bne.n	8002dac <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		flag = true;
 8002da6:	4b05      	ldr	r3, [pc, #20]	; (8002dbc <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002da8:	2201      	movs	r2, #1
 8002daa:	701a      	strb	r2, [r3, #0]
	}
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr
 8002db8:	40000400 	.word	0x40000400
 8002dbc:	20000005 	.word	0x20000005

08002dc0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
	if (uart[0] == 49)
 8002dc8:	4b08      	ldr	r3, [pc, #32]	; (8002dec <HAL_UART_RxCpltCallback+0x2c>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	2b31      	cmp	r3, #49	; 0x31
 8002dce:	d104      	bne.n	8002dda <HAL_UART_RxCpltCallback+0x1a>
	{
		flash_read_and_send_uart();
 8002dd0:	f7fd fcb8 	bl	8000744 <flash_read_and_send_uart>
		uart[0] = 0;
 8002dd4:	4b05      	ldr	r3, [pc, #20]	; (8002dec <HAL_UART_RxCpltCallback+0x2c>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	701a      	strb	r2, [r3, #0]

	}
	uart_receive_it(uart, 1);
 8002dda:	2101      	movs	r1, #1
 8002ddc:	4803      	ldr	r0, [pc, #12]	; (8002dec <HAL_UART_RxCpltCallback+0x2c>)
 8002dde:	f7ff fb4b 	bl	8002478 <uart_receive_it>
}
 8002de2:	bf00      	nop
 8002de4:	3708      	adds	r7, #8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	20000330 	.word	0x20000330

08002df0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002df4:	b672      	cpsid	i
}
 8002df6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002df8:	e7fe      	b.n	8002df8 <Error_Handler+0x8>
	...

08002dfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e02:	2300      	movs	r3, #0
 8002e04:	607b      	str	r3, [r7, #4]
 8002e06:	4b10      	ldr	r3, [pc, #64]	; (8002e48 <HAL_MspInit+0x4c>)
 8002e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0a:	4a0f      	ldr	r2, [pc, #60]	; (8002e48 <HAL_MspInit+0x4c>)
 8002e0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e10:	6453      	str	r3, [r2, #68]	; 0x44
 8002e12:	4b0d      	ldr	r3, [pc, #52]	; (8002e48 <HAL_MspInit+0x4c>)
 8002e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e1a:	607b      	str	r3, [r7, #4]
 8002e1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e1e:	2300      	movs	r3, #0
 8002e20:	603b      	str	r3, [r7, #0]
 8002e22:	4b09      	ldr	r3, [pc, #36]	; (8002e48 <HAL_MspInit+0x4c>)
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	4a08      	ldr	r2, [pc, #32]	; (8002e48 <HAL_MspInit+0x4c>)
 8002e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e2e:	4b06      	ldr	r3, [pc, #24]	; (8002e48 <HAL_MspInit+0x4c>)
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e36:	603b      	str	r3, [r7, #0]
 8002e38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e3a:	bf00      	nop
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	40023800 	.word	0x40023800

08002e4c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b08c      	sub	sp, #48	; 0x30
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e54:	f107 031c 	add.w	r3, r7, #28
 8002e58:	2200      	movs	r2, #0
 8002e5a:	601a      	str	r2, [r3, #0]
 8002e5c:	605a      	str	r2, [r3, #4]
 8002e5e:	609a      	str	r2, [r3, #8]
 8002e60:	60da      	str	r2, [r3, #12]
 8002e62:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a42      	ldr	r2, [pc, #264]	; (8002f74 <HAL_I2C_MspInit+0x128>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d12c      	bne.n	8002ec8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e6e:	2300      	movs	r3, #0
 8002e70:	61bb      	str	r3, [r7, #24]
 8002e72:	4b41      	ldr	r3, [pc, #260]	; (8002f78 <HAL_I2C_MspInit+0x12c>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	4a40      	ldr	r2, [pc, #256]	; (8002f78 <HAL_I2C_MspInit+0x12c>)
 8002e78:	f043 0302 	orr.w	r3, r3, #2
 8002e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e7e:	4b3e      	ldr	r3, [pc, #248]	; (8002f78 <HAL_I2C_MspInit+0x12c>)
 8002e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	61bb      	str	r3, [r7, #24]
 8002e88:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e8a:	23c0      	movs	r3, #192	; 0xc0
 8002e8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e8e:	2312      	movs	r3, #18
 8002e90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e92:	2300      	movs	r3, #0
 8002e94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e96:	2303      	movs	r3, #3
 8002e98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002e9a:	2304      	movs	r3, #4
 8002e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e9e:	f107 031c 	add.w	r3, r7, #28
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	4835      	ldr	r0, [pc, #212]	; (8002f7c <HAL_I2C_MspInit+0x130>)
 8002ea6:	f000 fcc1 	bl	800382c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002eaa:	2300      	movs	r3, #0
 8002eac:	617b      	str	r3, [r7, #20]
 8002eae:	4b32      	ldr	r3, [pc, #200]	; (8002f78 <HAL_I2C_MspInit+0x12c>)
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb2:	4a31      	ldr	r2, [pc, #196]	; (8002f78 <HAL_I2C_MspInit+0x12c>)
 8002eb4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eba:	4b2f      	ldr	r3, [pc, #188]	; (8002f78 <HAL_I2C_MspInit+0x12c>)
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ec2:	617b      	str	r3, [r7, #20]
 8002ec4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002ec6:	e050      	b.n	8002f6a <HAL_I2C_MspInit+0x11e>
  else if(hi2c->Instance==I2C3)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a2c      	ldr	r2, [pc, #176]	; (8002f80 <HAL_I2C_MspInit+0x134>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d14b      	bne.n	8002f6a <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	613b      	str	r3, [r7, #16]
 8002ed6:	4b28      	ldr	r3, [pc, #160]	; (8002f78 <HAL_I2C_MspInit+0x12c>)
 8002ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eda:	4a27      	ldr	r2, [pc, #156]	; (8002f78 <HAL_I2C_MspInit+0x12c>)
 8002edc:	f043 0304 	orr.w	r3, r3, #4
 8002ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ee2:	4b25      	ldr	r3, [pc, #148]	; (8002f78 <HAL_I2C_MspInit+0x12c>)
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee6:	f003 0304 	and.w	r3, r3, #4
 8002eea:	613b      	str	r3, [r7, #16]
 8002eec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eee:	2300      	movs	r3, #0
 8002ef0:	60fb      	str	r3, [r7, #12]
 8002ef2:	4b21      	ldr	r3, [pc, #132]	; (8002f78 <HAL_I2C_MspInit+0x12c>)
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef6:	4a20      	ldr	r2, [pc, #128]	; (8002f78 <HAL_I2C_MspInit+0x12c>)
 8002ef8:	f043 0301 	orr.w	r3, r3, #1
 8002efc:	6313      	str	r3, [r2, #48]	; 0x30
 8002efe:	4b1e      	ldr	r3, [pc, #120]	; (8002f78 <HAL_I2C_MspInit+0x12c>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	60fb      	str	r3, [r7, #12]
 8002f08:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002f0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f10:	2312      	movs	r3, #18
 8002f12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f14:	2300      	movs	r3, #0
 8002f16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002f1c:	2304      	movs	r3, #4
 8002f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f20:	f107 031c 	add.w	r3, r7, #28
 8002f24:	4619      	mov	r1, r3
 8002f26:	4817      	ldr	r0, [pc, #92]	; (8002f84 <HAL_I2C_MspInit+0x138>)
 8002f28:	f000 fc80 	bl	800382c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002f2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f32:	2312      	movs	r3, #18
 8002f34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f36:	2300      	movs	r3, #0
 8002f38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002f3e:	2304      	movs	r3, #4
 8002f40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f42:	f107 031c 	add.w	r3, r7, #28
 8002f46:	4619      	mov	r1, r3
 8002f48:	480f      	ldr	r0, [pc, #60]	; (8002f88 <HAL_I2C_MspInit+0x13c>)
 8002f4a:	f000 fc6f 	bl	800382c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002f4e:	2300      	movs	r3, #0
 8002f50:	60bb      	str	r3, [r7, #8]
 8002f52:	4b09      	ldr	r3, [pc, #36]	; (8002f78 <HAL_I2C_MspInit+0x12c>)
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	4a08      	ldr	r2, [pc, #32]	; (8002f78 <HAL_I2C_MspInit+0x12c>)
 8002f58:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f5c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f5e:	4b06      	ldr	r3, [pc, #24]	; (8002f78 <HAL_I2C_MspInit+0x12c>)
 8002f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f66:	60bb      	str	r3, [r7, #8]
 8002f68:	68bb      	ldr	r3, [r7, #8]
}
 8002f6a:	bf00      	nop
 8002f6c:	3730      	adds	r7, #48	; 0x30
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	40005400 	.word	0x40005400
 8002f78:	40023800 	.word	0x40023800
 8002f7c:	40020400 	.word	0x40020400
 8002f80:	40005c00 	.word	0x40005c00
 8002f84:	40020800 	.word	0x40020800
 8002f88:	40020000 	.word	0x40020000

08002f8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b08a      	sub	sp, #40	; 0x28
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f94:	f107 0314 	add.w	r3, r7, #20
 8002f98:	2200      	movs	r2, #0
 8002f9a:	601a      	str	r2, [r3, #0]
 8002f9c:	605a      	str	r2, [r3, #4]
 8002f9e:	609a      	str	r2, [r3, #8]
 8002fa0:	60da      	str	r2, [r3, #12]
 8002fa2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a19      	ldr	r2, [pc, #100]	; (8003010 <HAL_SPI_MspInit+0x84>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d12b      	bne.n	8003006 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002fae:	2300      	movs	r3, #0
 8002fb0:	613b      	str	r3, [r7, #16]
 8002fb2:	4b18      	ldr	r3, [pc, #96]	; (8003014 <HAL_SPI_MspInit+0x88>)
 8002fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb6:	4a17      	ldr	r2, [pc, #92]	; (8003014 <HAL_SPI_MspInit+0x88>)
 8002fb8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002fbc:	6453      	str	r3, [r2, #68]	; 0x44
 8002fbe:	4b15      	ldr	r3, [pc, #84]	; (8003014 <HAL_SPI_MspInit+0x88>)
 8002fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fc6:	613b      	str	r3, [r7, #16]
 8002fc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fca:	2300      	movs	r3, #0
 8002fcc:	60fb      	str	r3, [r7, #12]
 8002fce:	4b11      	ldr	r3, [pc, #68]	; (8003014 <HAL_SPI_MspInit+0x88>)
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd2:	4a10      	ldr	r2, [pc, #64]	; (8003014 <HAL_SPI_MspInit+0x88>)
 8002fd4:	f043 0301 	orr.w	r3, r3, #1
 8002fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fda:	4b0e      	ldr	r3, [pc, #56]	; (8003014 <HAL_SPI_MspInit+0x88>)
 8002fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	60fb      	str	r3, [r7, #12]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002fe6:	23e0      	movs	r3, #224	; 0xe0
 8002fe8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fea:	2302      	movs	r3, #2
 8002fec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002ff6:	2305      	movs	r3, #5
 8002ff8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ffa:	f107 0314 	add.w	r3, r7, #20
 8002ffe:	4619      	mov	r1, r3
 8003000:	4805      	ldr	r0, [pc, #20]	; (8003018 <HAL_SPI_MspInit+0x8c>)
 8003002:	f000 fc13 	bl	800382c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003006:	bf00      	nop
 8003008:	3728      	adds	r7, #40	; 0x28
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	40013000 	.word	0x40013000
 8003014:	40023800 	.word	0x40023800
 8003018:	40020000 	.word	0x40020000

0800301c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a0e      	ldr	r2, [pc, #56]	; (8003064 <HAL_TIM_Base_MspInit+0x48>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d115      	bne.n	800305a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800302e:	2300      	movs	r3, #0
 8003030:	60fb      	str	r3, [r7, #12]
 8003032:	4b0d      	ldr	r3, [pc, #52]	; (8003068 <HAL_TIM_Base_MspInit+0x4c>)
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	4a0c      	ldr	r2, [pc, #48]	; (8003068 <HAL_TIM_Base_MspInit+0x4c>)
 8003038:	f043 0302 	orr.w	r3, r3, #2
 800303c:	6413      	str	r3, [r2, #64]	; 0x40
 800303e:	4b0a      	ldr	r3, [pc, #40]	; (8003068 <HAL_TIM_Base_MspInit+0x4c>)
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	60fb      	str	r3, [r7, #12]
 8003048:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800304a:	2200      	movs	r2, #0
 800304c:	2100      	movs	r1, #0
 800304e:	201d      	movs	r0, #29
 8003050:	f000 fa7d 	bl	800354e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003054:	201d      	movs	r0, #29
 8003056:	f000 fa96 	bl	8003586 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800305a:	bf00      	nop
 800305c:	3710      	adds	r7, #16
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	40000400 	.word	0x40000400
 8003068:	40023800 	.word	0x40023800

0800306c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b08a      	sub	sp, #40	; 0x28
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003074:	f107 0314 	add.w	r3, r7, #20
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]
 800307c:	605a      	str	r2, [r3, #4]
 800307e:	609a      	str	r2, [r3, #8]
 8003080:	60da      	str	r2, [r3, #12]
 8003082:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a1d      	ldr	r2, [pc, #116]	; (8003100 <HAL_UART_MspInit+0x94>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d133      	bne.n	80030f6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800308e:	2300      	movs	r3, #0
 8003090:	613b      	str	r3, [r7, #16]
 8003092:	4b1c      	ldr	r3, [pc, #112]	; (8003104 <HAL_UART_MspInit+0x98>)
 8003094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003096:	4a1b      	ldr	r2, [pc, #108]	; (8003104 <HAL_UART_MspInit+0x98>)
 8003098:	f043 0320 	orr.w	r3, r3, #32
 800309c:	6453      	str	r3, [r2, #68]	; 0x44
 800309e:	4b19      	ldr	r3, [pc, #100]	; (8003104 <HAL_UART_MspInit+0x98>)
 80030a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a2:	f003 0320 	and.w	r3, r3, #32
 80030a6:	613b      	str	r3, [r7, #16]
 80030a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030aa:	2300      	movs	r3, #0
 80030ac:	60fb      	str	r3, [r7, #12]
 80030ae:	4b15      	ldr	r3, [pc, #84]	; (8003104 <HAL_UART_MspInit+0x98>)
 80030b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b2:	4a14      	ldr	r2, [pc, #80]	; (8003104 <HAL_UART_MspInit+0x98>)
 80030b4:	f043 0304 	orr.w	r3, r3, #4
 80030b8:	6313      	str	r3, [r2, #48]	; 0x30
 80030ba:	4b12      	ldr	r3, [pc, #72]	; (8003104 <HAL_UART_MspInit+0x98>)
 80030bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030be:	f003 0304 	and.w	r3, r3, #4
 80030c2:	60fb      	str	r3, [r7, #12]
 80030c4:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80030c6:	23c0      	movs	r3, #192	; 0xc0
 80030c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ca:	2302      	movs	r3, #2
 80030cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ce:	2300      	movs	r3, #0
 80030d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030d2:	2303      	movs	r3, #3
 80030d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80030d6:	2308      	movs	r3, #8
 80030d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030da:	f107 0314 	add.w	r3, r7, #20
 80030de:	4619      	mov	r1, r3
 80030e0:	4809      	ldr	r0, [pc, #36]	; (8003108 <HAL_UART_MspInit+0x9c>)
 80030e2:	f000 fba3 	bl	800382c <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80030e6:	2200      	movs	r2, #0
 80030e8:	2100      	movs	r1, #0
 80030ea:	2047      	movs	r0, #71	; 0x47
 80030ec:	f000 fa2f 	bl	800354e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80030f0:	2047      	movs	r0, #71	; 0x47
 80030f2:	f000 fa48 	bl	8003586 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80030f6:	bf00      	nop
 80030f8:	3728      	adds	r7, #40	; 0x28
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	40011400 	.word	0x40011400
 8003104:	40023800 	.word	0x40023800
 8003108:	40020800 	.word	0x40020800

0800310c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003110:	e7fe      	b.n	8003110 <NMI_Handler+0x4>

08003112 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003112:	b480      	push	{r7}
 8003114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003116:	e7fe      	b.n	8003116 <HardFault_Handler+0x4>

08003118 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800311c:	e7fe      	b.n	800311c <MemManage_Handler+0x4>

0800311e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800311e:	b480      	push	{r7}
 8003120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003122:	e7fe      	b.n	8003122 <BusFault_Handler+0x4>

08003124 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003128:	e7fe      	b.n	8003128 <UsageFault_Handler+0x4>

0800312a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800312a:	b480      	push	{r7}
 800312c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800312e:	bf00      	nop
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800313c:	bf00      	nop
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr

08003146 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003146:	b480      	push	{r7}
 8003148:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800314a:	bf00      	nop
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003158:	f000 f8da 	bl	8003310 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800315c:	bf00      	nop
 800315e:	bd80      	pop	{r7, pc}

08003160 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003164:	4802      	ldr	r0, [pc, #8]	; (8003170 <TIM3_IRQHandler+0x10>)
 8003166:	f002 fced 	bl	8005b44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800316a:	bf00      	nop
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	200002a0 	.word	0x200002a0

08003174 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003178:	4802      	ldr	r0, [pc, #8]	; (8003184 <USART6_IRQHandler+0x10>)
 800317a:	f003 f987 	bl	800648c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800317e:	bf00      	nop
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	200002e8 	.word	0x200002e8

08003188 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003190:	4a14      	ldr	r2, [pc, #80]	; (80031e4 <_sbrk+0x5c>)
 8003192:	4b15      	ldr	r3, [pc, #84]	; (80031e8 <_sbrk+0x60>)
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800319c:	4b13      	ldr	r3, [pc, #76]	; (80031ec <_sbrk+0x64>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d102      	bne.n	80031aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031a4:	4b11      	ldr	r3, [pc, #68]	; (80031ec <_sbrk+0x64>)
 80031a6:	4a12      	ldr	r2, [pc, #72]	; (80031f0 <_sbrk+0x68>)
 80031a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031aa:	4b10      	ldr	r3, [pc, #64]	; (80031ec <_sbrk+0x64>)
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4413      	add	r3, r2
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d207      	bcs.n	80031c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031b8:	f004 f93c 	bl	8007434 <__errno>
 80031bc:	4603      	mov	r3, r0
 80031be:	220c      	movs	r2, #12
 80031c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031c2:	f04f 33ff 	mov.w	r3, #4294967295
 80031c6:	e009      	b.n	80031dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031c8:	4b08      	ldr	r3, [pc, #32]	; (80031ec <_sbrk+0x64>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031ce:	4b07      	ldr	r3, [pc, #28]	; (80031ec <_sbrk+0x64>)
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4413      	add	r3, r2
 80031d6:	4a05      	ldr	r2, [pc, #20]	; (80031ec <_sbrk+0x64>)
 80031d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031da:	68fb      	ldr	r3, [r7, #12]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3718      	adds	r7, #24
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	20020000 	.word	0x20020000
 80031e8:	00000400 	.word	0x00000400
 80031ec:	20000380 	.word	0x20000380
 80031f0:	200004f0 	.word	0x200004f0

080031f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031f8:	4b06      	ldr	r3, [pc, #24]	; (8003214 <SystemInit+0x20>)
 80031fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031fe:	4a05      	ldr	r2, [pc, #20]	; (8003214 <SystemInit+0x20>)
 8003200:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003204:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003208:	bf00      	nop
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr
 8003212:	bf00      	nop
 8003214:	e000ed00 	.word	0xe000ed00

08003218 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003218:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003250 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800321c:	480d      	ldr	r0, [pc, #52]	; (8003254 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800321e:	490e      	ldr	r1, [pc, #56]	; (8003258 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003220:	4a0e      	ldr	r2, [pc, #56]	; (800325c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003222:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003224:	e002      	b.n	800322c <LoopCopyDataInit>

08003226 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003226:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003228:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800322a:	3304      	adds	r3, #4

0800322c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800322c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800322e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003230:	d3f9      	bcc.n	8003226 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003232:	4a0b      	ldr	r2, [pc, #44]	; (8003260 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003234:	4c0b      	ldr	r4, [pc, #44]	; (8003264 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003236:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003238:	e001      	b.n	800323e <LoopFillZerobss>

0800323a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800323a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800323c:	3204      	adds	r2, #4

0800323e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800323e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003240:	d3fb      	bcc.n	800323a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003242:	f7ff ffd7 	bl	80031f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003246:	f004 f8fb 	bl	8007440 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800324a:	f7ff f9e3 	bl	8002614 <main>
  bx  lr    
 800324e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003250:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003254:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003258:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800325c:	08007f48 	.word	0x08007f48
  ldr r2, =_sbss
 8003260:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8003264:	200004f0 	.word	0x200004f0

08003268 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003268:	e7fe      	b.n	8003268 <ADC_IRQHandler>
	...

0800326c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003270:	4b0e      	ldr	r3, [pc, #56]	; (80032ac <HAL_Init+0x40>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a0d      	ldr	r2, [pc, #52]	; (80032ac <HAL_Init+0x40>)
 8003276:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800327a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800327c:	4b0b      	ldr	r3, [pc, #44]	; (80032ac <HAL_Init+0x40>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a0a      	ldr	r2, [pc, #40]	; (80032ac <HAL_Init+0x40>)
 8003282:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003286:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003288:	4b08      	ldr	r3, [pc, #32]	; (80032ac <HAL_Init+0x40>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a07      	ldr	r2, [pc, #28]	; (80032ac <HAL_Init+0x40>)
 800328e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003292:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003294:	2003      	movs	r0, #3
 8003296:	f000 f94f 	bl	8003538 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800329a:	200f      	movs	r0, #15
 800329c:	f000 f808 	bl	80032b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032a0:	f7ff fdac 	bl	8002dfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	40023c00 	.word	0x40023c00

080032b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032b8:	4b12      	ldr	r3, [pc, #72]	; (8003304 <HAL_InitTick+0x54>)
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	4b12      	ldr	r3, [pc, #72]	; (8003308 <HAL_InitTick+0x58>)
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	4619      	mov	r1, r3
 80032c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80032ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80032ce:	4618      	mov	r0, r3
 80032d0:	f000 f967 	bl	80035a2 <HAL_SYSTICK_Config>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e00e      	b.n	80032fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	2b0f      	cmp	r3, #15
 80032e2:	d80a      	bhi.n	80032fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032e4:	2200      	movs	r2, #0
 80032e6:	6879      	ldr	r1, [r7, #4]
 80032e8:	f04f 30ff 	mov.w	r0, #4294967295
 80032ec:	f000 f92f 	bl	800354e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80032f0:	4a06      	ldr	r2, [pc, #24]	; (800330c <HAL_InitTick+0x5c>)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
 80032f8:	e000      	b.n	80032fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3708      	adds	r7, #8
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	20000008 	.word	0x20000008
 8003308:	20000010 	.word	0x20000010
 800330c:	2000000c 	.word	0x2000000c

08003310 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003310:	b480      	push	{r7}
 8003312:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003314:	4b06      	ldr	r3, [pc, #24]	; (8003330 <HAL_IncTick+0x20>)
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	461a      	mov	r2, r3
 800331a:	4b06      	ldr	r3, [pc, #24]	; (8003334 <HAL_IncTick+0x24>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4413      	add	r3, r2
 8003320:	4a04      	ldr	r2, [pc, #16]	; (8003334 <HAL_IncTick+0x24>)
 8003322:	6013      	str	r3, [r2, #0]
}
 8003324:	bf00      	nop
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	20000010 	.word	0x20000010
 8003334:	20000384 	.word	0x20000384

08003338 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003338:	b480      	push	{r7}
 800333a:	af00      	add	r7, sp, #0
  return uwTick;
 800333c:	4b03      	ldr	r3, [pc, #12]	; (800334c <HAL_GetTick+0x14>)
 800333e:	681b      	ldr	r3, [r3, #0]
}
 8003340:	4618      	mov	r0, r3
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	20000384 	.word	0x20000384

08003350 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003358:	f7ff ffee 	bl	8003338 <HAL_GetTick>
 800335c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003368:	d005      	beq.n	8003376 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800336a:	4b0a      	ldr	r3, [pc, #40]	; (8003394 <HAL_Delay+0x44>)
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	461a      	mov	r2, r3
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	4413      	add	r3, r2
 8003374:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003376:	bf00      	nop
 8003378:	f7ff ffde 	bl	8003338 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	429a      	cmp	r2, r3
 8003386:	d8f7      	bhi.n	8003378 <HAL_Delay+0x28>
  {
  }
}
 8003388:	bf00      	nop
 800338a:	bf00      	nop
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	20000010 	.word	0x20000010

08003398 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f003 0307 	and.w	r3, r3, #7
 80033a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033a8:	4b0c      	ldr	r3, [pc, #48]	; (80033dc <__NVIC_SetPriorityGrouping+0x44>)
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033ae:	68ba      	ldr	r2, [r7, #8]
 80033b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033b4:	4013      	ands	r3, r2
 80033b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033ca:	4a04      	ldr	r2, [pc, #16]	; (80033dc <__NVIC_SetPriorityGrouping+0x44>)
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	60d3      	str	r3, [r2, #12]
}
 80033d0:	bf00      	nop
 80033d2:	3714      	adds	r7, #20
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr
 80033dc:	e000ed00 	.word	0xe000ed00

080033e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033e4:	4b04      	ldr	r3, [pc, #16]	; (80033f8 <__NVIC_GetPriorityGrouping+0x18>)
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	0a1b      	lsrs	r3, r3, #8
 80033ea:	f003 0307 	and.w	r3, r3, #7
}
 80033ee:	4618      	mov	r0, r3
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr
 80033f8:	e000ed00 	.word	0xe000ed00

080033fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	4603      	mov	r3, r0
 8003404:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800340a:	2b00      	cmp	r3, #0
 800340c:	db0b      	blt.n	8003426 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800340e:	79fb      	ldrb	r3, [r7, #7]
 8003410:	f003 021f 	and.w	r2, r3, #31
 8003414:	4907      	ldr	r1, [pc, #28]	; (8003434 <__NVIC_EnableIRQ+0x38>)
 8003416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800341a:	095b      	lsrs	r3, r3, #5
 800341c:	2001      	movs	r0, #1
 800341e:	fa00 f202 	lsl.w	r2, r0, r2
 8003422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003426:	bf00      	nop
 8003428:	370c      	adds	r7, #12
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	e000e100 	.word	0xe000e100

08003438 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	4603      	mov	r3, r0
 8003440:	6039      	str	r1, [r7, #0]
 8003442:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003448:	2b00      	cmp	r3, #0
 800344a:	db0a      	blt.n	8003462 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	b2da      	uxtb	r2, r3
 8003450:	490c      	ldr	r1, [pc, #48]	; (8003484 <__NVIC_SetPriority+0x4c>)
 8003452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003456:	0112      	lsls	r2, r2, #4
 8003458:	b2d2      	uxtb	r2, r2
 800345a:	440b      	add	r3, r1
 800345c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003460:	e00a      	b.n	8003478 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	b2da      	uxtb	r2, r3
 8003466:	4908      	ldr	r1, [pc, #32]	; (8003488 <__NVIC_SetPriority+0x50>)
 8003468:	79fb      	ldrb	r3, [r7, #7]
 800346a:	f003 030f 	and.w	r3, r3, #15
 800346e:	3b04      	subs	r3, #4
 8003470:	0112      	lsls	r2, r2, #4
 8003472:	b2d2      	uxtb	r2, r2
 8003474:	440b      	add	r3, r1
 8003476:	761a      	strb	r2, [r3, #24]
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	e000e100 	.word	0xe000e100
 8003488:	e000ed00 	.word	0xe000ed00

0800348c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800348c:	b480      	push	{r7}
 800348e:	b089      	sub	sp, #36	; 0x24
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f003 0307 	and.w	r3, r3, #7
 800349e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	f1c3 0307 	rsb	r3, r3, #7
 80034a6:	2b04      	cmp	r3, #4
 80034a8:	bf28      	it	cs
 80034aa:	2304      	movcs	r3, #4
 80034ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	3304      	adds	r3, #4
 80034b2:	2b06      	cmp	r3, #6
 80034b4:	d902      	bls.n	80034bc <NVIC_EncodePriority+0x30>
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	3b03      	subs	r3, #3
 80034ba:	e000      	b.n	80034be <NVIC_EncodePriority+0x32>
 80034bc:	2300      	movs	r3, #0
 80034be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034c0:	f04f 32ff 	mov.w	r2, #4294967295
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ca:	43da      	mvns	r2, r3
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	401a      	ands	r2, r3
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034d4:	f04f 31ff 	mov.w	r1, #4294967295
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	fa01 f303 	lsl.w	r3, r1, r3
 80034de:	43d9      	mvns	r1, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034e4:	4313      	orrs	r3, r2
         );
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3724      	adds	r7, #36	; 0x24
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
	...

080034f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	3b01      	subs	r3, #1
 8003500:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003504:	d301      	bcc.n	800350a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003506:	2301      	movs	r3, #1
 8003508:	e00f      	b.n	800352a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800350a:	4a0a      	ldr	r2, [pc, #40]	; (8003534 <SysTick_Config+0x40>)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	3b01      	subs	r3, #1
 8003510:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003512:	210f      	movs	r1, #15
 8003514:	f04f 30ff 	mov.w	r0, #4294967295
 8003518:	f7ff ff8e 	bl	8003438 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800351c:	4b05      	ldr	r3, [pc, #20]	; (8003534 <SysTick_Config+0x40>)
 800351e:	2200      	movs	r2, #0
 8003520:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003522:	4b04      	ldr	r3, [pc, #16]	; (8003534 <SysTick_Config+0x40>)
 8003524:	2207      	movs	r2, #7
 8003526:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3708      	adds	r7, #8
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	e000e010 	.word	0xe000e010

08003538 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003540:	6878      	ldr	r0, [r7, #4]
 8003542:	f7ff ff29 	bl	8003398 <__NVIC_SetPriorityGrouping>
}
 8003546:	bf00      	nop
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800354e:	b580      	push	{r7, lr}
 8003550:	b086      	sub	sp, #24
 8003552:	af00      	add	r7, sp, #0
 8003554:	4603      	mov	r3, r0
 8003556:	60b9      	str	r1, [r7, #8]
 8003558:	607a      	str	r2, [r7, #4]
 800355a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800355c:	2300      	movs	r3, #0
 800355e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003560:	f7ff ff3e 	bl	80033e0 <__NVIC_GetPriorityGrouping>
 8003564:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	68b9      	ldr	r1, [r7, #8]
 800356a:	6978      	ldr	r0, [r7, #20]
 800356c:	f7ff ff8e 	bl	800348c <NVIC_EncodePriority>
 8003570:	4602      	mov	r2, r0
 8003572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003576:	4611      	mov	r1, r2
 8003578:	4618      	mov	r0, r3
 800357a:	f7ff ff5d 	bl	8003438 <__NVIC_SetPriority>
}
 800357e:	bf00      	nop
 8003580:	3718      	adds	r7, #24
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b082      	sub	sp, #8
 800358a:	af00      	add	r7, sp, #0
 800358c:	4603      	mov	r3, r0
 800358e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003594:	4618      	mov	r0, r3
 8003596:	f7ff ff31 	bl	80033fc <__NVIC_EnableIRQ>
}
 800359a:	bf00      	nop
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b082      	sub	sp, #8
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f7ff ffa2 	bl	80034f4 <SysTick_Config>
 80035b0:	4603      	mov	r3, r0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035ba:	b580      	push	{r7, lr}
 80035bc:	b084      	sub	sp, #16
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80035c8:	f7ff feb6 	bl	8003338 <HAL_GetTick>
 80035cc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d008      	beq.n	80035ec <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2280      	movs	r2, #128	; 0x80
 80035de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e052      	b.n	8003692 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f022 0216 	bic.w	r2, r2, #22
 80035fa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	695a      	ldr	r2, [r3, #20]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800360a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003610:	2b00      	cmp	r3, #0
 8003612:	d103      	bne.n	800361c <HAL_DMA_Abort+0x62>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003618:	2b00      	cmp	r3, #0
 800361a:	d007      	beq.n	800362c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f022 0208 	bic.w	r2, r2, #8
 800362a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f022 0201 	bic.w	r2, r2, #1
 800363a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800363c:	e013      	b.n	8003666 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800363e:	f7ff fe7b 	bl	8003338 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	2b05      	cmp	r3, #5
 800364a:	d90c      	bls.n	8003666 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2220      	movs	r2, #32
 8003650:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2203      	movs	r2, #3
 8003656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e015      	b.n	8003692 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1e4      	bne.n	800363e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003678:	223f      	movs	r2, #63	; 0x3f
 800367a:	409a      	lsls	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3710      	adds	r7, #16
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}

0800369a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800369a:	b480      	push	{r7}
 800369c:	b083      	sub	sp, #12
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d004      	beq.n	80036b8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2280      	movs	r2, #128	; 0x80
 80036b2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e00c      	b.n	80036d2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2205      	movs	r2, #5
 80036bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 0201 	bic.w	r2, r2, #1
 80036ce:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	370c      	adds	r7, #12
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
	...

080036e0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036e8:	2300      	movs	r3, #0
 80036ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80036ec:	4b1a      	ldr	r3, [pc, #104]	; (8003758 <FLASH_WaitForLastOperation+0x78>)
 80036ee:	2200      	movs	r2, #0
 80036f0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80036f2:	f7ff fe21 	bl	8003338 <HAL_GetTick>
 80036f6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80036f8:	e010      	b.n	800371c <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003700:	d00c      	beq.n	800371c <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d007      	beq.n	8003718 <FLASH_WaitForLastOperation+0x38>
 8003708:	f7ff fe16 	bl	8003338 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	429a      	cmp	r2, r3
 8003716:	d201      	bcs.n	800371c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8003718:	2303      	movs	r3, #3
 800371a:	e019      	b.n	8003750 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800371c:	4b0f      	ldr	r3, [pc, #60]	; (800375c <FLASH_WaitForLastOperation+0x7c>)
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1e8      	bne.n	80036fa <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003728:	4b0c      	ldr	r3, [pc, #48]	; (800375c <FLASH_WaitForLastOperation+0x7c>)
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	f003 0301 	and.w	r3, r3, #1
 8003730:	2b00      	cmp	r3, #0
 8003732:	d002      	beq.n	800373a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003734:	4b09      	ldr	r3, [pc, #36]	; (800375c <FLASH_WaitForLastOperation+0x7c>)
 8003736:	2201      	movs	r2, #1
 8003738:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800373a:	4b08      	ldr	r3, [pc, #32]	; (800375c <FLASH_WaitForLastOperation+0x7c>)
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d003      	beq.n	800374e <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003746:	f000 f80b 	bl	8003760 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e000      	b.n	8003750 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800374e:	2300      	movs	r3, #0
  
}  
 8003750:	4618      	mov	r0, r3
 8003752:	3710      	adds	r7, #16
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	20000388 	.word	0x20000388
 800375c:	40023c00 	.word	0x40023c00

08003760 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003764:	4b2f      	ldr	r3, [pc, #188]	; (8003824 <FLASH_SetErrorCode+0xc4>)
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	f003 0310 	and.w	r3, r3, #16
 800376c:	2b00      	cmp	r3, #0
 800376e:	d008      	beq.n	8003782 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003770:	4b2d      	ldr	r3, [pc, #180]	; (8003828 <FLASH_SetErrorCode+0xc8>)
 8003772:	69db      	ldr	r3, [r3, #28]
 8003774:	f043 0310 	orr.w	r3, r3, #16
 8003778:	4a2b      	ldr	r2, [pc, #172]	; (8003828 <FLASH_SetErrorCode+0xc8>)
 800377a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800377c:	4b29      	ldr	r3, [pc, #164]	; (8003824 <FLASH_SetErrorCode+0xc4>)
 800377e:	2210      	movs	r2, #16
 8003780:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8003782:	4b28      	ldr	r3, [pc, #160]	; (8003824 <FLASH_SetErrorCode+0xc4>)
 8003784:	68db      	ldr	r3, [r3, #12]
 8003786:	f003 0320 	and.w	r3, r3, #32
 800378a:	2b00      	cmp	r3, #0
 800378c:	d008      	beq.n	80037a0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800378e:	4b26      	ldr	r3, [pc, #152]	; (8003828 <FLASH_SetErrorCode+0xc8>)
 8003790:	69db      	ldr	r3, [r3, #28]
 8003792:	f043 0308 	orr.w	r3, r3, #8
 8003796:	4a24      	ldr	r2, [pc, #144]	; (8003828 <FLASH_SetErrorCode+0xc8>)
 8003798:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800379a:	4b22      	ldr	r3, [pc, #136]	; (8003824 <FLASH_SetErrorCode+0xc4>)
 800379c:	2220      	movs	r2, #32
 800379e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80037a0:	4b20      	ldr	r3, [pc, #128]	; (8003824 <FLASH_SetErrorCode+0xc4>)
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d008      	beq.n	80037be <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80037ac:	4b1e      	ldr	r3, [pc, #120]	; (8003828 <FLASH_SetErrorCode+0xc8>)
 80037ae:	69db      	ldr	r3, [r3, #28]
 80037b0:	f043 0304 	orr.w	r3, r3, #4
 80037b4:	4a1c      	ldr	r2, [pc, #112]	; (8003828 <FLASH_SetErrorCode+0xc8>)
 80037b6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80037b8:	4b1a      	ldr	r3, [pc, #104]	; (8003824 <FLASH_SetErrorCode+0xc4>)
 80037ba:	2240      	movs	r2, #64	; 0x40
 80037bc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80037be:	4b19      	ldr	r3, [pc, #100]	; (8003824 <FLASH_SetErrorCode+0xc4>)
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d008      	beq.n	80037dc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80037ca:	4b17      	ldr	r3, [pc, #92]	; (8003828 <FLASH_SetErrorCode+0xc8>)
 80037cc:	69db      	ldr	r3, [r3, #28]
 80037ce:	f043 0302 	orr.w	r3, r3, #2
 80037d2:	4a15      	ldr	r2, [pc, #84]	; (8003828 <FLASH_SetErrorCode+0xc8>)
 80037d4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80037d6:	4b13      	ldr	r3, [pc, #76]	; (8003824 <FLASH_SetErrorCode+0xc4>)
 80037d8:	2280      	movs	r2, #128	; 0x80
 80037da:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80037dc:	4b11      	ldr	r3, [pc, #68]	; (8003824 <FLASH_SetErrorCode+0xc4>)
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d009      	beq.n	80037fc <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80037e8:	4b0f      	ldr	r3, [pc, #60]	; (8003828 <FLASH_SetErrorCode+0xc8>)
 80037ea:	69db      	ldr	r3, [r3, #28]
 80037ec:	f043 0301 	orr.w	r3, r3, #1
 80037f0:	4a0d      	ldr	r2, [pc, #52]	; (8003828 <FLASH_SetErrorCode+0xc8>)
 80037f2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80037f4:	4b0b      	ldr	r3, [pc, #44]	; (8003824 <FLASH_SetErrorCode+0xc4>)
 80037f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037fa:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80037fc:	4b09      	ldr	r3, [pc, #36]	; (8003824 <FLASH_SetErrorCode+0xc4>)
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	f003 0302 	and.w	r3, r3, #2
 8003804:	2b00      	cmp	r3, #0
 8003806:	d008      	beq.n	800381a <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003808:	4b07      	ldr	r3, [pc, #28]	; (8003828 <FLASH_SetErrorCode+0xc8>)
 800380a:	69db      	ldr	r3, [r3, #28]
 800380c:	f043 0320 	orr.w	r3, r3, #32
 8003810:	4a05      	ldr	r2, [pc, #20]	; (8003828 <FLASH_SetErrorCode+0xc8>)
 8003812:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003814:	4b03      	ldr	r3, [pc, #12]	; (8003824 <FLASH_SetErrorCode+0xc4>)
 8003816:	2202      	movs	r2, #2
 8003818:	60da      	str	r2, [r3, #12]
  }
}
 800381a:	bf00      	nop
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr
 8003824:	40023c00 	.word	0x40023c00
 8003828:	20000388 	.word	0x20000388

0800382c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800382c:	b480      	push	{r7}
 800382e:	b089      	sub	sp, #36	; 0x24
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003836:	2300      	movs	r3, #0
 8003838:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800383a:	2300      	movs	r3, #0
 800383c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800383e:	2300      	movs	r3, #0
 8003840:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003842:	2300      	movs	r3, #0
 8003844:	61fb      	str	r3, [r7, #28]
 8003846:	e159      	b.n	8003afc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003848:	2201      	movs	r2, #1
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	fa02 f303 	lsl.w	r3, r2, r3
 8003850:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	4013      	ands	r3, r2
 800385a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	429a      	cmp	r2, r3
 8003862:	f040 8148 	bne.w	8003af6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f003 0303 	and.w	r3, r3, #3
 800386e:	2b01      	cmp	r3, #1
 8003870:	d005      	beq.n	800387e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800387a:	2b02      	cmp	r3, #2
 800387c:	d130      	bne.n	80038e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	2203      	movs	r2, #3
 800388a:	fa02 f303 	lsl.w	r3, r2, r3
 800388e:	43db      	mvns	r3, r3
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	4013      	ands	r3, r2
 8003894:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	68da      	ldr	r2, [r3, #12]
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	fa02 f303 	lsl.w	r3, r2, r3
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038b4:	2201      	movs	r2, #1
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	fa02 f303 	lsl.w	r3, r2, r3
 80038bc:	43db      	mvns	r3, r3
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	4013      	ands	r3, r2
 80038c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	091b      	lsrs	r3, r3, #4
 80038ca:	f003 0201 	and.w	r2, r3, #1
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f003 0303 	and.w	r3, r3, #3
 80038e8:	2b03      	cmp	r3, #3
 80038ea:	d017      	beq.n	800391c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	2203      	movs	r2, #3
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	43db      	mvns	r3, r3
 80038fe:	69ba      	ldr	r2, [r7, #24]
 8003900:	4013      	ands	r3, r2
 8003902:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	689a      	ldr	r2, [r3, #8]
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	005b      	lsls	r3, r3, #1
 800390c:	fa02 f303 	lsl.w	r3, r2, r3
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	4313      	orrs	r3, r2
 8003914:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f003 0303 	and.w	r3, r3, #3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d123      	bne.n	8003970 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	08da      	lsrs	r2, r3, #3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	3208      	adds	r2, #8
 8003930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003934:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	f003 0307 	and.w	r3, r3, #7
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	220f      	movs	r2, #15
 8003940:	fa02 f303 	lsl.w	r3, r2, r3
 8003944:	43db      	mvns	r3, r3
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	4013      	ands	r3, r2
 800394a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	691a      	ldr	r2, [r3, #16]
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	f003 0307 	and.w	r3, r3, #7
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	fa02 f303 	lsl.w	r3, r2, r3
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	4313      	orrs	r3, r2
 8003960:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	08da      	lsrs	r2, r3, #3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	3208      	adds	r2, #8
 800396a:	69b9      	ldr	r1, [r7, #24]
 800396c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	2203      	movs	r2, #3
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	43db      	mvns	r3, r3
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	4013      	ands	r3, r2
 8003986:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f003 0203 	and.w	r2, r3, #3
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	fa02 f303 	lsl.w	r3, r2, r3
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	4313      	orrs	r3, r2
 800399c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f000 80a2 	beq.w	8003af6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039b2:	2300      	movs	r3, #0
 80039b4:	60fb      	str	r3, [r7, #12]
 80039b6:	4b57      	ldr	r3, [pc, #348]	; (8003b14 <HAL_GPIO_Init+0x2e8>)
 80039b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ba:	4a56      	ldr	r2, [pc, #344]	; (8003b14 <HAL_GPIO_Init+0x2e8>)
 80039bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039c0:	6453      	str	r3, [r2, #68]	; 0x44
 80039c2:	4b54      	ldr	r3, [pc, #336]	; (8003b14 <HAL_GPIO_Init+0x2e8>)
 80039c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039ca:	60fb      	str	r3, [r7, #12]
 80039cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039ce:	4a52      	ldr	r2, [pc, #328]	; (8003b18 <HAL_GPIO_Init+0x2ec>)
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	089b      	lsrs	r3, r3, #2
 80039d4:	3302      	adds	r3, #2
 80039d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	f003 0303 	and.w	r3, r3, #3
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	220f      	movs	r2, #15
 80039e6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ea:	43db      	mvns	r3, r3
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	4013      	ands	r3, r2
 80039f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a49      	ldr	r2, [pc, #292]	; (8003b1c <HAL_GPIO_Init+0x2f0>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d019      	beq.n	8003a2e <HAL_GPIO_Init+0x202>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a48      	ldr	r2, [pc, #288]	; (8003b20 <HAL_GPIO_Init+0x2f4>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d013      	beq.n	8003a2a <HAL_GPIO_Init+0x1fe>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a47      	ldr	r2, [pc, #284]	; (8003b24 <HAL_GPIO_Init+0x2f8>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d00d      	beq.n	8003a26 <HAL_GPIO_Init+0x1fa>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a46      	ldr	r2, [pc, #280]	; (8003b28 <HAL_GPIO_Init+0x2fc>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d007      	beq.n	8003a22 <HAL_GPIO_Init+0x1f6>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a45      	ldr	r2, [pc, #276]	; (8003b2c <HAL_GPIO_Init+0x300>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d101      	bne.n	8003a1e <HAL_GPIO_Init+0x1f2>
 8003a1a:	2304      	movs	r3, #4
 8003a1c:	e008      	b.n	8003a30 <HAL_GPIO_Init+0x204>
 8003a1e:	2307      	movs	r3, #7
 8003a20:	e006      	b.n	8003a30 <HAL_GPIO_Init+0x204>
 8003a22:	2303      	movs	r3, #3
 8003a24:	e004      	b.n	8003a30 <HAL_GPIO_Init+0x204>
 8003a26:	2302      	movs	r3, #2
 8003a28:	e002      	b.n	8003a30 <HAL_GPIO_Init+0x204>
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e000      	b.n	8003a30 <HAL_GPIO_Init+0x204>
 8003a2e:	2300      	movs	r3, #0
 8003a30:	69fa      	ldr	r2, [r7, #28]
 8003a32:	f002 0203 	and.w	r2, r2, #3
 8003a36:	0092      	lsls	r2, r2, #2
 8003a38:	4093      	lsls	r3, r2
 8003a3a:	69ba      	ldr	r2, [r7, #24]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a40:	4935      	ldr	r1, [pc, #212]	; (8003b18 <HAL_GPIO_Init+0x2ec>)
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	089b      	lsrs	r3, r3, #2
 8003a46:	3302      	adds	r3, #2
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a4e:	4b38      	ldr	r3, [pc, #224]	; (8003b30 <HAL_GPIO_Init+0x304>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	43db      	mvns	r3, r3
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d003      	beq.n	8003a72 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a6a:	69ba      	ldr	r2, [r7, #24]
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a72:	4a2f      	ldr	r2, [pc, #188]	; (8003b30 <HAL_GPIO_Init+0x304>)
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a78:	4b2d      	ldr	r3, [pc, #180]	; (8003b30 <HAL_GPIO_Init+0x304>)
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	43db      	mvns	r3, r3
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	4013      	ands	r3, r2
 8003a86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d003      	beq.n	8003a9c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003a94:	69ba      	ldr	r2, [r7, #24]
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a9c:	4a24      	ldr	r2, [pc, #144]	; (8003b30 <HAL_GPIO_Init+0x304>)
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003aa2:	4b23      	ldr	r3, [pc, #140]	; (8003b30 <HAL_GPIO_Init+0x304>)
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	43db      	mvns	r3, r3
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d003      	beq.n	8003ac6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ac6:	4a1a      	ldr	r2, [pc, #104]	; (8003b30 <HAL_GPIO_Init+0x304>)
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003acc:	4b18      	ldr	r3, [pc, #96]	; (8003b30 <HAL_GPIO_Init+0x304>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	43db      	mvns	r3, r3
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d003      	beq.n	8003af0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003af0:	4a0f      	ldr	r2, [pc, #60]	; (8003b30 <HAL_GPIO_Init+0x304>)
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	3301      	adds	r3, #1
 8003afa:	61fb      	str	r3, [r7, #28]
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	2b0f      	cmp	r3, #15
 8003b00:	f67f aea2 	bls.w	8003848 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b04:	bf00      	nop
 8003b06:	bf00      	nop
 8003b08:	3724      	adds	r7, #36	; 0x24
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	40023800 	.word	0x40023800
 8003b18:	40013800 	.word	0x40013800
 8003b1c:	40020000 	.word	0x40020000
 8003b20:	40020400 	.word	0x40020400
 8003b24:	40020800 	.word	0x40020800
 8003b28:	40020c00 	.word	0x40020c00
 8003b2c:	40021000 	.word	0x40021000
 8003b30:	40013c00 	.word	0x40013c00

08003b34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	691a      	ldr	r2, [r3, #16]
 8003b44:	887b      	ldrh	r3, [r7, #2]
 8003b46:	4013      	ands	r3, r2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d002      	beq.n	8003b52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	73fb      	strb	r3, [r7, #15]
 8003b50:	e001      	b.n	8003b56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b52:	2300      	movs	r3, #0
 8003b54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3714      	adds	r7, #20
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	807b      	strh	r3, [r7, #2]
 8003b70:	4613      	mov	r3, r2
 8003b72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b74:	787b      	ldrb	r3, [r7, #1]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d003      	beq.n	8003b82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b7a:	887a      	ldrh	r2, [r7, #2]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b80:	e003      	b.n	8003b8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b82:	887b      	ldrh	r3, [r7, #2]
 8003b84:	041a      	lsls	r2, r3, #16
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	619a      	str	r2, [r3, #24]
}
 8003b8a:	bf00      	nop
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
	...

08003b98 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e12b      	b.n	8003e02 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d106      	bne.n	8003bc4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f7ff f944 	bl	8002e4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2224      	movs	r2, #36	; 0x24
 8003bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f022 0201 	bic.w	r2, r2, #1
 8003bda:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003bea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bfa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003bfc:	f001 fbd2 	bl	80053a4 <HAL_RCC_GetPCLK1Freq>
 8003c00:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	4a81      	ldr	r2, [pc, #516]	; (8003e0c <HAL_I2C_Init+0x274>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d807      	bhi.n	8003c1c <HAL_I2C_Init+0x84>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	4a80      	ldr	r2, [pc, #512]	; (8003e10 <HAL_I2C_Init+0x278>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	bf94      	ite	ls
 8003c14:	2301      	movls	r3, #1
 8003c16:	2300      	movhi	r3, #0
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	e006      	b.n	8003c2a <HAL_I2C_Init+0x92>
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	4a7d      	ldr	r2, [pc, #500]	; (8003e14 <HAL_I2C_Init+0x27c>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	bf94      	ite	ls
 8003c24:	2301      	movls	r3, #1
 8003c26:	2300      	movhi	r3, #0
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e0e7      	b.n	8003e02 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	4a78      	ldr	r2, [pc, #480]	; (8003e18 <HAL_I2C_Init+0x280>)
 8003c36:	fba2 2303 	umull	r2, r3, r2, r3
 8003c3a:	0c9b      	lsrs	r3, r3, #18
 8003c3c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68ba      	ldr	r2, [r7, #8]
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	6a1b      	ldr	r3, [r3, #32]
 8003c58:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	4a6a      	ldr	r2, [pc, #424]	; (8003e0c <HAL_I2C_Init+0x274>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d802      	bhi.n	8003c6c <HAL_I2C_Init+0xd4>
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	3301      	adds	r3, #1
 8003c6a:	e009      	b.n	8003c80 <HAL_I2C_Init+0xe8>
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003c72:	fb02 f303 	mul.w	r3, r2, r3
 8003c76:	4a69      	ldr	r2, [pc, #420]	; (8003e1c <HAL_I2C_Init+0x284>)
 8003c78:	fba2 2303 	umull	r2, r3, r2, r3
 8003c7c:	099b      	lsrs	r3, r3, #6
 8003c7e:	3301      	adds	r3, #1
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	6812      	ldr	r2, [r2, #0]
 8003c84:	430b      	orrs	r3, r1
 8003c86:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	69db      	ldr	r3, [r3, #28]
 8003c8e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003c92:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	495c      	ldr	r1, [pc, #368]	; (8003e0c <HAL_I2C_Init+0x274>)
 8003c9c:	428b      	cmp	r3, r1
 8003c9e:	d819      	bhi.n	8003cd4 <HAL_I2C_Init+0x13c>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	1e59      	subs	r1, r3, #1
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	005b      	lsls	r3, r3, #1
 8003caa:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cae:	1c59      	adds	r1, r3, #1
 8003cb0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003cb4:	400b      	ands	r3, r1
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00a      	beq.n	8003cd0 <HAL_I2C_Init+0x138>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	1e59      	subs	r1, r3, #1
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	005b      	lsls	r3, r3, #1
 8003cc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003cc8:	3301      	adds	r3, #1
 8003cca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cce:	e051      	b.n	8003d74 <HAL_I2C_Init+0x1dc>
 8003cd0:	2304      	movs	r3, #4
 8003cd2:	e04f      	b.n	8003d74 <HAL_I2C_Init+0x1dc>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d111      	bne.n	8003d00 <HAL_I2C_Init+0x168>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	1e58      	subs	r0, r3, #1
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6859      	ldr	r1, [r3, #4]
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	005b      	lsls	r3, r3, #1
 8003ce8:	440b      	add	r3, r1
 8003cea:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cee:	3301      	adds	r3, #1
 8003cf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	bf0c      	ite	eq
 8003cf8:	2301      	moveq	r3, #1
 8003cfa:	2300      	movne	r3, #0
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	e012      	b.n	8003d26 <HAL_I2C_Init+0x18e>
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	1e58      	subs	r0, r3, #1
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6859      	ldr	r1, [r3, #4]
 8003d08:	460b      	mov	r3, r1
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	440b      	add	r3, r1
 8003d0e:	0099      	lsls	r1, r3, #2
 8003d10:	440b      	add	r3, r1
 8003d12:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d16:	3301      	adds	r3, #1
 8003d18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	bf0c      	ite	eq
 8003d20:	2301      	moveq	r3, #1
 8003d22:	2300      	movne	r3, #0
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d001      	beq.n	8003d2e <HAL_I2C_Init+0x196>
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e022      	b.n	8003d74 <HAL_I2C_Init+0x1dc>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d10e      	bne.n	8003d54 <HAL_I2C_Init+0x1bc>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	1e58      	subs	r0, r3, #1
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6859      	ldr	r1, [r3, #4]
 8003d3e:	460b      	mov	r3, r1
 8003d40:	005b      	lsls	r3, r3, #1
 8003d42:	440b      	add	r3, r1
 8003d44:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d48:	3301      	adds	r3, #1
 8003d4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d52:	e00f      	b.n	8003d74 <HAL_I2C_Init+0x1dc>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	1e58      	subs	r0, r3, #1
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6859      	ldr	r1, [r3, #4]
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	009b      	lsls	r3, r3, #2
 8003d60:	440b      	add	r3, r1
 8003d62:	0099      	lsls	r1, r3, #2
 8003d64:	440b      	add	r3, r1
 8003d66:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d6a:	3301      	adds	r3, #1
 8003d6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d70:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d74:	6879      	ldr	r1, [r7, #4]
 8003d76:	6809      	ldr	r1, [r1, #0]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	69da      	ldr	r2, [r3, #28]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	430a      	orrs	r2, r1
 8003d96:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003da2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003da6:	687a      	ldr	r2, [r7, #4]
 8003da8:	6911      	ldr	r1, [r2, #16]
 8003daa:	687a      	ldr	r2, [r7, #4]
 8003dac:	68d2      	ldr	r2, [r2, #12]
 8003dae:	4311      	orrs	r1, r2
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	6812      	ldr	r2, [r2, #0]
 8003db4:	430b      	orrs	r3, r1
 8003db6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	695a      	ldr	r2, [r3, #20]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	431a      	orrs	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f042 0201 	orr.w	r2, r2, #1
 8003de2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2220      	movs	r2, #32
 8003dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	000186a0 	.word	0x000186a0
 8003e10:	001e847f 	.word	0x001e847f
 8003e14:	003d08ff 	.word	0x003d08ff
 8003e18:	431bde83 	.word	0x431bde83
 8003e1c:	10624dd3 	.word	0x10624dd3

08003e20 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b088      	sub	sp, #32
 8003e24:	af02      	add	r7, sp, #8
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	607a      	str	r2, [r7, #4]
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	817b      	strh	r3, [r7, #10]
 8003e30:	4613      	mov	r3, r2
 8003e32:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e34:	f7ff fa80 	bl	8003338 <HAL_GetTick>
 8003e38:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	2b20      	cmp	r3, #32
 8003e44:	f040 80e0 	bne.w	8004008 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	9300      	str	r3, [sp, #0]
 8003e4c:	2319      	movs	r3, #25
 8003e4e:	2201      	movs	r2, #1
 8003e50:	4970      	ldr	r1, [pc, #448]	; (8004014 <HAL_I2C_Master_Transmit+0x1f4>)
 8003e52:	68f8      	ldr	r0, [r7, #12]
 8003e54:	f000 fc58 	bl	8004708 <I2C_WaitOnFlagUntilTimeout>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d001      	beq.n	8003e62 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003e5e:	2302      	movs	r3, #2
 8003e60:	e0d3      	b.n	800400a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d101      	bne.n	8003e70 <HAL_I2C_Master_Transmit+0x50>
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	e0cc      	b.n	800400a <HAL_I2C_Master_Transmit+0x1ea>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0301 	and.w	r3, r3, #1
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d007      	beq.n	8003e96 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681a      	ldr	r2, [r3, #0]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f042 0201 	orr.w	r2, r2, #1
 8003e94:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ea4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2221      	movs	r2, #33	; 0x21
 8003eaa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2210      	movs	r2, #16
 8003eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	687a      	ldr	r2, [r7, #4]
 8003ec0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	893a      	ldrh	r2, [r7, #8]
 8003ec6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	4a50      	ldr	r2, [pc, #320]	; (8004018 <HAL_I2C_Master_Transmit+0x1f8>)
 8003ed6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ed8:	8979      	ldrh	r1, [r7, #10]
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	6a3a      	ldr	r2, [r7, #32]
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f000 fac2 	bl	8004468 <I2C_MasterRequestWrite>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d001      	beq.n	8003eee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e08d      	b.n	800400a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eee:	2300      	movs	r3, #0
 8003ef0:	613b      	str	r3, [r7, #16]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	695b      	ldr	r3, [r3, #20]
 8003ef8:	613b      	str	r3, [r7, #16]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	613b      	str	r3, [r7, #16]
 8003f02:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003f04:	e066      	b.n	8003fd4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f06:	697a      	ldr	r2, [r7, #20]
 8003f08:	6a39      	ldr	r1, [r7, #32]
 8003f0a:	68f8      	ldr	r0, [r7, #12]
 8003f0c:	f000 fcd2 	bl	80048b4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d00d      	beq.n	8003f32 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1a:	2b04      	cmp	r3, #4
 8003f1c:	d107      	bne.n	8003f2e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f2c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e06b      	b.n	800400a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f36:	781a      	ldrb	r2, [r3, #0]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f42:	1c5a      	adds	r2, r3, #1
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	3b01      	subs	r3, #1
 8003f50:	b29a      	uxth	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	b29a      	uxth	r2, r3
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	695b      	ldr	r3, [r3, #20]
 8003f68:	f003 0304 	and.w	r3, r3, #4
 8003f6c:	2b04      	cmp	r3, #4
 8003f6e:	d11b      	bne.n	8003fa8 <HAL_I2C_Master_Transmit+0x188>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d017      	beq.n	8003fa8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7c:	781a      	ldrb	r2, [r3, #0]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f88:	1c5a      	adds	r2, r3, #1
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	3b01      	subs	r3, #1
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fa8:	697a      	ldr	r2, [r7, #20]
 8003faa:	6a39      	ldr	r1, [r7, #32]
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f000 fcc2 	bl	8004936 <I2C_WaitOnBTFFlagUntilTimeout>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d00d      	beq.n	8003fd4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbc:	2b04      	cmp	r3, #4
 8003fbe:	d107      	bne.n	8003fd0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e01a      	b.n	800400a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d194      	bne.n	8003f06 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2220      	movs	r2, #32
 8003ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004004:	2300      	movs	r3, #0
 8004006:	e000      	b.n	800400a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004008:	2302      	movs	r3, #2
  }
}
 800400a:	4618      	mov	r0, r3
 800400c:	3718      	adds	r7, #24
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	00100002 	.word	0x00100002
 8004018:	ffff0000 	.word	0xffff0000

0800401c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b08c      	sub	sp, #48	; 0x30
 8004020:	af02      	add	r7, sp, #8
 8004022:	60f8      	str	r0, [r7, #12]
 8004024:	607a      	str	r2, [r7, #4]
 8004026:	461a      	mov	r2, r3
 8004028:	460b      	mov	r3, r1
 800402a:	817b      	strh	r3, [r7, #10]
 800402c:	4613      	mov	r3, r2
 800402e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004030:	f7ff f982 	bl	8003338 <HAL_GetTick>
 8004034:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b20      	cmp	r3, #32
 8004040:	f040 820b 	bne.w	800445a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004046:	9300      	str	r3, [sp, #0]
 8004048:	2319      	movs	r3, #25
 800404a:	2201      	movs	r2, #1
 800404c:	497c      	ldr	r1, [pc, #496]	; (8004240 <HAL_I2C_Master_Receive+0x224>)
 800404e:	68f8      	ldr	r0, [r7, #12]
 8004050:	f000 fb5a 	bl	8004708 <I2C_WaitOnFlagUntilTimeout>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800405a:	2302      	movs	r3, #2
 800405c:	e1fe      	b.n	800445c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004064:	2b01      	cmp	r3, #1
 8004066:	d101      	bne.n	800406c <HAL_I2C_Master_Receive+0x50>
 8004068:	2302      	movs	r3, #2
 800406a:	e1f7      	b.n	800445c <HAL_I2C_Master_Receive+0x440>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b01      	cmp	r3, #1
 8004080:	d007      	beq.n	8004092 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f042 0201 	orr.w	r2, r2, #1
 8004090:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040a0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2222      	movs	r2, #34	; 0x22
 80040a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2210      	movs	r2, #16
 80040ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	893a      	ldrh	r2, [r7, #8]
 80040c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	4a5c      	ldr	r2, [pc, #368]	; (8004244 <HAL_I2C_Master_Receive+0x228>)
 80040d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80040d4:	8979      	ldrh	r1, [r7, #10]
 80040d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f000 fa46 	bl	800456c <I2C_MasterRequestRead>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e1b8      	b.n	800445c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d113      	bne.n	800411a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040f2:	2300      	movs	r3, #0
 80040f4:	623b      	str	r3, [r7, #32]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	695b      	ldr	r3, [r3, #20]
 80040fc:	623b      	str	r3, [r7, #32]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	623b      	str	r3, [r7, #32]
 8004106:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004116:	601a      	str	r2, [r3, #0]
 8004118:	e18c      	b.n	8004434 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800411e:	2b01      	cmp	r3, #1
 8004120:	d11b      	bne.n	800415a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004130:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004132:	2300      	movs	r3, #0
 8004134:	61fb      	str	r3, [r7, #28]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	695b      	ldr	r3, [r3, #20]
 800413c:	61fb      	str	r3, [r7, #28]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	61fb      	str	r3, [r7, #28]
 8004146:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004156:	601a      	str	r2, [r3, #0]
 8004158:	e16c      	b.n	8004434 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800415e:	2b02      	cmp	r3, #2
 8004160:	d11b      	bne.n	800419a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004170:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004180:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004182:	2300      	movs	r3, #0
 8004184:	61bb      	str	r3, [r7, #24]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	695b      	ldr	r3, [r3, #20]
 800418c:	61bb      	str	r3, [r7, #24]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	61bb      	str	r3, [r7, #24]
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	e14c      	b.n	8004434 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041aa:	2300      	movs	r3, #0
 80041ac:	617b      	str	r3, [r7, #20]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	695b      	ldr	r3, [r3, #20]
 80041b4:	617b      	str	r3, [r7, #20]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	617b      	str	r3, [r7, #20]
 80041be:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80041c0:	e138      	b.n	8004434 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c6:	2b03      	cmp	r3, #3
 80041c8:	f200 80f1 	bhi.w	80043ae <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d123      	bne.n	800421c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f000 fbed 	bl	80049b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d001      	beq.n	80041e8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e139      	b.n	800445c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	691a      	ldr	r2, [r3, #16]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f2:	b2d2      	uxtb	r2, r2
 80041f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fa:	1c5a      	adds	r2, r3, #1
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004204:	3b01      	subs	r3, #1
 8004206:	b29a      	uxth	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004210:	b29b      	uxth	r3, r3
 8004212:	3b01      	subs	r3, #1
 8004214:	b29a      	uxth	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	855a      	strh	r2, [r3, #42]	; 0x2a
 800421a:	e10b      	b.n	8004434 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004220:	2b02      	cmp	r3, #2
 8004222:	d14e      	bne.n	80042c2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004226:	9300      	str	r3, [sp, #0]
 8004228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800422a:	2200      	movs	r2, #0
 800422c:	4906      	ldr	r1, [pc, #24]	; (8004248 <HAL_I2C_Master_Receive+0x22c>)
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f000 fa6a 	bl	8004708 <I2C_WaitOnFlagUntilTimeout>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d008      	beq.n	800424c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e10e      	b.n	800445c <HAL_I2C_Master_Receive+0x440>
 800423e:	bf00      	nop
 8004240:	00100002 	.word	0x00100002
 8004244:	ffff0000 	.word	0xffff0000
 8004248:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800425a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	691a      	ldr	r2, [r3, #16]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004266:	b2d2      	uxtb	r2, r2
 8004268:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426e:	1c5a      	adds	r2, r3, #1
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004278:	3b01      	subs	r3, #1
 800427a:	b29a      	uxth	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004284:	b29b      	uxth	r3, r3
 8004286:	3b01      	subs	r3, #1
 8004288:	b29a      	uxth	r2, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	691a      	ldr	r2, [r3, #16]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004298:	b2d2      	uxtb	r2, r2
 800429a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a0:	1c5a      	adds	r2, r3, #1
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042aa:	3b01      	subs	r3, #1
 80042ac:	b29a      	uxth	r2, r3
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	3b01      	subs	r3, #1
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	855a      	strh	r2, [r3, #42]	; 0x2a
 80042c0:	e0b8      	b.n	8004434 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c4:	9300      	str	r3, [sp, #0]
 80042c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c8:	2200      	movs	r2, #0
 80042ca:	4966      	ldr	r1, [pc, #408]	; (8004464 <HAL_I2C_Master_Receive+0x448>)
 80042cc:	68f8      	ldr	r0, [r7, #12]
 80042ce:	f000 fa1b 	bl	8004708 <I2C_WaitOnFlagUntilTimeout>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d001      	beq.n	80042dc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e0bf      	b.n	800445c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	691a      	ldr	r2, [r3, #16]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f6:	b2d2      	uxtb	r2, r2
 80042f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fe:	1c5a      	adds	r2, r3, #1
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004308:	3b01      	subs	r3, #1
 800430a:	b29a      	uxth	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004314:	b29b      	uxth	r3, r3
 8004316:	3b01      	subs	r3, #1
 8004318:	b29a      	uxth	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800431e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004320:	9300      	str	r3, [sp, #0]
 8004322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004324:	2200      	movs	r2, #0
 8004326:	494f      	ldr	r1, [pc, #316]	; (8004464 <HAL_I2C_Master_Receive+0x448>)
 8004328:	68f8      	ldr	r0, [r7, #12]
 800432a:	f000 f9ed 	bl	8004708 <I2C_WaitOnFlagUntilTimeout>
 800432e:	4603      	mov	r3, r0
 8004330:	2b00      	cmp	r3, #0
 8004332:	d001      	beq.n	8004338 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e091      	b.n	800445c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004346:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	691a      	ldr	r2, [r3, #16]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004352:	b2d2      	uxtb	r2, r2
 8004354:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435a:	1c5a      	adds	r2, r3, #1
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004364:	3b01      	subs	r3, #1
 8004366:	b29a      	uxth	r2, r3
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004370:	b29b      	uxth	r3, r3
 8004372:	3b01      	subs	r3, #1
 8004374:	b29a      	uxth	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	691a      	ldr	r2, [r3, #16]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004384:	b2d2      	uxtb	r2, r2
 8004386:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438c:	1c5a      	adds	r2, r3, #1
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004396:	3b01      	subs	r3, #1
 8004398:	b29a      	uxth	r2, r3
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	3b01      	subs	r3, #1
 80043a6:	b29a      	uxth	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043ac:	e042      	b.n	8004434 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f000 fb00 	bl	80049b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e04c      	b.n	800445c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	691a      	ldr	r2, [r3, #16]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043cc:	b2d2      	uxtb	r2, r2
 80043ce:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d4:	1c5a      	adds	r2, r3, #1
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043de:	3b01      	subs	r3, #1
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	3b01      	subs	r3, #1
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	695b      	ldr	r3, [r3, #20]
 80043fa:	f003 0304 	and.w	r3, r3, #4
 80043fe:	2b04      	cmp	r3, #4
 8004400:	d118      	bne.n	8004434 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	691a      	ldr	r2, [r3, #16]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440c:	b2d2      	uxtb	r2, r2
 800440e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004414:	1c5a      	adds	r2, r3, #1
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800441e:	3b01      	subs	r3, #1
 8004420:	b29a      	uxth	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800442a:	b29b      	uxth	r3, r3
 800442c:	3b01      	subs	r3, #1
 800442e:	b29a      	uxth	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004438:	2b00      	cmp	r3, #0
 800443a:	f47f aec2 	bne.w	80041c2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2220      	movs	r2, #32
 8004442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004456:	2300      	movs	r3, #0
 8004458:	e000      	b.n	800445c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800445a:	2302      	movs	r3, #2
  }
}
 800445c:	4618      	mov	r0, r3
 800445e:	3728      	adds	r7, #40	; 0x28
 8004460:	46bd      	mov	sp, r7
 8004462:	bd80      	pop	{r7, pc}
 8004464:	00010004 	.word	0x00010004

08004468 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b088      	sub	sp, #32
 800446c:	af02      	add	r7, sp, #8
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	607a      	str	r2, [r7, #4]
 8004472:	603b      	str	r3, [r7, #0]
 8004474:	460b      	mov	r3, r1
 8004476:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	2b08      	cmp	r3, #8
 8004482:	d006      	beq.n	8004492 <I2C_MasterRequestWrite+0x2a>
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d003      	beq.n	8004492 <I2C_MasterRequestWrite+0x2a>
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004490:	d108      	bne.n	80044a4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044a0:	601a      	str	r2, [r3, #0]
 80044a2:	e00b      	b.n	80044bc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a8:	2b12      	cmp	r3, #18
 80044aa:	d107      	bne.n	80044bc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044ba:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	9300      	str	r3, [sp, #0]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044c8:	68f8      	ldr	r0, [r7, #12]
 80044ca:	f000 f91d 	bl	8004708 <I2C_WaitOnFlagUntilTimeout>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d00d      	beq.n	80044f0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044e2:	d103      	bne.n	80044ec <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e035      	b.n	800455c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044f8:	d108      	bne.n	800450c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80044fa:	897b      	ldrh	r3, [r7, #10]
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	461a      	mov	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004508:	611a      	str	r2, [r3, #16]
 800450a:	e01b      	b.n	8004544 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800450c:	897b      	ldrh	r3, [r7, #10]
 800450e:	11db      	asrs	r3, r3, #7
 8004510:	b2db      	uxtb	r3, r3
 8004512:	f003 0306 	and.w	r3, r3, #6
 8004516:	b2db      	uxtb	r3, r3
 8004518:	f063 030f 	orn	r3, r3, #15
 800451c:	b2da      	uxtb	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	490e      	ldr	r1, [pc, #56]	; (8004564 <I2C_MasterRequestWrite+0xfc>)
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f000 f943 	bl	80047b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e010      	b.n	800455c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800453a:	897b      	ldrh	r3, [r7, #10]
 800453c:	b2da      	uxtb	r2, r3
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	4907      	ldr	r1, [pc, #28]	; (8004568 <I2C_MasterRequestWrite+0x100>)
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	f000 f933 	bl	80047b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d001      	beq.n	800455a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e000      	b.n	800455c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800455a:	2300      	movs	r3, #0
}
 800455c:	4618      	mov	r0, r3
 800455e:	3718      	adds	r7, #24
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}
 8004564:	00010008 	.word	0x00010008
 8004568:	00010002 	.word	0x00010002

0800456c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b088      	sub	sp, #32
 8004570:	af02      	add	r7, sp, #8
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	607a      	str	r2, [r7, #4]
 8004576:	603b      	str	r3, [r7, #0]
 8004578:	460b      	mov	r3, r1
 800457a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004580:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004590:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	2b08      	cmp	r3, #8
 8004596:	d006      	beq.n	80045a6 <I2C_MasterRequestRead+0x3a>
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	2b01      	cmp	r3, #1
 800459c:	d003      	beq.n	80045a6 <I2C_MasterRequestRead+0x3a>
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045a4:	d108      	bne.n	80045b8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045b4:	601a      	str	r2, [r3, #0]
 80045b6:	e00b      	b.n	80045d0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045bc:	2b11      	cmp	r3, #17
 80045be:	d107      	bne.n	80045d0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	9300      	str	r3, [sp, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045dc:	68f8      	ldr	r0, [r7, #12]
 80045de:	f000 f893 	bl	8004708 <I2C_WaitOnFlagUntilTimeout>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00d      	beq.n	8004604 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045f6:	d103      	bne.n	8004600 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e079      	b.n	80046f8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800460c:	d108      	bne.n	8004620 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800460e:	897b      	ldrh	r3, [r7, #10]
 8004610:	b2db      	uxtb	r3, r3
 8004612:	f043 0301 	orr.w	r3, r3, #1
 8004616:	b2da      	uxtb	r2, r3
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	611a      	str	r2, [r3, #16]
 800461e:	e05f      	b.n	80046e0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004620:	897b      	ldrh	r3, [r7, #10]
 8004622:	11db      	asrs	r3, r3, #7
 8004624:	b2db      	uxtb	r3, r3
 8004626:	f003 0306 	and.w	r3, r3, #6
 800462a:	b2db      	uxtb	r3, r3
 800462c:	f063 030f 	orn	r3, r3, #15
 8004630:	b2da      	uxtb	r2, r3
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	4930      	ldr	r1, [pc, #192]	; (8004700 <I2C_MasterRequestRead+0x194>)
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	f000 f8b9 	bl	80047b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004644:	4603      	mov	r3, r0
 8004646:	2b00      	cmp	r3, #0
 8004648:	d001      	beq.n	800464e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e054      	b.n	80046f8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800464e:	897b      	ldrh	r3, [r7, #10]
 8004650:	b2da      	uxtb	r2, r3
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	4929      	ldr	r1, [pc, #164]	; (8004704 <I2C_MasterRequestRead+0x198>)
 800465e:	68f8      	ldr	r0, [r7, #12]
 8004660:	f000 f8a9 	bl	80047b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e044      	b.n	80046f8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800466e:	2300      	movs	r3, #0
 8004670:	613b      	str	r3, [r7, #16]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	695b      	ldr	r3, [r3, #20]
 8004678:	613b      	str	r3, [r7, #16]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	699b      	ldr	r3, [r3, #24]
 8004680:	613b      	str	r3, [r7, #16]
 8004682:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004692:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	9300      	str	r3, [sp, #0]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046a0:	68f8      	ldr	r0, [r7, #12]
 80046a2:	f000 f831 	bl	8004708 <I2C_WaitOnFlagUntilTimeout>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d00d      	beq.n	80046c8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046ba:	d103      	bne.n	80046c4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046c2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	e017      	b.n	80046f8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80046c8:	897b      	ldrh	r3, [r7, #10]
 80046ca:	11db      	asrs	r3, r3, #7
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	f003 0306 	and.w	r3, r3, #6
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	f063 030e 	orn	r3, r3, #14
 80046d8:	b2da      	uxtb	r2, r3
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	4907      	ldr	r1, [pc, #28]	; (8004704 <I2C_MasterRequestRead+0x198>)
 80046e6:	68f8      	ldr	r0, [r7, #12]
 80046e8:	f000 f865 	bl	80047b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d001      	beq.n	80046f6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e000      	b.n	80046f8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3718      	adds	r7, #24
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	00010008 	.word	0x00010008
 8004704:	00010002 	.word	0x00010002

08004708 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	603b      	str	r3, [r7, #0]
 8004714:	4613      	mov	r3, r2
 8004716:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004718:	e025      	b.n	8004766 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004720:	d021      	beq.n	8004766 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004722:	f7fe fe09 	bl	8003338 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	683a      	ldr	r2, [r7, #0]
 800472e:	429a      	cmp	r2, r3
 8004730:	d302      	bcc.n	8004738 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d116      	bne.n	8004766 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2220      	movs	r2, #32
 8004742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004752:	f043 0220 	orr.w	r2, r3, #32
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2200      	movs	r2, #0
 800475e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	e023      	b.n	80047ae <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	0c1b      	lsrs	r3, r3, #16
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b01      	cmp	r3, #1
 800476e:	d10d      	bne.n	800478c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	43da      	mvns	r2, r3
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	4013      	ands	r3, r2
 800477c:	b29b      	uxth	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	bf0c      	ite	eq
 8004782:	2301      	moveq	r3, #1
 8004784:	2300      	movne	r3, #0
 8004786:	b2db      	uxtb	r3, r3
 8004788:	461a      	mov	r2, r3
 800478a:	e00c      	b.n	80047a6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	43da      	mvns	r2, r3
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	4013      	ands	r3, r2
 8004798:	b29b      	uxth	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	bf0c      	ite	eq
 800479e:	2301      	moveq	r3, #1
 80047a0:	2300      	movne	r3, #0
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	461a      	mov	r2, r3
 80047a6:	79fb      	ldrb	r3, [r7, #7]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d0b6      	beq.n	800471a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3710      	adds	r7, #16
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}

080047b6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80047b6:	b580      	push	{r7, lr}
 80047b8:	b084      	sub	sp, #16
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	60f8      	str	r0, [r7, #12]
 80047be:	60b9      	str	r1, [r7, #8]
 80047c0:	607a      	str	r2, [r7, #4]
 80047c2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047c4:	e051      	b.n	800486a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	695b      	ldr	r3, [r3, #20]
 80047cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047d4:	d123      	bne.n	800481e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047e4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047ee:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2200      	movs	r2, #0
 80047f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2220      	movs	r2, #32
 80047fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480a:	f043 0204 	orr.w	r2, r3, #4
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2200      	movs	r2, #0
 8004816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e046      	b.n	80048ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004824:	d021      	beq.n	800486a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004826:	f7fe fd87 	bl	8003338 <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	687a      	ldr	r2, [r7, #4]
 8004832:	429a      	cmp	r2, r3
 8004834:	d302      	bcc.n	800483c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d116      	bne.n	800486a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2200      	movs	r2, #0
 8004840:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2220      	movs	r2, #32
 8004846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004856:	f043 0220 	orr.w	r2, r3, #32
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e020      	b.n	80048ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	0c1b      	lsrs	r3, r3, #16
 800486e:	b2db      	uxtb	r3, r3
 8004870:	2b01      	cmp	r3, #1
 8004872:	d10c      	bne.n	800488e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	695b      	ldr	r3, [r3, #20]
 800487a:	43da      	mvns	r2, r3
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	4013      	ands	r3, r2
 8004880:	b29b      	uxth	r3, r3
 8004882:	2b00      	cmp	r3, #0
 8004884:	bf14      	ite	ne
 8004886:	2301      	movne	r3, #1
 8004888:	2300      	moveq	r3, #0
 800488a:	b2db      	uxtb	r3, r3
 800488c:	e00b      	b.n	80048a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	699b      	ldr	r3, [r3, #24]
 8004894:	43da      	mvns	r2, r3
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	4013      	ands	r3, r2
 800489a:	b29b      	uxth	r3, r3
 800489c:	2b00      	cmp	r3, #0
 800489e:	bf14      	ite	ne
 80048a0:	2301      	movne	r3, #1
 80048a2:	2300      	moveq	r3, #0
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d18d      	bne.n	80047c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3710      	adds	r7, #16
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048c0:	e02d      	b.n	800491e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048c2:	68f8      	ldr	r0, [r7, #12]
 80048c4:	f000 f8ce 	bl	8004a64 <I2C_IsAcknowledgeFailed>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e02d      	b.n	800492e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d8:	d021      	beq.n	800491e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048da:	f7fe fd2d 	bl	8003338 <HAL_GetTick>
 80048de:	4602      	mov	r2, r0
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	68ba      	ldr	r2, [r7, #8]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d302      	bcc.n	80048f0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d116      	bne.n	800491e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2220      	movs	r2, #32
 80048fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2200      	movs	r2, #0
 8004902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490a:	f043 0220 	orr.w	r2, r3, #32
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e007      	b.n	800492e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	695b      	ldr	r3, [r3, #20]
 8004924:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004928:	2b80      	cmp	r3, #128	; 0x80
 800492a:	d1ca      	bne.n	80048c2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}

08004936 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004936:	b580      	push	{r7, lr}
 8004938:	b084      	sub	sp, #16
 800493a:	af00      	add	r7, sp, #0
 800493c:	60f8      	str	r0, [r7, #12]
 800493e:	60b9      	str	r1, [r7, #8]
 8004940:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004942:	e02d      	b.n	80049a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004944:	68f8      	ldr	r0, [r7, #12]
 8004946:	f000 f88d 	bl	8004a64 <I2C_IsAcknowledgeFailed>
 800494a:	4603      	mov	r3, r0
 800494c:	2b00      	cmp	r3, #0
 800494e:	d001      	beq.n	8004954 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e02d      	b.n	80049b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800495a:	d021      	beq.n	80049a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800495c:	f7fe fcec 	bl	8003338 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	68ba      	ldr	r2, [r7, #8]
 8004968:	429a      	cmp	r2, r3
 800496a:	d302      	bcc.n	8004972 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d116      	bne.n	80049a0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2200      	movs	r2, #0
 8004976:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2220      	movs	r2, #32
 800497c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2200      	movs	r2, #0
 8004984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498c:	f043 0220 	orr.w	r2, r3, #32
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2200      	movs	r2, #0
 8004998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e007      	b.n	80049b0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	695b      	ldr	r3, [r3, #20]
 80049a6:	f003 0304 	and.w	r3, r3, #4
 80049aa:	2b04      	cmp	r3, #4
 80049ac:	d1ca      	bne.n	8004944 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049ae:	2300      	movs	r3, #0
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3710      	adds	r7, #16
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60f8      	str	r0, [r7, #12]
 80049c0:	60b9      	str	r1, [r7, #8]
 80049c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80049c4:	e042      	b.n	8004a4c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	695b      	ldr	r3, [r3, #20]
 80049cc:	f003 0310 	and.w	r3, r3, #16
 80049d0:	2b10      	cmp	r3, #16
 80049d2:	d119      	bne.n	8004a08 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f06f 0210 	mvn.w	r2, #16
 80049dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2220      	movs	r2, #32
 80049e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e029      	b.n	8004a5c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a08:	f7fe fc96 	bl	8003338 <HAL_GetTick>
 8004a0c:	4602      	mov	r2, r0
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	1ad3      	subs	r3, r2, r3
 8004a12:	68ba      	ldr	r2, [r7, #8]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d302      	bcc.n	8004a1e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d116      	bne.n	8004a4c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2200      	movs	r2, #0
 8004a22:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2220      	movs	r2, #32
 8004a28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a38:	f043 0220 	orr.w	r2, r3, #32
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	e007      	b.n	8004a5c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a56:	2b40      	cmp	r3, #64	; 0x40
 8004a58:	d1b5      	bne.n	80049c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3710      	adds	r7, #16
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a7a:	d11b      	bne.n	8004ab4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a84:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2220      	movs	r2, #32
 8004a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa0:	f043 0204 	orr.w	r2, r3, #4
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e000      	b.n	8004ab6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	370c      	adds	r7, #12
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
	...

08004ac4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b086      	sub	sp, #24
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d101      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e267      	b.n	8004fa6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d075      	beq.n	8004bce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ae2:	4b88      	ldr	r3, [pc, #544]	; (8004d04 <HAL_RCC_OscConfig+0x240>)
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f003 030c 	and.w	r3, r3, #12
 8004aea:	2b04      	cmp	r3, #4
 8004aec:	d00c      	beq.n	8004b08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004aee:	4b85      	ldr	r3, [pc, #532]	; (8004d04 <HAL_RCC_OscConfig+0x240>)
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004af6:	2b08      	cmp	r3, #8
 8004af8:	d112      	bne.n	8004b20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004afa:	4b82      	ldr	r3, [pc, #520]	; (8004d04 <HAL_RCC_OscConfig+0x240>)
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b06:	d10b      	bne.n	8004b20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b08:	4b7e      	ldr	r3, [pc, #504]	; (8004d04 <HAL_RCC_OscConfig+0x240>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d05b      	beq.n	8004bcc <HAL_RCC_OscConfig+0x108>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d157      	bne.n	8004bcc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e242      	b.n	8004fa6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b28:	d106      	bne.n	8004b38 <HAL_RCC_OscConfig+0x74>
 8004b2a:	4b76      	ldr	r3, [pc, #472]	; (8004d04 <HAL_RCC_OscConfig+0x240>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a75      	ldr	r2, [pc, #468]	; (8004d04 <HAL_RCC_OscConfig+0x240>)
 8004b30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b34:	6013      	str	r3, [r2, #0]
 8004b36:	e01d      	b.n	8004b74 <HAL_RCC_OscConfig+0xb0>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b40:	d10c      	bne.n	8004b5c <HAL_RCC_OscConfig+0x98>
 8004b42:	4b70      	ldr	r3, [pc, #448]	; (8004d04 <HAL_RCC_OscConfig+0x240>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a6f      	ldr	r2, [pc, #444]	; (8004d04 <HAL_RCC_OscConfig+0x240>)
 8004b48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b4c:	6013      	str	r3, [r2, #0]
 8004b4e:	4b6d      	ldr	r3, [pc, #436]	; (8004d04 <HAL_RCC_OscConfig+0x240>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a6c      	ldr	r2, [pc, #432]	; (8004d04 <HAL_RCC_OscConfig+0x240>)
 8004b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b58:	6013      	str	r3, [r2, #0]
 8004b5a:	e00b      	b.n	8004b74 <HAL_RCC_OscConfig+0xb0>
 8004b5c:	4b69      	ldr	r3, [pc, #420]	; (8004d04 <HAL_RCC_OscConfig+0x240>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a68      	ldr	r2, [pc, #416]	; (8004d04 <HAL_RCC_OscConfig+0x240>)
 8004b62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b66:	6013      	str	r3, [r2, #0]
 8004b68:	4b66      	ldr	r3, [pc, #408]	; (8004d04 <HAL_RCC_OscConfig+0x240>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a65      	ldr	r2, [pc, #404]	; (8004d04 <HAL_RCC_OscConfig+0x240>)
 8004b6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d013      	beq.n	8004ba4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b7c:	f7fe fbdc 	bl	8003338 <HAL_GetTick>
 8004b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b82:	e008      	b.n	8004b96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b84:	f7fe fbd8 	bl	8003338 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	2b64      	cmp	r3, #100	; 0x64
 8004b90:	d901      	bls.n	8004b96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	e207      	b.n	8004fa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b96:	4b5b      	ldr	r3, [pc, #364]	; (8004d04 <HAL_RCC_OscConfig+0x240>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d0f0      	beq.n	8004b84 <HAL_RCC_OscConfig+0xc0>
 8004ba2:	e014      	b.n	8004bce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ba4:	f7fe fbc8 	bl	8003338 <HAL_GetTick>
 8004ba8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004baa:	e008      	b.n	8004bbe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bac:	f7fe fbc4 	bl	8003338 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	2b64      	cmp	r3, #100	; 0x64
 8004bb8:	d901      	bls.n	8004bbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e1f3      	b.n	8004fa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bbe:	4b51      	ldr	r3, [pc, #324]	; (8004d04 <HAL_RCC_OscConfig+0x240>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d1f0      	bne.n	8004bac <HAL_RCC_OscConfig+0xe8>
 8004bca:	e000      	b.n	8004bce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0302 	and.w	r3, r3, #2
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d063      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bda:	4b4a      	ldr	r3, [pc, #296]	; (8004d04 <HAL_RCC_OscConfig+0x240>)
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f003 030c 	and.w	r3, r3, #12
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00b      	beq.n	8004bfe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004be6:	4b47      	ldr	r3, [pc, #284]	; (8004d04 <HAL_RCC_OscConfig+0x240>)
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bee:	2b08      	cmp	r3, #8
 8004bf0:	d11c      	bne.n	8004c2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bf2:	4b44      	ldr	r3, [pc, #272]	; (8004d04 <HAL_RCC_OscConfig+0x240>)
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d116      	bne.n	8004c2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bfe:	4b41      	ldr	r3, [pc, #260]	; (8004d04 <HAL_RCC_OscConfig+0x240>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 0302 	and.w	r3, r3, #2
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d005      	beq.n	8004c16 <HAL_RCC_OscConfig+0x152>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d001      	beq.n	8004c16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e1c7      	b.n	8004fa6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c16:	4b3b      	ldr	r3, [pc, #236]	; (8004d04 <HAL_RCC_OscConfig+0x240>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	00db      	lsls	r3, r3, #3
 8004c24:	4937      	ldr	r1, [pc, #220]	; (8004d04 <HAL_RCC_OscConfig+0x240>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c2a:	e03a      	b.n	8004ca2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d020      	beq.n	8004c76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c34:	4b34      	ldr	r3, [pc, #208]	; (8004d08 <HAL_RCC_OscConfig+0x244>)
 8004c36:	2201      	movs	r2, #1
 8004c38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c3a:	f7fe fb7d 	bl	8003338 <HAL_GetTick>
 8004c3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c40:	e008      	b.n	8004c54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c42:	f7fe fb79 	bl	8003338 <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d901      	bls.n	8004c54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e1a8      	b.n	8004fa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c54:	4b2b      	ldr	r3, [pc, #172]	; (8004d04 <HAL_RCC_OscConfig+0x240>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0302 	and.w	r3, r3, #2
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d0f0      	beq.n	8004c42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c60:	4b28      	ldr	r3, [pc, #160]	; (8004d04 <HAL_RCC_OscConfig+0x240>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	691b      	ldr	r3, [r3, #16]
 8004c6c:	00db      	lsls	r3, r3, #3
 8004c6e:	4925      	ldr	r1, [pc, #148]	; (8004d04 <HAL_RCC_OscConfig+0x240>)
 8004c70:	4313      	orrs	r3, r2
 8004c72:	600b      	str	r3, [r1, #0]
 8004c74:	e015      	b.n	8004ca2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c76:	4b24      	ldr	r3, [pc, #144]	; (8004d08 <HAL_RCC_OscConfig+0x244>)
 8004c78:	2200      	movs	r2, #0
 8004c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c7c:	f7fe fb5c 	bl	8003338 <HAL_GetTick>
 8004c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c82:	e008      	b.n	8004c96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c84:	f7fe fb58 	bl	8003338 <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d901      	bls.n	8004c96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e187      	b.n	8004fa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c96:	4b1b      	ldr	r3, [pc, #108]	; (8004d04 <HAL_RCC_OscConfig+0x240>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 0302 	and.w	r3, r3, #2
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1f0      	bne.n	8004c84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0308 	and.w	r3, r3, #8
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d036      	beq.n	8004d1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d016      	beq.n	8004ce4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cb6:	4b15      	ldr	r3, [pc, #84]	; (8004d0c <HAL_RCC_OscConfig+0x248>)
 8004cb8:	2201      	movs	r2, #1
 8004cba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cbc:	f7fe fb3c 	bl	8003338 <HAL_GetTick>
 8004cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cc2:	e008      	b.n	8004cd6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cc4:	f7fe fb38 	bl	8003338 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d901      	bls.n	8004cd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e167      	b.n	8004fa6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cd6:	4b0b      	ldr	r3, [pc, #44]	; (8004d04 <HAL_RCC_OscConfig+0x240>)
 8004cd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cda:	f003 0302 	and.w	r3, r3, #2
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d0f0      	beq.n	8004cc4 <HAL_RCC_OscConfig+0x200>
 8004ce2:	e01b      	b.n	8004d1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ce4:	4b09      	ldr	r3, [pc, #36]	; (8004d0c <HAL_RCC_OscConfig+0x248>)
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cea:	f7fe fb25 	bl	8003338 <HAL_GetTick>
 8004cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cf0:	e00e      	b.n	8004d10 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cf2:	f7fe fb21 	bl	8003338 <HAL_GetTick>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	1ad3      	subs	r3, r2, r3
 8004cfc:	2b02      	cmp	r3, #2
 8004cfe:	d907      	bls.n	8004d10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e150      	b.n	8004fa6 <HAL_RCC_OscConfig+0x4e2>
 8004d04:	40023800 	.word	0x40023800
 8004d08:	42470000 	.word	0x42470000
 8004d0c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d10:	4b88      	ldr	r3, [pc, #544]	; (8004f34 <HAL_RCC_OscConfig+0x470>)
 8004d12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d14:	f003 0302 	and.w	r3, r3, #2
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d1ea      	bne.n	8004cf2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0304 	and.w	r3, r3, #4
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	f000 8097 	beq.w	8004e58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d2e:	4b81      	ldr	r3, [pc, #516]	; (8004f34 <HAL_RCC_OscConfig+0x470>)
 8004d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d10f      	bne.n	8004d5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	60bb      	str	r3, [r7, #8]
 8004d3e:	4b7d      	ldr	r3, [pc, #500]	; (8004f34 <HAL_RCC_OscConfig+0x470>)
 8004d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d42:	4a7c      	ldr	r2, [pc, #496]	; (8004f34 <HAL_RCC_OscConfig+0x470>)
 8004d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d48:	6413      	str	r3, [r2, #64]	; 0x40
 8004d4a:	4b7a      	ldr	r3, [pc, #488]	; (8004f34 <HAL_RCC_OscConfig+0x470>)
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d52:	60bb      	str	r3, [r7, #8]
 8004d54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d56:	2301      	movs	r3, #1
 8004d58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d5a:	4b77      	ldr	r3, [pc, #476]	; (8004f38 <HAL_RCC_OscConfig+0x474>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d118      	bne.n	8004d98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d66:	4b74      	ldr	r3, [pc, #464]	; (8004f38 <HAL_RCC_OscConfig+0x474>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	4a73      	ldr	r2, [pc, #460]	; (8004f38 <HAL_RCC_OscConfig+0x474>)
 8004d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d72:	f7fe fae1 	bl	8003338 <HAL_GetTick>
 8004d76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d78:	e008      	b.n	8004d8c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d7a:	f7fe fadd 	bl	8003338 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	2b02      	cmp	r3, #2
 8004d86:	d901      	bls.n	8004d8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e10c      	b.n	8004fa6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d8c:	4b6a      	ldr	r3, [pc, #424]	; (8004f38 <HAL_RCC_OscConfig+0x474>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d0f0      	beq.n	8004d7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	d106      	bne.n	8004dae <HAL_RCC_OscConfig+0x2ea>
 8004da0:	4b64      	ldr	r3, [pc, #400]	; (8004f34 <HAL_RCC_OscConfig+0x470>)
 8004da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da4:	4a63      	ldr	r2, [pc, #396]	; (8004f34 <HAL_RCC_OscConfig+0x470>)
 8004da6:	f043 0301 	orr.w	r3, r3, #1
 8004daa:	6713      	str	r3, [r2, #112]	; 0x70
 8004dac:	e01c      	b.n	8004de8 <HAL_RCC_OscConfig+0x324>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	2b05      	cmp	r3, #5
 8004db4:	d10c      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x30c>
 8004db6:	4b5f      	ldr	r3, [pc, #380]	; (8004f34 <HAL_RCC_OscConfig+0x470>)
 8004db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dba:	4a5e      	ldr	r2, [pc, #376]	; (8004f34 <HAL_RCC_OscConfig+0x470>)
 8004dbc:	f043 0304 	orr.w	r3, r3, #4
 8004dc0:	6713      	str	r3, [r2, #112]	; 0x70
 8004dc2:	4b5c      	ldr	r3, [pc, #368]	; (8004f34 <HAL_RCC_OscConfig+0x470>)
 8004dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc6:	4a5b      	ldr	r2, [pc, #364]	; (8004f34 <HAL_RCC_OscConfig+0x470>)
 8004dc8:	f043 0301 	orr.w	r3, r3, #1
 8004dcc:	6713      	str	r3, [r2, #112]	; 0x70
 8004dce:	e00b      	b.n	8004de8 <HAL_RCC_OscConfig+0x324>
 8004dd0:	4b58      	ldr	r3, [pc, #352]	; (8004f34 <HAL_RCC_OscConfig+0x470>)
 8004dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd4:	4a57      	ldr	r2, [pc, #348]	; (8004f34 <HAL_RCC_OscConfig+0x470>)
 8004dd6:	f023 0301 	bic.w	r3, r3, #1
 8004dda:	6713      	str	r3, [r2, #112]	; 0x70
 8004ddc:	4b55      	ldr	r3, [pc, #340]	; (8004f34 <HAL_RCC_OscConfig+0x470>)
 8004dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de0:	4a54      	ldr	r2, [pc, #336]	; (8004f34 <HAL_RCC_OscConfig+0x470>)
 8004de2:	f023 0304 	bic.w	r3, r3, #4
 8004de6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d015      	beq.n	8004e1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004df0:	f7fe faa2 	bl	8003338 <HAL_GetTick>
 8004df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004df6:	e00a      	b.n	8004e0e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004df8:	f7fe fa9e 	bl	8003338 <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d901      	bls.n	8004e0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e0cb      	b.n	8004fa6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e0e:	4b49      	ldr	r3, [pc, #292]	; (8004f34 <HAL_RCC_OscConfig+0x470>)
 8004e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e12:	f003 0302 	and.w	r3, r3, #2
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d0ee      	beq.n	8004df8 <HAL_RCC_OscConfig+0x334>
 8004e1a:	e014      	b.n	8004e46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e1c:	f7fe fa8c 	bl	8003338 <HAL_GetTick>
 8004e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e22:	e00a      	b.n	8004e3a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e24:	f7fe fa88 	bl	8003338 <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d901      	bls.n	8004e3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e0b5      	b.n	8004fa6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e3a:	4b3e      	ldr	r3, [pc, #248]	; (8004f34 <HAL_RCC_OscConfig+0x470>)
 8004e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1ee      	bne.n	8004e24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e46:	7dfb      	ldrb	r3, [r7, #23]
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d105      	bne.n	8004e58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e4c:	4b39      	ldr	r3, [pc, #228]	; (8004f34 <HAL_RCC_OscConfig+0x470>)
 8004e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e50:	4a38      	ldr	r2, [pc, #224]	; (8004f34 <HAL_RCC_OscConfig+0x470>)
 8004e52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e56:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	699b      	ldr	r3, [r3, #24]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	f000 80a1 	beq.w	8004fa4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e62:	4b34      	ldr	r3, [pc, #208]	; (8004f34 <HAL_RCC_OscConfig+0x470>)
 8004e64:	689b      	ldr	r3, [r3, #8]
 8004e66:	f003 030c 	and.w	r3, r3, #12
 8004e6a:	2b08      	cmp	r3, #8
 8004e6c:	d05c      	beq.n	8004f28 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	699b      	ldr	r3, [r3, #24]
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d141      	bne.n	8004efa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e76:	4b31      	ldr	r3, [pc, #196]	; (8004f3c <HAL_RCC_OscConfig+0x478>)
 8004e78:	2200      	movs	r2, #0
 8004e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e7c:	f7fe fa5c 	bl	8003338 <HAL_GetTick>
 8004e80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e82:	e008      	b.n	8004e96 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e84:	f7fe fa58 	bl	8003338 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d901      	bls.n	8004e96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004e92:	2303      	movs	r3, #3
 8004e94:	e087      	b.n	8004fa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e96:	4b27      	ldr	r3, [pc, #156]	; (8004f34 <HAL_RCC_OscConfig+0x470>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d1f0      	bne.n	8004e84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	69da      	ldr	r2, [r3, #28]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a1b      	ldr	r3, [r3, #32]
 8004eaa:	431a      	orrs	r2, r3
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb0:	019b      	lsls	r3, r3, #6
 8004eb2:	431a      	orrs	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eb8:	085b      	lsrs	r3, r3, #1
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	041b      	lsls	r3, r3, #16
 8004ebe:	431a      	orrs	r2, r3
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec4:	061b      	lsls	r3, r3, #24
 8004ec6:	491b      	ldr	r1, [pc, #108]	; (8004f34 <HAL_RCC_OscConfig+0x470>)
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ecc:	4b1b      	ldr	r3, [pc, #108]	; (8004f3c <HAL_RCC_OscConfig+0x478>)
 8004ece:	2201      	movs	r2, #1
 8004ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ed2:	f7fe fa31 	bl	8003338 <HAL_GetTick>
 8004ed6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ed8:	e008      	b.n	8004eec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004eda:	f7fe fa2d 	bl	8003338 <HAL_GetTick>
 8004ede:	4602      	mov	r2, r0
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	2b02      	cmp	r3, #2
 8004ee6:	d901      	bls.n	8004eec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e05c      	b.n	8004fa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eec:	4b11      	ldr	r3, [pc, #68]	; (8004f34 <HAL_RCC_OscConfig+0x470>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d0f0      	beq.n	8004eda <HAL_RCC_OscConfig+0x416>
 8004ef8:	e054      	b.n	8004fa4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004efa:	4b10      	ldr	r3, [pc, #64]	; (8004f3c <HAL_RCC_OscConfig+0x478>)
 8004efc:	2200      	movs	r2, #0
 8004efe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f00:	f7fe fa1a 	bl	8003338 <HAL_GetTick>
 8004f04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f06:	e008      	b.n	8004f1a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f08:	f7fe fa16 	bl	8003338 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d901      	bls.n	8004f1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e045      	b.n	8004fa6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f1a:	4b06      	ldr	r3, [pc, #24]	; (8004f34 <HAL_RCC_OscConfig+0x470>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d1f0      	bne.n	8004f08 <HAL_RCC_OscConfig+0x444>
 8004f26:	e03d      	b.n	8004fa4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	699b      	ldr	r3, [r3, #24]
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d107      	bne.n	8004f40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e038      	b.n	8004fa6 <HAL_RCC_OscConfig+0x4e2>
 8004f34:	40023800 	.word	0x40023800
 8004f38:	40007000 	.word	0x40007000
 8004f3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f40:	4b1b      	ldr	r3, [pc, #108]	; (8004fb0 <HAL_RCC_OscConfig+0x4ec>)
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d028      	beq.n	8004fa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d121      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d11a      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f70:	4013      	ands	r3, r2
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d111      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f86:	085b      	lsrs	r3, r3, #1
 8004f88:	3b01      	subs	r3, #1
 8004f8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d107      	bne.n	8004fa0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d001      	beq.n	8004fa4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e000      	b.n	8004fa6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3718      	adds	r7, #24
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	40023800 	.word	0x40023800

08004fb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b084      	sub	sp, #16
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d101      	bne.n	8004fc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e0cc      	b.n	8005162 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fc8:	4b68      	ldr	r3, [pc, #416]	; (800516c <HAL_RCC_ClockConfig+0x1b8>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0307 	and.w	r3, r3, #7
 8004fd0:	683a      	ldr	r2, [r7, #0]
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d90c      	bls.n	8004ff0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fd6:	4b65      	ldr	r3, [pc, #404]	; (800516c <HAL_RCC_ClockConfig+0x1b8>)
 8004fd8:	683a      	ldr	r2, [r7, #0]
 8004fda:	b2d2      	uxtb	r2, r2
 8004fdc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fde:	4b63      	ldr	r3, [pc, #396]	; (800516c <HAL_RCC_ClockConfig+0x1b8>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0307 	and.w	r3, r3, #7
 8004fe6:	683a      	ldr	r2, [r7, #0]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d001      	beq.n	8004ff0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004fec:	2301      	movs	r3, #1
 8004fee:	e0b8      	b.n	8005162 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 0302 	and.w	r3, r3, #2
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d020      	beq.n	800503e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0304 	and.w	r3, r3, #4
 8005004:	2b00      	cmp	r3, #0
 8005006:	d005      	beq.n	8005014 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005008:	4b59      	ldr	r3, [pc, #356]	; (8005170 <HAL_RCC_ClockConfig+0x1bc>)
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	4a58      	ldr	r2, [pc, #352]	; (8005170 <HAL_RCC_ClockConfig+0x1bc>)
 800500e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005012:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0308 	and.w	r3, r3, #8
 800501c:	2b00      	cmp	r3, #0
 800501e:	d005      	beq.n	800502c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005020:	4b53      	ldr	r3, [pc, #332]	; (8005170 <HAL_RCC_ClockConfig+0x1bc>)
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	4a52      	ldr	r2, [pc, #328]	; (8005170 <HAL_RCC_ClockConfig+0x1bc>)
 8005026:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800502a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800502c:	4b50      	ldr	r3, [pc, #320]	; (8005170 <HAL_RCC_ClockConfig+0x1bc>)
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	494d      	ldr	r1, [pc, #308]	; (8005170 <HAL_RCC_ClockConfig+0x1bc>)
 800503a:	4313      	orrs	r3, r2
 800503c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0301 	and.w	r3, r3, #1
 8005046:	2b00      	cmp	r3, #0
 8005048:	d044      	beq.n	80050d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	2b01      	cmp	r3, #1
 8005050:	d107      	bne.n	8005062 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005052:	4b47      	ldr	r3, [pc, #284]	; (8005170 <HAL_RCC_ClockConfig+0x1bc>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800505a:	2b00      	cmp	r3, #0
 800505c:	d119      	bne.n	8005092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e07f      	b.n	8005162 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	2b02      	cmp	r3, #2
 8005068:	d003      	beq.n	8005072 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800506e:	2b03      	cmp	r3, #3
 8005070:	d107      	bne.n	8005082 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005072:	4b3f      	ldr	r3, [pc, #252]	; (8005170 <HAL_RCC_ClockConfig+0x1bc>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800507a:	2b00      	cmp	r3, #0
 800507c:	d109      	bne.n	8005092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e06f      	b.n	8005162 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005082:	4b3b      	ldr	r3, [pc, #236]	; (8005170 <HAL_RCC_ClockConfig+0x1bc>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0302 	and.w	r3, r3, #2
 800508a:	2b00      	cmp	r3, #0
 800508c:	d101      	bne.n	8005092 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e067      	b.n	8005162 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005092:	4b37      	ldr	r3, [pc, #220]	; (8005170 <HAL_RCC_ClockConfig+0x1bc>)
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f023 0203 	bic.w	r2, r3, #3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	4934      	ldr	r1, [pc, #208]	; (8005170 <HAL_RCC_ClockConfig+0x1bc>)
 80050a0:	4313      	orrs	r3, r2
 80050a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050a4:	f7fe f948 	bl	8003338 <HAL_GetTick>
 80050a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050aa:	e00a      	b.n	80050c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050ac:	f7fe f944 	bl	8003338 <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d901      	bls.n	80050c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e04f      	b.n	8005162 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050c2:	4b2b      	ldr	r3, [pc, #172]	; (8005170 <HAL_RCC_ClockConfig+0x1bc>)
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	f003 020c 	and.w	r2, r3, #12
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d1eb      	bne.n	80050ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050d4:	4b25      	ldr	r3, [pc, #148]	; (800516c <HAL_RCC_ClockConfig+0x1b8>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0307 	and.w	r3, r3, #7
 80050dc:	683a      	ldr	r2, [r7, #0]
 80050de:	429a      	cmp	r2, r3
 80050e0:	d20c      	bcs.n	80050fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050e2:	4b22      	ldr	r3, [pc, #136]	; (800516c <HAL_RCC_ClockConfig+0x1b8>)
 80050e4:	683a      	ldr	r2, [r7, #0]
 80050e6:	b2d2      	uxtb	r2, r2
 80050e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ea:	4b20      	ldr	r3, [pc, #128]	; (800516c <HAL_RCC_ClockConfig+0x1b8>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0307 	and.w	r3, r3, #7
 80050f2:	683a      	ldr	r2, [r7, #0]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d001      	beq.n	80050fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e032      	b.n	8005162 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0304 	and.w	r3, r3, #4
 8005104:	2b00      	cmp	r3, #0
 8005106:	d008      	beq.n	800511a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005108:	4b19      	ldr	r3, [pc, #100]	; (8005170 <HAL_RCC_ClockConfig+0x1bc>)
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	4916      	ldr	r1, [pc, #88]	; (8005170 <HAL_RCC_ClockConfig+0x1bc>)
 8005116:	4313      	orrs	r3, r2
 8005118:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0308 	and.w	r3, r3, #8
 8005122:	2b00      	cmp	r3, #0
 8005124:	d009      	beq.n	800513a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005126:	4b12      	ldr	r3, [pc, #72]	; (8005170 <HAL_RCC_ClockConfig+0x1bc>)
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	00db      	lsls	r3, r3, #3
 8005134:	490e      	ldr	r1, [pc, #56]	; (8005170 <HAL_RCC_ClockConfig+0x1bc>)
 8005136:	4313      	orrs	r3, r2
 8005138:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800513a:	f000 f821 	bl	8005180 <HAL_RCC_GetSysClockFreq>
 800513e:	4602      	mov	r2, r0
 8005140:	4b0b      	ldr	r3, [pc, #44]	; (8005170 <HAL_RCC_ClockConfig+0x1bc>)
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	091b      	lsrs	r3, r3, #4
 8005146:	f003 030f 	and.w	r3, r3, #15
 800514a:	490a      	ldr	r1, [pc, #40]	; (8005174 <HAL_RCC_ClockConfig+0x1c0>)
 800514c:	5ccb      	ldrb	r3, [r1, r3]
 800514e:	fa22 f303 	lsr.w	r3, r2, r3
 8005152:	4a09      	ldr	r2, [pc, #36]	; (8005178 <HAL_RCC_ClockConfig+0x1c4>)
 8005154:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005156:	4b09      	ldr	r3, [pc, #36]	; (800517c <HAL_RCC_ClockConfig+0x1c8>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4618      	mov	r0, r3
 800515c:	f7fe f8a8 	bl	80032b0 <HAL_InitTick>

  return HAL_OK;
 8005160:	2300      	movs	r3, #0
}
 8005162:	4618      	mov	r0, r3
 8005164:	3710      	adds	r7, #16
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	40023c00 	.word	0x40023c00
 8005170:	40023800 	.word	0x40023800
 8005174:	08007eec 	.word	0x08007eec
 8005178:	20000008 	.word	0x20000008
 800517c:	2000000c 	.word	0x2000000c

08005180 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005180:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005184:	b094      	sub	sp, #80	; 0x50
 8005186:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005188:	2300      	movs	r3, #0
 800518a:	647b      	str	r3, [r7, #68]	; 0x44
 800518c:	2300      	movs	r3, #0
 800518e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005190:	2300      	movs	r3, #0
 8005192:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005194:	2300      	movs	r3, #0
 8005196:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005198:	4b79      	ldr	r3, [pc, #484]	; (8005380 <HAL_RCC_GetSysClockFreq+0x200>)
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	f003 030c 	and.w	r3, r3, #12
 80051a0:	2b08      	cmp	r3, #8
 80051a2:	d00d      	beq.n	80051c0 <HAL_RCC_GetSysClockFreq+0x40>
 80051a4:	2b08      	cmp	r3, #8
 80051a6:	f200 80e1 	bhi.w	800536c <HAL_RCC_GetSysClockFreq+0x1ec>
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d002      	beq.n	80051b4 <HAL_RCC_GetSysClockFreq+0x34>
 80051ae:	2b04      	cmp	r3, #4
 80051b0:	d003      	beq.n	80051ba <HAL_RCC_GetSysClockFreq+0x3a>
 80051b2:	e0db      	b.n	800536c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051b4:	4b73      	ldr	r3, [pc, #460]	; (8005384 <HAL_RCC_GetSysClockFreq+0x204>)
 80051b6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80051b8:	e0db      	b.n	8005372 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051ba:	4b73      	ldr	r3, [pc, #460]	; (8005388 <HAL_RCC_GetSysClockFreq+0x208>)
 80051bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051be:	e0d8      	b.n	8005372 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051c0:	4b6f      	ldr	r3, [pc, #444]	; (8005380 <HAL_RCC_GetSysClockFreq+0x200>)
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051c8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051ca:	4b6d      	ldr	r3, [pc, #436]	; (8005380 <HAL_RCC_GetSysClockFreq+0x200>)
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d063      	beq.n	800529e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051d6:	4b6a      	ldr	r3, [pc, #424]	; (8005380 <HAL_RCC_GetSysClockFreq+0x200>)
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	099b      	lsrs	r3, r3, #6
 80051dc:	2200      	movs	r2, #0
 80051de:	63bb      	str	r3, [r7, #56]	; 0x38
 80051e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80051e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051e8:	633b      	str	r3, [r7, #48]	; 0x30
 80051ea:	2300      	movs	r3, #0
 80051ec:	637b      	str	r3, [r7, #52]	; 0x34
 80051ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80051f2:	4622      	mov	r2, r4
 80051f4:	462b      	mov	r3, r5
 80051f6:	f04f 0000 	mov.w	r0, #0
 80051fa:	f04f 0100 	mov.w	r1, #0
 80051fe:	0159      	lsls	r1, r3, #5
 8005200:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005204:	0150      	lsls	r0, r2, #5
 8005206:	4602      	mov	r2, r0
 8005208:	460b      	mov	r3, r1
 800520a:	4621      	mov	r1, r4
 800520c:	1a51      	subs	r1, r2, r1
 800520e:	6139      	str	r1, [r7, #16]
 8005210:	4629      	mov	r1, r5
 8005212:	eb63 0301 	sbc.w	r3, r3, r1
 8005216:	617b      	str	r3, [r7, #20]
 8005218:	f04f 0200 	mov.w	r2, #0
 800521c:	f04f 0300 	mov.w	r3, #0
 8005220:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005224:	4659      	mov	r1, fp
 8005226:	018b      	lsls	r3, r1, #6
 8005228:	4651      	mov	r1, sl
 800522a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800522e:	4651      	mov	r1, sl
 8005230:	018a      	lsls	r2, r1, #6
 8005232:	4651      	mov	r1, sl
 8005234:	ebb2 0801 	subs.w	r8, r2, r1
 8005238:	4659      	mov	r1, fp
 800523a:	eb63 0901 	sbc.w	r9, r3, r1
 800523e:	f04f 0200 	mov.w	r2, #0
 8005242:	f04f 0300 	mov.w	r3, #0
 8005246:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800524a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800524e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005252:	4690      	mov	r8, r2
 8005254:	4699      	mov	r9, r3
 8005256:	4623      	mov	r3, r4
 8005258:	eb18 0303 	adds.w	r3, r8, r3
 800525c:	60bb      	str	r3, [r7, #8]
 800525e:	462b      	mov	r3, r5
 8005260:	eb49 0303 	adc.w	r3, r9, r3
 8005264:	60fb      	str	r3, [r7, #12]
 8005266:	f04f 0200 	mov.w	r2, #0
 800526a:	f04f 0300 	mov.w	r3, #0
 800526e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005272:	4629      	mov	r1, r5
 8005274:	024b      	lsls	r3, r1, #9
 8005276:	4621      	mov	r1, r4
 8005278:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800527c:	4621      	mov	r1, r4
 800527e:	024a      	lsls	r2, r1, #9
 8005280:	4610      	mov	r0, r2
 8005282:	4619      	mov	r1, r3
 8005284:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005286:	2200      	movs	r2, #0
 8005288:	62bb      	str	r3, [r7, #40]	; 0x28
 800528a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800528c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005290:	f7fa fffe 	bl	8000290 <__aeabi_uldivmod>
 8005294:	4602      	mov	r2, r0
 8005296:	460b      	mov	r3, r1
 8005298:	4613      	mov	r3, r2
 800529a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800529c:	e058      	b.n	8005350 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800529e:	4b38      	ldr	r3, [pc, #224]	; (8005380 <HAL_RCC_GetSysClockFreq+0x200>)
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	099b      	lsrs	r3, r3, #6
 80052a4:	2200      	movs	r2, #0
 80052a6:	4618      	mov	r0, r3
 80052a8:	4611      	mov	r1, r2
 80052aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80052ae:	623b      	str	r3, [r7, #32]
 80052b0:	2300      	movs	r3, #0
 80052b2:	627b      	str	r3, [r7, #36]	; 0x24
 80052b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80052b8:	4642      	mov	r2, r8
 80052ba:	464b      	mov	r3, r9
 80052bc:	f04f 0000 	mov.w	r0, #0
 80052c0:	f04f 0100 	mov.w	r1, #0
 80052c4:	0159      	lsls	r1, r3, #5
 80052c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052ca:	0150      	lsls	r0, r2, #5
 80052cc:	4602      	mov	r2, r0
 80052ce:	460b      	mov	r3, r1
 80052d0:	4641      	mov	r1, r8
 80052d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80052d6:	4649      	mov	r1, r9
 80052d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80052dc:	f04f 0200 	mov.w	r2, #0
 80052e0:	f04f 0300 	mov.w	r3, #0
 80052e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80052e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80052ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80052f0:	ebb2 040a 	subs.w	r4, r2, sl
 80052f4:	eb63 050b 	sbc.w	r5, r3, fp
 80052f8:	f04f 0200 	mov.w	r2, #0
 80052fc:	f04f 0300 	mov.w	r3, #0
 8005300:	00eb      	lsls	r3, r5, #3
 8005302:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005306:	00e2      	lsls	r2, r4, #3
 8005308:	4614      	mov	r4, r2
 800530a:	461d      	mov	r5, r3
 800530c:	4643      	mov	r3, r8
 800530e:	18e3      	adds	r3, r4, r3
 8005310:	603b      	str	r3, [r7, #0]
 8005312:	464b      	mov	r3, r9
 8005314:	eb45 0303 	adc.w	r3, r5, r3
 8005318:	607b      	str	r3, [r7, #4]
 800531a:	f04f 0200 	mov.w	r2, #0
 800531e:	f04f 0300 	mov.w	r3, #0
 8005322:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005326:	4629      	mov	r1, r5
 8005328:	028b      	lsls	r3, r1, #10
 800532a:	4621      	mov	r1, r4
 800532c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005330:	4621      	mov	r1, r4
 8005332:	028a      	lsls	r2, r1, #10
 8005334:	4610      	mov	r0, r2
 8005336:	4619      	mov	r1, r3
 8005338:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800533a:	2200      	movs	r2, #0
 800533c:	61bb      	str	r3, [r7, #24]
 800533e:	61fa      	str	r2, [r7, #28]
 8005340:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005344:	f7fa ffa4 	bl	8000290 <__aeabi_uldivmod>
 8005348:	4602      	mov	r2, r0
 800534a:	460b      	mov	r3, r1
 800534c:	4613      	mov	r3, r2
 800534e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005350:	4b0b      	ldr	r3, [pc, #44]	; (8005380 <HAL_RCC_GetSysClockFreq+0x200>)
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	0c1b      	lsrs	r3, r3, #16
 8005356:	f003 0303 	and.w	r3, r3, #3
 800535a:	3301      	adds	r3, #1
 800535c:	005b      	lsls	r3, r3, #1
 800535e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005360:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005362:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005364:	fbb2 f3f3 	udiv	r3, r2, r3
 8005368:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800536a:	e002      	b.n	8005372 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800536c:	4b05      	ldr	r3, [pc, #20]	; (8005384 <HAL_RCC_GetSysClockFreq+0x204>)
 800536e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005370:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005372:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005374:	4618      	mov	r0, r3
 8005376:	3750      	adds	r7, #80	; 0x50
 8005378:	46bd      	mov	sp, r7
 800537a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800537e:	bf00      	nop
 8005380:	40023800 	.word	0x40023800
 8005384:	00f42400 	.word	0x00f42400
 8005388:	007a1200 	.word	0x007a1200

0800538c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800538c:	b480      	push	{r7}
 800538e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005390:	4b03      	ldr	r3, [pc, #12]	; (80053a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005392:	681b      	ldr	r3, [r3, #0]
}
 8005394:	4618      	mov	r0, r3
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	20000008 	.word	0x20000008

080053a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80053a8:	f7ff fff0 	bl	800538c <HAL_RCC_GetHCLKFreq>
 80053ac:	4602      	mov	r2, r0
 80053ae:	4b05      	ldr	r3, [pc, #20]	; (80053c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80053b0:	689b      	ldr	r3, [r3, #8]
 80053b2:	0a9b      	lsrs	r3, r3, #10
 80053b4:	f003 0307 	and.w	r3, r3, #7
 80053b8:	4903      	ldr	r1, [pc, #12]	; (80053c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053ba:	5ccb      	ldrb	r3, [r1, r3]
 80053bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	bd80      	pop	{r7, pc}
 80053c4:	40023800 	.word	0x40023800
 80053c8:	08007efc 	.word	0x08007efc

080053cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80053d0:	f7ff ffdc 	bl	800538c <HAL_RCC_GetHCLKFreq>
 80053d4:	4602      	mov	r2, r0
 80053d6:	4b05      	ldr	r3, [pc, #20]	; (80053ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	0b5b      	lsrs	r3, r3, #13
 80053dc:	f003 0307 	and.w	r3, r3, #7
 80053e0:	4903      	ldr	r1, [pc, #12]	; (80053f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053e2:	5ccb      	ldrb	r3, [r1, r3]
 80053e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	40023800 	.word	0x40023800
 80053f0:	08007efc 	.word	0x08007efc

080053f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d101      	bne.n	8005406 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e07b      	b.n	80054fe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800540a:	2b00      	cmp	r3, #0
 800540c:	d108      	bne.n	8005420 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	685b      	ldr	r3, [r3, #4]
 8005412:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005416:	d009      	beq.n	800542c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	61da      	str	r2, [r3, #28]
 800541e:	e005      	b.n	800542c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2200      	movs	r2, #0
 8005424:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	2200      	movs	r2, #0
 800542a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005438:	b2db      	uxtb	r3, r3
 800543a:	2b00      	cmp	r3, #0
 800543c:	d106      	bne.n	800544c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f7fd fda0 	bl	8002f8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2202      	movs	r2, #2
 8005450:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005462:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	689b      	ldr	r3, [r3, #8]
 8005470:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005474:	431a      	orrs	r2, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800547e:	431a      	orrs	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	f003 0302 	and.w	r3, r3, #2
 8005488:	431a      	orrs	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	695b      	ldr	r3, [r3, #20]
 800548e:	f003 0301 	and.w	r3, r3, #1
 8005492:	431a      	orrs	r2, r3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	699b      	ldr	r3, [r3, #24]
 8005498:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800549c:	431a      	orrs	r2, r3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	69db      	ldr	r3, [r3, #28]
 80054a2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054a6:	431a      	orrs	r2, r3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6a1b      	ldr	r3, [r3, #32]
 80054ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054b0:	ea42 0103 	orr.w	r1, r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	430a      	orrs	r2, r1
 80054c2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	699b      	ldr	r3, [r3, #24]
 80054c8:	0c1b      	lsrs	r3, r3, #16
 80054ca:	f003 0104 	and.w	r1, r3, #4
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d2:	f003 0210 	and.w	r2, r3, #16
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	430a      	orrs	r2, r1
 80054dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	69da      	ldr	r2, [r3, #28]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80054fc:	2300      	movs	r3, #0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3708      	adds	r7, #8
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}

08005506 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005506:	b580      	push	{r7, lr}
 8005508:	b08c      	sub	sp, #48	; 0x30
 800550a:	af00      	add	r7, sp, #0
 800550c:	60f8      	str	r0, [r7, #12]
 800550e:	60b9      	str	r1, [r7, #8]
 8005510:	607a      	str	r2, [r7, #4]
 8005512:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005514:	2301      	movs	r3, #1
 8005516:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005518:	2300      	movs	r3, #0
 800551a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005524:	2b01      	cmp	r3, #1
 8005526:	d101      	bne.n	800552c <HAL_SPI_TransmitReceive+0x26>
 8005528:	2302      	movs	r3, #2
 800552a:	e18a      	b.n	8005842 <HAL_SPI_TransmitReceive+0x33c>
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005534:	f7fd ff00 	bl	8003338 <HAL_GetTick>
 8005538:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005540:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800554a:	887b      	ldrh	r3, [r7, #2]
 800554c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800554e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005552:	2b01      	cmp	r3, #1
 8005554:	d00f      	beq.n	8005576 <HAL_SPI_TransmitReceive+0x70>
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800555c:	d107      	bne.n	800556e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d103      	bne.n	800556e <HAL_SPI_TransmitReceive+0x68>
 8005566:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800556a:	2b04      	cmp	r3, #4
 800556c:	d003      	beq.n	8005576 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800556e:	2302      	movs	r3, #2
 8005570:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005574:	e15b      	b.n	800582e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d005      	beq.n	8005588 <HAL_SPI_TransmitReceive+0x82>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d002      	beq.n	8005588 <HAL_SPI_TransmitReceive+0x82>
 8005582:	887b      	ldrh	r3, [r7, #2]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d103      	bne.n	8005590 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800558e:	e14e      	b.n	800582e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005596:	b2db      	uxtb	r3, r3
 8005598:	2b04      	cmp	r3, #4
 800559a:	d003      	beq.n	80055a4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	2205      	movs	r2, #5
 80055a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2200      	movs	r2, #0
 80055a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	887a      	ldrh	r2, [r7, #2]
 80055b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	887a      	ldrh	r2, [r7, #2]
 80055ba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	68ba      	ldr	r2, [r7, #8]
 80055c0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	887a      	ldrh	r2, [r7, #2]
 80055c6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	887a      	ldrh	r2, [r7, #2]
 80055cc:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2200      	movs	r2, #0
 80055d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2200      	movs	r2, #0
 80055d8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055e4:	2b40      	cmp	r3, #64	; 0x40
 80055e6:	d007      	beq.n	80055f8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005600:	d178      	bne.n	80056f4 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d002      	beq.n	8005610 <HAL_SPI_TransmitReceive+0x10a>
 800560a:	8b7b      	ldrh	r3, [r7, #26]
 800560c:	2b01      	cmp	r3, #1
 800560e:	d166      	bne.n	80056de <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005614:	881a      	ldrh	r2, [r3, #0]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005620:	1c9a      	adds	r2, r3, #2
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800562a:	b29b      	uxth	r3, r3
 800562c:	3b01      	subs	r3, #1
 800562e:	b29a      	uxth	r2, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005634:	e053      	b.n	80056de <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	f003 0302 	and.w	r3, r3, #2
 8005640:	2b02      	cmp	r3, #2
 8005642:	d11b      	bne.n	800567c <HAL_SPI_TransmitReceive+0x176>
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005648:	b29b      	uxth	r3, r3
 800564a:	2b00      	cmp	r3, #0
 800564c:	d016      	beq.n	800567c <HAL_SPI_TransmitReceive+0x176>
 800564e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005650:	2b01      	cmp	r3, #1
 8005652:	d113      	bne.n	800567c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005658:	881a      	ldrh	r2, [r3, #0]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005664:	1c9a      	adds	r2, r3, #2
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800566e:	b29b      	uxth	r3, r3
 8005670:	3b01      	subs	r3, #1
 8005672:	b29a      	uxth	r2, r3
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005678:	2300      	movs	r3, #0
 800567a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f003 0301 	and.w	r3, r3, #1
 8005686:	2b01      	cmp	r3, #1
 8005688:	d119      	bne.n	80056be <HAL_SPI_TransmitReceive+0x1b8>
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800568e:	b29b      	uxth	r3, r3
 8005690:	2b00      	cmp	r3, #0
 8005692:	d014      	beq.n	80056be <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68da      	ldr	r2, [r3, #12]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800569e:	b292      	uxth	r2, r2
 80056a0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a6:	1c9a      	adds	r2, r3, #2
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	3b01      	subs	r3, #1
 80056b4:	b29a      	uxth	r2, r3
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80056ba:	2301      	movs	r3, #1
 80056bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80056be:	f7fd fe3b 	bl	8003338 <HAL_GetTick>
 80056c2:	4602      	mov	r2, r0
 80056c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d807      	bhi.n	80056de <HAL_SPI_TransmitReceive+0x1d8>
 80056ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d4:	d003      	beq.n	80056de <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80056dc:	e0a7      	b.n	800582e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1a6      	bne.n	8005636 <HAL_SPI_TransmitReceive+0x130>
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d1a1      	bne.n	8005636 <HAL_SPI_TransmitReceive+0x130>
 80056f2:	e07c      	b.n	80057ee <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d002      	beq.n	8005702 <HAL_SPI_TransmitReceive+0x1fc>
 80056fc:	8b7b      	ldrh	r3, [r7, #26]
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d16b      	bne.n	80057da <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	330c      	adds	r3, #12
 800570c:	7812      	ldrb	r2, [r2, #0]
 800570e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005714:	1c5a      	adds	r2, r3, #1
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800571e:	b29b      	uxth	r3, r3
 8005720:	3b01      	subs	r3, #1
 8005722:	b29a      	uxth	r2, r3
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005728:	e057      	b.n	80057da <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	f003 0302 	and.w	r3, r3, #2
 8005734:	2b02      	cmp	r3, #2
 8005736:	d11c      	bne.n	8005772 <HAL_SPI_TransmitReceive+0x26c>
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800573c:	b29b      	uxth	r3, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d017      	beq.n	8005772 <HAL_SPI_TransmitReceive+0x26c>
 8005742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005744:	2b01      	cmp	r3, #1
 8005746:	d114      	bne.n	8005772 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	330c      	adds	r3, #12
 8005752:	7812      	ldrb	r2, [r2, #0]
 8005754:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800575a:	1c5a      	adds	r2, r3, #1
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005764:	b29b      	uxth	r3, r3
 8005766:	3b01      	subs	r3, #1
 8005768:	b29a      	uxth	r2, r3
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800576e:	2300      	movs	r3, #0
 8005770:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	f003 0301 	and.w	r3, r3, #1
 800577c:	2b01      	cmp	r3, #1
 800577e:	d119      	bne.n	80057b4 <HAL_SPI_TransmitReceive+0x2ae>
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005784:	b29b      	uxth	r3, r3
 8005786:	2b00      	cmp	r3, #0
 8005788:	d014      	beq.n	80057b4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	68da      	ldr	r2, [r3, #12]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005794:	b2d2      	uxtb	r2, r2
 8005796:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579c:	1c5a      	adds	r2, r3, #1
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	3b01      	subs	r3, #1
 80057aa:	b29a      	uxth	r2, r3
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80057b0:	2301      	movs	r3, #1
 80057b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80057b4:	f7fd fdc0 	bl	8003338 <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d803      	bhi.n	80057cc <HAL_SPI_TransmitReceive+0x2c6>
 80057c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ca:	d102      	bne.n	80057d2 <HAL_SPI_TransmitReceive+0x2cc>
 80057cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d103      	bne.n	80057da <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80057d8:	e029      	b.n	800582e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057de:	b29b      	uxth	r3, r3
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d1a2      	bne.n	800572a <HAL_SPI_TransmitReceive+0x224>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d19d      	bne.n	800572a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80057f2:	68f8      	ldr	r0, [r7, #12]
 80057f4:	f000 f8b2 	bl	800595c <SPI_EndRxTxTransaction>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d006      	beq.n	800580c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2220      	movs	r2, #32
 8005808:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800580a:	e010      	b.n	800582e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d10b      	bne.n	800582c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005814:	2300      	movs	r3, #0
 8005816:	617b      	str	r3, [r7, #20]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	617b      	str	r3, [r7, #20]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	689b      	ldr	r3, [r3, #8]
 8005826:	617b      	str	r3, [r7, #20]
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	e000      	b.n	800582e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800582c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2201      	movs	r2, #1
 8005832:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2200      	movs	r2, #0
 800583a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800583e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005842:	4618      	mov	r0, r3
 8005844:	3730      	adds	r7, #48	; 0x30
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}
	...

0800584c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b088      	sub	sp, #32
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	603b      	str	r3, [r7, #0]
 8005858:	4613      	mov	r3, r2
 800585a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800585c:	f7fd fd6c 	bl	8003338 <HAL_GetTick>
 8005860:	4602      	mov	r2, r0
 8005862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005864:	1a9b      	subs	r3, r3, r2
 8005866:	683a      	ldr	r2, [r7, #0]
 8005868:	4413      	add	r3, r2
 800586a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800586c:	f7fd fd64 	bl	8003338 <HAL_GetTick>
 8005870:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005872:	4b39      	ldr	r3, [pc, #228]	; (8005958 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	015b      	lsls	r3, r3, #5
 8005878:	0d1b      	lsrs	r3, r3, #20
 800587a:	69fa      	ldr	r2, [r7, #28]
 800587c:	fb02 f303 	mul.w	r3, r2, r3
 8005880:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005882:	e054      	b.n	800592e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800588a:	d050      	beq.n	800592e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800588c:	f7fd fd54 	bl	8003338 <HAL_GetTick>
 8005890:	4602      	mov	r2, r0
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	69fa      	ldr	r2, [r7, #28]
 8005898:	429a      	cmp	r2, r3
 800589a:	d902      	bls.n	80058a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d13d      	bne.n	800591e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	685a      	ldr	r2, [r3, #4]
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80058b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058ba:	d111      	bne.n	80058e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058c4:	d004      	beq.n	80058d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80058ce:	d107      	bne.n	80058e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058e8:	d10f      	bne.n	800590a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058f8:	601a      	str	r2, [r3, #0]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005908:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2201      	movs	r2, #1
 800590e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e017      	b.n	800594e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d101      	bne.n	8005928 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005924:	2300      	movs	r3, #0
 8005926:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	3b01      	subs	r3, #1
 800592c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	689a      	ldr	r2, [r3, #8]
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	4013      	ands	r3, r2
 8005938:	68ba      	ldr	r2, [r7, #8]
 800593a:	429a      	cmp	r2, r3
 800593c:	bf0c      	ite	eq
 800593e:	2301      	moveq	r3, #1
 8005940:	2300      	movne	r3, #0
 8005942:	b2db      	uxtb	r3, r3
 8005944:	461a      	mov	r2, r3
 8005946:	79fb      	ldrb	r3, [r7, #7]
 8005948:	429a      	cmp	r2, r3
 800594a:	d19b      	bne.n	8005884 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800594c:	2300      	movs	r3, #0
}
 800594e:	4618      	mov	r0, r3
 8005950:	3720      	adds	r7, #32
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	20000008 	.word	0x20000008

0800595c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b088      	sub	sp, #32
 8005960:	af02      	add	r7, sp, #8
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005968:	4b1b      	ldr	r3, [pc, #108]	; (80059d8 <SPI_EndRxTxTransaction+0x7c>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4a1b      	ldr	r2, [pc, #108]	; (80059dc <SPI_EndRxTxTransaction+0x80>)
 800596e:	fba2 2303 	umull	r2, r3, r2, r3
 8005972:	0d5b      	lsrs	r3, r3, #21
 8005974:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005978:	fb02 f303 	mul.w	r3, r2, r3
 800597c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005986:	d112      	bne.n	80059ae <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	9300      	str	r3, [sp, #0]
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	2200      	movs	r2, #0
 8005990:	2180      	movs	r1, #128	; 0x80
 8005992:	68f8      	ldr	r0, [r7, #12]
 8005994:	f7ff ff5a 	bl	800584c <SPI_WaitFlagStateUntilTimeout>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d016      	beq.n	80059cc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059a2:	f043 0220 	orr.w	r2, r3, #32
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	e00f      	b.n	80059ce <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d00a      	beq.n	80059ca <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	3b01      	subs	r3, #1
 80059b8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059c4:	2b80      	cmp	r3, #128	; 0x80
 80059c6:	d0f2      	beq.n	80059ae <SPI_EndRxTxTransaction+0x52>
 80059c8:	e000      	b.n	80059cc <SPI_EndRxTxTransaction+0x70>
        break;
 80059ca:	bf00      	nop
  }

  return HAL_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3718      	adds	r7, #24
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	20000008 	.word	0x20000008
 80059dc:	165e9f81 	.word	0x165e9f81

080059e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b082      	sub	sp, #8
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d101      	bne.n	80059f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e041      	b.n	8005a76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d106      	bne.n	8005a0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f7fd fb08 	bl	800301c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2202      	movs	r2, #2
 8005a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	3304      	adds	r3, #4
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	4610      	mov	r0, r2
 8005a20:	f000 fa88 	bl	8005f34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3708      	adds	r7, #8
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
	...

08005a80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b085      	sub	sp, #20
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d001      	beq.n	8005a98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a94:	2301      	movs	r3, #1
 8005a96:	e044      	b.n	8005b22 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2202      	movs	r2, #2
 8005a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68da      	ldr	r2, [r3, #12]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f042 0201 	orr.w	r2, r2, #1
 8005aae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a1e      	ldr	r2, [pc, #120]	; (8005b30 <HAL_TIM_Base_Start_IT+0xb0>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d018      	beq.n	8005aec <HAL_TIM_Base_Start_IT+0x6c>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ac2:	d013      	beq.n	8005aec <HAL_TIM_Base_Start_IT+0x6c>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a1a      	ldr	r2, [pc, #104]	; (8005b34 <HAL_TIM_Base_Start_IT+0xb4>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d00e      	beq.n	8005aec <HAL_TIM_Base_Start_IT+0x6c>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a19      	ldr	r2, [pc, #100]	; (8005b38 <HAL_TIM_Base_Start_IT+0xb8>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d009      	beq.n	8005aec <HAL_TIM_Base_Start_IT+0x6c>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a17      	ldr	r2, [pc, #92]	; (8005b3c <HAL_TIM_Base_Start_IT+0xbc>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d004      	beq.n	8005aec <HAL_TIM_Base_Start_IT+0x6c>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a16      	ldr	r2, [pc, #88]	; (8005b40 <HAL_TIM_Base_Start_IT+0xc0>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d111      	bne.n	8005b10 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	f003 0307 	and.w	r3, r3, #7
 8005af6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2b06      	cmp	r3, #6
 8005afc:	d010      	beq.n	8005b20 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f042 0201 	orr.w	r2, r2, #1
 8005b0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b0e:	e007      	b.n	8005b20 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f042 0201 	orr.w	r2, r2, #1
 8005b1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b20:	2300      	movs	r3, #0
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3714      	adds	r7, #20
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr
 8005b2e:	bf00      	nop
 8005b30:	40010000 	.word	0x40010000
 8005b34:	40000400 	.word	0x40000400
 8005b38:	40000800 	.word	0x40000800
 8005b3c:	40000c00 	.word	0x40000c00
 8005b40:	40014000 	.word	0x40014000

08005b44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	f003 0302 	and.w	r3, r3, #2
 8005b56:	2b02      	cmp	r3, #2
 8005b58:	d122      	bne.n	8005ba0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	f003 0302 	and.w	r3, r3, #2
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d11b      	bne.n	8005ba0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f06f 0202 	mvn.w	r2, #2
 8005b70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2201      	movs	r2, #1
 8005b76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	699b      	ldr	r3, [r3, #24]
 8005b7e:	f003 0303 	and.w	r3, r3, #3
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d003      	beq.n	8005b8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 f9b5 	bl	8005ef6 <HAL_TIM_IC_CaptureCallback>
 8005b8c:	e005      	b.n	8005b9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 f9a7 	bl	8005ee2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 f9b8 	bl	8005f0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	f003 0304 	and.w	r3, r3, #4
 8005baa:	2b04      	cmp	r3, #4
 8005bac:	d122      	bne.n	8005bf4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	f003 0304 	and.w	r3, r3, #4
 8005bb8:	2b04      	cmp	r3, #4
 8005bba:	d11b      	bne.n	8005bf4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f06f 0204 	mvn.w	r2, #4
 8005bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2202      	movs	r2, #2
 8005bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	699b      	ldr	r3, [r3, #24]
 8005bd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d003      	beq.n	8005be2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 f98b 	bl	8005ef6 <HAL_TIM_IC_CaptureCallback>
 8005be0:	e005      	b.n	8005bee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 f97d 	bl	8005ee2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f000 f98e 	bl	8005f0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	f003 0308 	and.w	r3, r3, #8
 8005bfe:	2b08      	cmp	r3, #8
 8005c00:	d122      	bne.n	8005c48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	f003 0308 	and.w	r3, r3, #8
 8005c0c:	2b08      	cmp	r3, #8
 8005c0e:	d11b      	bne.n	8005c48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f06f 0208 	mvn.w	r2, #8
 8005c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2204      	movs	r2, #4
 8005c1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	69db      	ldr	r3, [r3, #28]
 8005c26:	f003 0303 	and.w	r3, r3, #3
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d003      	beq.n	8005c36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 f961 	bl	8005ef6 <HAL_TIM_IC_CaptureCallback>
 8005c34:	e005      	b.n	8005c42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c36:	6878      	ldr	r0, [r7, #4]
 8005c38:	f000 f953 	bl	8005ee2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 f964 	bl	8005f0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	f003 0310 	and.w	r3, r3, #16
 8005c52:	2b10      	cmp	r3, #16
 8005c54:	d122      	bne.n	8005c9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	f003 0310 	and.w	r3, r3, #16
 8005c60:	2b10      	cmp	r3, #16
 8005c62:	d11b      	bne.n	8005c9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f06f 0210 	mvn.w	r2, #16
 8005c6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2208      	movs	r2, #8
 8005c72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	69db      	ldr	r3, [r3, #28]
 8005c7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d003      	beq.n	8005c8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 f937 	bl	8005ef6 <HAL_TIM_IC_CaptureCallback>
 8005c88:	e005      	b.n	8005c96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f000 f929 	bl	8005ee2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f000 f93a 	bl	8005f0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	f003 0301 	and.w	r3, r3, #1
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d10e      	bne.n	8005cc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	f003 0301 	and.w	r3, r3, #1
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d107      	bne.n	8005cc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f06f 0201 	mvn.w	r2, #1
 8005cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f7fd f866 	bl	8002d94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cd2:	2b80      	cmp	r3, #128	; 0x80
 8005cd4:	d10e      	bne.n	8005cf4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ce0:	2b80      	cmp	r3, #128	; 0x80
 8005ce2:	d107      	bne.n	8005cf4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005cee:	6878      	ldr	r0, [r7, #4]
 8005cf0:	f000 fab2 	bl	8006258 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cfe:	2b40      	cmp	r3, #64	; 0x40
 8005d00:	d10e      	bne.n	8005d20 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d0c:	2b40      	cmp	r3, #64	; 0x40
 8005d0e:	d107      	bne.n	8005d20 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f000 f8ff 	bl	8005f1e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	f003 0320 	and.w	r3, r3, #32
 8005d2a:	2b20      	cmp	r3, #32
 8005d2c:	d10e      	bne.n	8005d4c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	68db      	ldr	r3, [r3, #12]
 8005d34:	f003 0320 	and.w	r3, r3, #32
 8005d38:	2b20      	cmp	r3, #32
 8005d3a:	d107      	bne.n	8005d4c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f06f 0220 	mvn.w	r2, #32
 8005d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 fa7c 	bl	8006244 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005d4c:	bf00      	nop
 8005d4e:	3708      	adds	r7, #8
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d101      	bne.n	8005d70 <HAL_TIM_ConfigClockSource+0x1c>
 8005d6c:	2302      	movs	r3, #2
 8005d6e:	e0b4      	b.n	8005eda <HAL_TIM_ConfigClockSource+0x186>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2202      	movs	r2, #2
 8005d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005d8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	68ba      	ldr	r2, [r7, #8]
 8005d9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005da8:	d03e      	beq.n	8005e28 <HAL_TIM_ConfigClockSource+0xd4>
 8005daa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dae:	f200 8087 	bhi.w	8005ec0 <HAL_TIM_ConfigClockSource+0x16c>
 8005db2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005db6:	f000 8086 	beq.w	8005ec6 <HAL_TIM_ConfigClockSource+0x172>
 8005dba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dbe:	d87f      	bhi.n	8005ec0 <HAL_TIM_ConfigClockSource+0x16c>
 8005dc0:	2b70      	cmp	r3, #112	; 0x70
 8005dc2:	d01a      	beq.n	8005dfa <HAL_TIM_ConfigClockSource+0xa6>
 8005dc4:	2b70      	cmp	r3, #112	; 0x70
 8005dc6:	d87b      	bhi.n	8005ec0 <HAL_TIM_ConfigClockSource+0x16c>
 8005dc8:	2b60      	cmp	r3, #96	; 0x60
 8005dca:	d050      	beq.n	8005e6e <HAL_TIM_ConfigClockSource+0x11a>
 8005dcc:	2b60      	cmp	r3, #96	; 0x60
 8005dce:	d877      	bhi.n	8005ec0 <HAL_TIM_ConfigClockSource+0x16c>
 8005dd0:	2b50      	cmp	r3, #80	; 0x50
 8005dd2:	d03c      	beq.n	8005e4e <HAL_TIM_ConfigClockSource+0xfa>
 8005dd4:	2b50      	cmp	r3, #80	; 0x50
 8005dd6:	d873      	bhi.n	8005ec0 <HAL_TIM_ConfigClockSource+0x16c>
 8005dd8:	2b40      	cmp	r3, #64	; 0x40
 8005dda:	d058      	beq.n	8005e8e <HAL_TIM_ConfigClockSource+0x13a>
 8005ddc:	2b40      	cmp	r3, #64	; 0x40
 8005dde:	d86f      	bhi.n	8005ec0 <HAL_TIM_ConfigClockSource+0x16c>
 8005de0:	2b30      	cmp	r3, #48	; 0x30
 8005de2:	d064      	beq.n	8005eae <HAL_TIM_ConfigClockSource+0x15a>
 8005de4:	2b30      	cmp	r3, #48	; 0x30
 8005de6:	d86b      	bhi.n	8005ec0 <HAL_TIM_ConfigClockSource+0x16c>
 8005de8:	2b20      	cmp	r3, #32
 8005dea:	d060      	beq.n	8005eae <HAL_TIM_ConfigClockSource+0x15a>
 8005dec:	2b20      	cmp	r3, #32
 8005dee:	d867      	bhi.n	8005ec0 <HAL_TIM_ConfigClockSource+0x16c>
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d05c      	beq.n	8005eae <HAL_TIM_ConfigClockSource+0x15a>
 8005df4:	2b10      	cmp	r3, #16
 8005df6:	d05a      	beq.n	8005eae <HAL_TIM_ConfigClockSource+0x15a>
 8005df8:	e062      	b.n	8005ec0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6818      	ldr	r0, [r3, #0]
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	6899      	ldr	r1, [r3, #8]
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	685a      	ldr	r2, [r3, #4]
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	68db      	ldr	r3, [r3, #12]
 8005e0a:	f000 f98d 	bl	8006128 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005e1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68ba      	ldr	r2, [r7, #8]
 8005e24:	609a      	str	r2, [r3, #8]
      break;
 8005e26:	e04f      	b.n	8005ec8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6818      	ldr	r0, [r3, #0]
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	6899      	ldr	r1, [r3, #8]
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	685a      	ldr	r2, [r3, #4]
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	f000 f976 	bl	8006128 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	689a      	ldr	r2, [r3, #8]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e4a:	609a      	str	r2, [r3, #8]
      break;
 8005e4c:	e03c      	b.n	8005ec8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6818      	ldr	r0, [r3, #0]
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	6859      	ldr	r1, [r3, #4]
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	f000 f8ea 	bl	8006034 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2150      	movs	r1, #80	; 0x50
 8005e66:	4618      	mov	r0, r3
 8005e68:	f000 f943 	bl	80060f2 <TIM_ITRx_SetConfig>
      break;
 8005e6c:	e02c      	b.n	8005ec8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6818      	ldr	r0, [r3, #0]
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	6859      	ldr	r1, [r3, #4]
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	68db      	ldr	r3, [r3, #12]
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	f000 f909 	bl	8006092 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2160      	movs	r1, #96	; 0x60
 8005e86:	4618      	mov	r0, r3
 8005e88:	f000 f933 	bl	80060f2 <TIM_ITRx_SetConfig>
      break;
 8005e8c:	e01c      	b.n	8005ec8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6818      	ldr	r0, [r3, #0]
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	6859      	ldr	r1, [r3, #4]
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	f000 f8ca 	bl	8006034 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	2140      	movs	r1, #64	; 0x40
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f000 f923 	bl	80060f2 <TIM_ITRx_SetConfig>
      break;
 8005eac:	e00c      	b.n	8005ec8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	4610      	mov	r0, r2
 8005eba:	f000 f91a 	bl	80060f2 <TIM_ITRx_SetConfig>
      break;
 8005ebe:	e003      	b.n	8005ec8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ec4:	e000      	b.n	8005ec8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005ec6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	3710      	adds	r7, #16
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}

08005ee2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ee2:	b480      	push	{r7}
 8005ee4:	b083      	sub	sp, #12
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005eea:	bf00      	nop
 8005eec:	370c      	adds	r7, #12
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr

08005ef6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ef6:	b480      	push	{r7}
 8005ef8:	b083      	sub	sp, #12
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005efe:	bf00      	nop
 8005f00:	370c      	adds	r7, #12
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr

08005f0a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f0a:	b480      	push	{r7}
 8005f0c:	b083      	sub	sp, #12
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f12:	bf00      	nop
 8005f14:	370c      	adds	r7, #12
 8005f16:	46bd      	mov	sp, r7
 8005f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1c:	4770      	bx	lr

08005f1e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f1e:	b480      	push	{r7}
 8005f20:	b083      	sub	sp, #12
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f26:	bf00      	nop
 8005f28:	370c      	adds	r7, #12
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr
	...

08005f34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b085      	sub	sp, #20
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a34      	ldr	r2, [pc, #208]	; (8006018 <TIM_Base_SetConfig+0xe4>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d00f      	beq.n	8005f6c <TIM_Base_SetConfig+0x38>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f52:	d00b      	beq.n	8005f6c <TIM_Base_SetConfig+0x38>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4a31      	ldr	r2, [pc, #196]	; (800601c <TIM_Base_SetConfig+0xe8>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d007      	beq.n	8005f6c <TIM_Base_SetConfig+0x38>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	4a30      	ldr	r2, [pc, #192]	; (8006020 <TIM_Base_SetConfig+0xec>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d003      	beq.n	8005f6c <TIM_Base_SetConfig+0x38>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	4a2f      	ldr	r2, [pc, #188]	; (8006024 <TIM_Base_SetConfig+0xf0>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d108      	bne.n	8005f7e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	68fa      	ldr	r2, [r7, #12]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4a25      	ldr	r2, [pc, #148]	; (8006018 <TIM_Base_SetConfig+0xe4>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d01b      	beq.n	8005fbe <TIM_Base_SetConfig+0x8a>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f8c:	d017      	beq.n	8005fbe <TIM_Base_SetConfig+0x8a>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4a22      	ldr	r2, [pc, #136]	; (800601c <TIM_Base_SetConfig+0xe8>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d013      	beq.n	8005fbe <TIM_Base_SetConfig+0x8a>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a21      	ldr	r2, [pc, #132]	; (8006020 <TIM_Base_SetConfig+0xec>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d00f      	beq.n	8005fbe <TIM_Base_SetConfig+0x8a>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a20      	ldr	r2, [pc, #128]	; (8006024 <TIM_Base_SetConfig+0xf0>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d00b      	beq.n	8005fbe <TIM_Base_SetConfig+0x8a>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a1f      	ldr	r2, [pc, #124]	; (8006028 <TIM_Base_SetConfig+0xf4>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d007      	beq.n	8005fbe <TIM_Base_SetConfig+0x8a>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a1e      	ldr	r2, [pc, #120]	; (800602c <TIM_Base_SetConfig+0xf8>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d003      	beq.n	8005fbe <TIM_Base_SetConfig+0x8a>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a1d      	ldr	r2, [pc, #116]	; (8006030 <TIM_Base_SetConfig+0xfc>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d108      	bne.n	8005fd0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	695b      	ldr	r3, [r3, #20]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	689a      	ldr	r2, [r3, #8]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4a08      	ldr	r2, [pc, #32]	; (8006018 <TIM_Base_SetConfig+0xe4>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d103      	bne.n	8006004 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	691a      	ldr	r2, [r3, #16]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	615a      	str	r2, [r3, #20]
}
 800600a:	bf00      	nop
 800600c:	3714      	adds	r7, #20
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr
 8006016:	bf00      	nop
 8006018:	40010000 	.word	0x40010000
 800601c:	40000400 	.word	0x40000400
 8006020:	40000800 	.word	0x40000800
 8006024:	40000c00 	.word	0x40000c00
 8006028:	40014000 	.word	0x40014000
 800602c:	40014400 	.word	0x40014400
 8006030:	40014800 	.word	0x40014800

08006034 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006034:	b480      	push	{r7}
 8006036:	b087      	sub	sp, #28
 8006038:	af00      	add	r7, sp, #0
 800603a:	60f8      	str	r0, [r7, #12]
 800603c:	60b9      	str	r1, [r7, #8]
 800603e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6a1b      	ldr	r3, [r3, #32]
 8006044:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6a1b      	ldr	r3, [r3, #32]
 800604a:	f023 0201 	bic.w	r2, r3, #1
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	699b      	ldr	r3, [r3, #24]
 8006056:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800605e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	011b      	lsls	r3, r3, #4
 8006064:	693a      	ldr	r2, [r7, #16]
 8006066:	4313      	orrs	r3, r2
 8006068:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	f023 030a 	bic.w	r3, r3, #10
 8006070:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006072:	697a      	ldr	r2, [r7, #20]
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	4313      	orrs	r3, r2
 8006078:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	693a      	ldr	r2, [r7, #16]
 800607e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	697a      	ldr	r2, [r7, #20]
 8006084:	621a      	str	r2, [r3, #32]
}
 8006086:	bf00      	nop
 8006088:	371c      	adds	r7, #28
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr

08006092 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006092:	b480      	push	{r7}
 8006094:	b087      	sub	sp, #28
 8006096:	af00      	add	r7, sp, #0
 8006098:	60f8      	str	r0, [r7, #12]
 800609a:	60b9      	str	r1, [r7, #8]
 800609c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	6a1b      	ldr	r3, [r3, #32]
 80060a2:	f023 0210 	bic.w	r2, r3, #16
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	699b      	ldr	r3, [r3, #24]
 80060ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6a1b      	ldr	r3, [r3, #32]
 80060b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	031b      	lsls	r3, r3, #12
 80060c2:	697a      	ldr	r2, [r7, #20]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80060ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	011b      	lsls	r3, r3, #4
 80060d4:	693a      	ldr	r2, [r7, #16]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	697a      	ldr	r2, [r7, #20]
 80060de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	693a      	ldr	r2, [r7, #16]
 80060e4:	621a      	str	r2, [r3, #32]
}
 80060e6:	bf00      	nop
 80060e8:	371c      	adds	r7, #28
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr

080060f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060f2:	b480      	push	{r7}
 80060f4:	b085      	sub	sp, #20
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
 80060fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	689b      	ldr	r3, [r3, #8]
 8006100:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006108:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800610a:	683a      	ldr	r2, [r7, #0]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	4313      	orrs	r3, r2
 8006110:	f043 0307 	orr.w	r3, r3, #7
 8006114:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	68fa      	ldr	r2, [r7, #12]
 800611a:	609a      	str	r2, [r3, #8]
}
 800611c:	bf00      	nop
 800611e:	3714      	adds	r7, #20
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006128:	b480      	push	{r7}
 800612a:	b087      	sub	sp, #28
 800612c:	af00      	add	r7, sp, #0
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	607a      	str	r2, [r7, #4]
 8006134:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006142:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	021a      	lsls	r2, r3, #8
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	431a      	orrs	r2, r3
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	4313      	orrs	r3, r2
 8006150:	697a      	ldr	r2, [r7, #20]
 8006152:	4313      	orrs	r3, r2
 8006154:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	697a      	ldr	r2, [r7, #20]
 800615a:	609a      	str	r2, [r3, #8]
}
 800615c:	bf00      	nop
 800615e:	371c      	adds	r7, #28
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006168:	b480      	push	{r7}
 800616a:	b085      	sub	sp, #20
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006178:	2b01      	cmp	r3, #1
 800617a:	d101      	bne.n	8006180 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800617c:	2302      	movs	r3, #2
 800617e:	e050      	b.n	8006222 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2202      	movs	r2, #2
 800618c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	68fa      	ldr	r2, [r7, #12]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68fa      	ldr	r2, [r7, #12]
 80061b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a1c      	ldr	r2, [pc, #112]	; (8006230 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d018      	beq.n	80061f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061cc:	d013      	beq.n	80061f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a18      	ldr	r2, [pc, #96]	; (8006234 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d00e      	beq.n	80061f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a16      	ldr	r2, [pc, #88]	; (8006238 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d009      	beq.n	80061f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a15      	ldr	r2, [pc, #84]	; (800623c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d004      	beq.n	80061f6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a13      	ldr	r2, [pc, #76]	; (8006240 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d10c      	bne.n	8006210 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	68ba      	ldr	r2, [r7, #8]
 8006204:	4313      	orrs	r3, r2
 8006206:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68ba      	ldr	r2, [r7, #8]
 800620e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	3714      	adds	r7, #20
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr
 800622e:	bf00      	nop
 8006230:	40010000 	.word	0x40010000
 8006234:	40000400 	.word	0x40000400
 8006238:	40000800 	.word	0x40000800
 800623c:	40000c00 	.word	0x40000c00
 8006240:	40014000 	.word	0x40014000

08006244 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800624c:	bf00      	nop
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006260:	bf00      	nop
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d101      	bne.n	800627e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e03f      	b.n	80062fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006284:	b2db      	uxtb	r3, r3
 8006286:	2b00      	cmp	r3, #0
 8006288:	d106      	bne.n	8006298 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f7fc feea 	bl	800306c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2224      	movs	r2, #36	; 0x24
 800629c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68da      	ldr	r2, [r3, #12]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f000 fddf 	bl	8006e74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	691a      	ldr	r2, [r3, #16]
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	695a      	ldr	r2, [r3, #20]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	68da      	ldr	r2, [r3, #12]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2220      	movs	r2, #32
 80062f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2220      	movs	r2, #32
 80062f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80062fc:	2300      	movs	r3, #0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3708      	adds	r7, #8
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}

08006306 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006306:	b580      	push	{r7, lr}
 8006308:	b08a      	sub	sp, #40	; 0x28
 800630a:	af02      	add	r7, sp, #8
 800630c:	60f8      	str	r0, [r7, #12]
 800630e:	60b9      	str	r1, [r7, #8]
 8006310:	603b      	str	r3, [r7, #0]
 8006312:	4613      	mov	r3, r2
 8006314:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006316:	2300      	movs	r3, #0
 8006318:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006320:	b2db      	uxtb	r3, r3
 8006322:	2b20      	cmp	r3, #32
 8006324:	d17c      	bne.n	8006420 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d002      	beq.n	8006332 <HAL_UART_Transmit+0x2c>
 800632c:	88fb      	ldrh	r3, [r7, #6]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d101      	bne.n	8006336 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006332:	2301      	movs	r3, #1
 8006334:	e075      	b.n	8006422 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800633c:	2b01      	cmp	r3, #1
 800633e:	d101      	bne.n	8006344 <HAL_UART_Transmit+0x3e>
 8006340:	2302      	movs	r3, #2
 8006342:	e06e      	b.n	8006422 <HAL_UART_Transmit+0x11c>
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2221      	movs	r2, #33	; 0x21
 8006356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800635a:	f7fc ffed 	bl	8003338 <HAL_GetTick>
 800635e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	88fa      	ldrh	r2, [r7, #6]
 8006364:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	88fa      	ldrh	r2, [r7, #6]
 800636a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006374:	d108      	bne.n	8006388 <HAL_UART_Transmit+0x82>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d104      	bne.n	8006388 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800637e:	2300      	movs	r3, #0
 8006380:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	61bb      	str	r3, [r7, #24]
 8006386:	e003      	b.n	8006390 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800638c:	2300      	movs	r3, #0
 800638e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2200      	movs	r2, #0
 8006394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006398:	e02a      	b.n	80063f0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	9300      	str	r3, [sp, #0]
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	2200      	movs	r2, #0
 80063a2:	2180      	movs	r1, #128	; 0x80
 80063a4:	68f8      	ldr	r0, [r7, #12]
 80063a6:	f000 fb1f 	bl	80069e8 <UART_WaitOnFlagUntilTimeout>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d001      	beq.n	80063b4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80063b0:	2303      	movs	r3, #3
 80063b2:	e036      	b.n	8006422 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d10b      	bne.n	80063d2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	881b      	ldrh	r3, [r3, #0]
 80063be:	461a      	mov	r2, r3
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063c8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	3302      	adds	r3, #2
 80063ce:	61bb      	str	r3, [r7, #24]
 80063d0:	e007      	b.n	80063e2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80063d2:	69fb      	ldr	r3, [r7, #28]
 80063d4:	781a      	ldrb	r2, [r3, #0]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	3301      	adds	r3, #1
 80063e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	3b01      	subs	r3, #1
 80063ea:	b29a      	uxth	r2, r3
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d1cf      	bne.n	800639a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	9300      	str	r3, [sp, #0]
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	2200      	movs	r2, #0
 8006402:	2140      	movs	r1, #64	; 0x40
 8006404:	68f8      	ldr	r0, [r7, #12]
 8006406:	f000 faef 	bl	80069e8 <UART_WaitOnFlagUntilTimeout>
 800640a:	4603      	mov	r3, r0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d001      	beq.n	8006414 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006410:	2303      	movs	r3, #3
 8006412:	e006      	b.n	8006422 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2220      	movs	r2, #32
 8006418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800641c:	2300      	movs	r3, #0
 800641e:	e000      	b.n	8006422 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006420:	2302      	movs	r3, #2
  }
}
 8006422:	4618      	mov	r0, r3
 8006424:	3720      	adds	r7, #32
 8006426:	46bd      	mov	sp, r7
 8006428:	bd80      	pop	{r7, pc}

0800642a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800642a:	b580      	push	{r7, lr}
 800642c:	b084      	sub	sp, #16
 800642e:	af00      	add	r7, sp, #0
 8006430:	60f8      	str	r0, [r7, #12]
 8006432:	60b9      	str	r1, [r7, #8]
 8006434:	4613      	mov	r3, r2
 8006436:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800643e:	b2db      	uxtb	r3, r3
 8006440:	2b20      	cmp	r3, #32
 8006442:	d11d      	bne.n	8006480 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006444:	68bb      	ldr	r3, [r7, #8]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d002      	beq.n	8006450 <HAL_UART_Receive_IT+0x26>
 800644a:	88fb      	ldrh	r3, [r7, #6]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d101      	bne.n	8006454 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006450:	2301      	movs	r3, #1
 8006452:	e016      	b.n	8006482 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800645a:	2b01      	cmp	r3, #1
 800645c:	d101      	bne.n	8006462 <HAL_UART_Receive_IT+0x38>
 800645e:	2302      	movs	r3, #2
 8006460:	e00f      	b.n	8006482 <HAL_UART_Receive_IT+0x58>
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2201      	movs	r2, #1
 8006466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2200      	movs	r2, #0
 800646e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006470:	88fb      	ldrh	r3, [r7, #6]
 8006472:	461a      	mov	r2, r3
 8006474:	68b9      	ldr	r1, [r7, #8]
 8006476:	68f8      	ldr	r0, [r7, #12]
 8006478:	f000 fb24 	bl	8006ac4 <UART_Start_Receive_IT>
 800647c:	4603      	mov	r3, r0
 800647e:	e000      	b.n	8006482 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006480:	2302      	movs	r3, #2
  }
}
 8006482:	4618      	mov	r0, r3
 8006484:	3710      	adds	r7, #16
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
	...

0800648c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b0ba      	sub	sp, #232	; 0xe8
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	695b      	ldr	r3, [r3, #20]
 80064ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80064b2:	2300      	movs	r3, #0
 80064b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80064b8:	2300      	movs	r3, #0
 80064ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80064be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064c2:	f003 030f 	and.w	r3, r3, #15
 80064c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80064ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d10f      	bne.n	80064f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80064d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064d6:	f003 0320 	and.w	r3, r3, #32
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d009      	beq.n	80064f2 <HAL_UART_IRQHandler+0x66>
 80064de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064e2:	f003 0320 	and.w	r3, r3, #32
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d003      	beq.n	80064f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 fc07 	bl	8006cfe <UART_Receive_IT>
      return;
 80064f0:	e256      	b.n	80069a0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80064f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	f000 80de 	beq.w	80066b8 <HAL_UART_IRQHandler+0x22c>
 80064fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006500:	f003 0301 	and.w	r3, r3, #1
 8006504:	2b00      	cmp	r3, #0
 8006506:	d106      	bne.n	8006516 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800650c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006510:	2b00      	cmp	r3, #0
 8006512:	f000 80d1 	beq.w	80066b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800651a:	f003 0301 	and.w	r3, r3, #1
 800651e:	2b00      	cmp	r3, #0
 8006520:	d00b      	beq.n	800653a <HAL_UART_IRQHandler+0xae>
 8006522:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800652a:	2b00      	cmp	r3, #0
 800652c:	d005      	beq.n	800653a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006532:	f043 0201 	orr.w	r2, r3, #1
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800653a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800653e:	f003 0304 	and.w	r3, r3, #4
 8006542:	2b00      	cmp	r3, #0
 8006544:	d00b      	beq.n	800655e <HAL_UART_IRQHandler+0xd2>
 8006546:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800654a:	f003 0301 	and.w	r3, r3, #1
 800654e:	2b00      	cmp	r3, #0
 8006550:	d005      	beq.n	800655e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006556:	f043 0202 	orr.w	r2, r3, #2
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800655e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006562:	f003 0302 	and.w	r3, r3, #2
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00b      	beq.n	8006582 <HAL_UART_IRQHandler+0xf6>
 800656a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800656e:	f003 0301 	and.w	r3, r3, #1
 8006572:	2b00      	cmp	r3, #0
 8006574:	d005      	beq.n	8006582 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657a:	f043 0204 	orr.w	r2, r3, #4
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006586:	f003 0308 	and.w	r3, r3, #8
 800658a:	2b00      	cmp	r3, #0
 800658c:	d011      	beq.n	80065b2 <HAL_UART_IRQHandler+0x126>
 800658e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006592:	f003 0320 	and.w	r3, r3, #32
 8006596:	2b00      	cmp	r3, #0
 8006598:	d105      	bne.n	80065a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800659a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800659e:	f003 0301 	and.w	r3, r3, #1
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d005      	beq.n	80065b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065aa:	f043 0208 	orr.w	r2, r3, #8
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	f000 81ed 	beq.w	8006996 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80065bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065c0:	f003 0320 	and.w	r3, r3, #32
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d008      	beq.n	80065da <HAL_UART_IRQHandler+0x14e>
 80065c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065cc:	f003 0320 	and.w	r3, r3, #32
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d002      	beq.n	80065da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f000 fb92 	bl	8006cfe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	695b      	ldr	r3, [r3, #20]
 80065e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065e4:	2b40      	cmp	r3, #64	; 0x40
 80065e6:	bf0c      	ite	eq
 80065e8:	2301      	moveq	r3, #1
 80065ea:	2300      	movne	r3, #0
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f6:	f003 0308 	and.w	r3, r3, #8
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d103      	bne.n	8006606 <HAL_UART_IRQHandler+0x17a>
 80065fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006602:	2b00      	cmp	r3, #0
 8006604:	d04f      	beq.n	80066a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 fa9a 	bl	8006b40 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	695b      	ldr	r3, [r3, #20]
 8006612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006616:	2b40      	cmp	r3, #64	; 0x40
 8006618:	d141      	bne.n	800669e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	3314      	adds	r3, #20
 8006620:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006624:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006628:	e853 3f00 	ldrex	r3, [r3]
 800662c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006630:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006634:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006638:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	3314      	adds	r3, #20
 8006642:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006646:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800664a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006652:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006656:	e841 2300 	strex	r3, r2, [r1]
 800665a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800665e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006662:	2b00      	cmp	r3, #0
 8006664:	d1d9      	bne.n	800661a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800666a:	2b00      	cmp	r3, #0
 800666c:	d013      	beq.n	8006696 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006672:	4a7d      	ldr	r2, [pc, #500]	; (8006868 <HAL_UART_IRQHandler+0x3dc>)
 8006674:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800667a:	4618      	mov	r0, r3
 800667c:	f7fd f80d 	bl	800369a <HAL_DMA_Abort_IT>
 8006680:	4603      	mov	r3, r0
 8006682:	2b00      	cmp	r3, #0
 8006684:	d016      	beq.n	80066b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800668a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006690:	4610      	mov	r0, r2
 8006692:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006694:	e00e      	b.n	80066b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 f990 	bl	80069bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800669c:	e00a      	b.n	80066b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 f98c 	bl	80069bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066a4:	e006      	b.n	80066b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 f988 	bl	80069bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80066b2:	e170      	b.n	8006996 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066b4:	bf00      	nop
    return;
 80066b6:	e16e      	b.n	8006996 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066bc:	2b01      	cmp	r3, #1
 80066be:	f040 814a 	bne.w	8006956 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80066c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066c6:	f003 0310 	and.w	r3, r3, #16
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	f000 8143 	beq.w	8006956 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80066d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066d4:	f003 0310 	and.w	r3, r3, #16
 80066d8:	2b00      	cmp	r3, #0
 80066da:	f000 813c 	beq.w	8006956 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80066de:	2300      	movs	r3, #0
 80066e0:	60bb      	str	r3, [r7, #8]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	60bb      	str	r3, [r7, #8]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	60bb      	str	r3, [r7, #8]
 80066f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	695b      	ldr	r3, [r3, #20]
 80066fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066fe:	2b40      	cmp	r3, #64	; 0x40
 8006700:	f040 80b4 	bne.w	800686c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006710:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006714:	2b00      	cmp	r3, #0
 8006716:	f000 8140 	beq.w	800699a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800671e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006722:	429a      	cmp	r2, r3
 8006724:	f080 8139 	bcs.w	800699a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800672e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006734:	69db      	ldr	r3, [r3, #28]
 8006736:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800673a:	f000 8088 	beq.w	800684e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	330c      	adds	r3, #12
 8006744:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006748:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800674c:	e853 3f00 	ldrex	r3, [r3]
 8006750:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006754:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006758:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800675c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	330c      	adds	r3, #12
 8006766:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800676a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800676e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006772:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006776:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800677a:	e841 2300 	strex	r3, r2, [r1]
 800677e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006782:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006786:	2b00      	cmp	r3, #0
 8006788:	d1d9      	bne.n	800673e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	3314      	adds	r3, #20
 8006790:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006792:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006794:	e853 3f00 	ldrex	r3, [r3]
 8006798:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800679a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800679c:	f023 0301 	bic.w	r3, r3, #1
 80067a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	3314      	adds	r3, #20
 80067aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80067ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80067b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80067b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80067ba:	e841 2300 	strex	r3, r2, [r1]
 80067be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80067c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d1e1      	bne.n	800678a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	3314      	adds	r3, #20
 80067cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067d0:	e853 3f00 	ldrex	r3, [r3]
 80067d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80067d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	3314      	adds	r3, #20
 80067e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80067ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80067ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80067f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80067f2:	e841 2300 	strex	r3, r2, [r1]
 80067f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80067f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d1e3      	bne.n	80067c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2220      	movs	r2, #32
 8006802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	330c      	adds	r3, #12
 8006812:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006814:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006816:	e853 3f00 	ldrex	r3, [r3]
 800681a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800681c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800681e:	f023 0310 	bic.w	r3, r3, #16
 8006822:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	330c      	adds	r3, #12
 800682c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006830:	65ba      	str	r2, [r7, #88]	; 0x58
 8006832:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006834:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006836:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006838:	e841 2300 	strex	r3, r2, [r1]
 800683c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800683e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006840:	2b00      	cmp	r3, #0
 8006842:	d1e3      	bne.n	800680c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006848:	4618      	mov	r0, r3
 800684a:	f7fc feb6 	bl	80035ba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006856:	b29b      	uxth	r3, r3
 8006858:	1ad3      	subs	r3, r2, r3
 800685a:	b29b      	uxth	r3, r3
 800685c:	4619      	mov	r1, r3
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 f8b6 	bl	80069d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006864:	e099      	b.n	800699a <HAL_UART_IRQHandler+0x50e>
 8006866:	bf00      	nop
 8006868:	08006c07 	.word	0x08006c07
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006874:	b29b      	uxth	r3, r3
 8006876:	1ad3      	subs	r3, r2, r3
 8006878:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006880:	b29b      	uxth	r3, r3
 8006882:	2b00      	cmp	r3, #0
 8006884:	f000 808b 	beq.w	800699e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006888:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800688c:	2b00      	cmp	r3, #0
 800688e:	f000 8086 	beq.w	800699e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	330c      	adds	r3, #12
 8006898:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800689a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800689c:	e853 3f00 	ldrex	r3, [r3]
 80068a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80068a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	330c      	adds	r3, #12
 80068b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80068b6:	647a      	str	r2, [r7, #68]	; 0x44
 80068b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80068bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068be:	e841 2300 	strex	r3, r2, [r1]
 80068c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80068c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d1e3      	bne.n	8006892 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	3314      	adds	r3, #20
 80068d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d4:	e853 3f00 	ldrex	r3, [r3]
 80068d8:	623b      	str	r3, [r7, #32]
   return(result);
 80068da:	6a3b      	ldr	r3, [r7, #32]
 80068dc:	f023 0301 	bic.w	r3, r3, #1
 80068e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	3314      	adds	r3, #20
 80068ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80068ee:	633a      	str	r2, [r7, #48]	; 0x30
 80068f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80068f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068f6:	e841 2300 	strex	r3, r2, [r1]
 80068fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80068fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d1e3      	bne.n	80068ca <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2220      	movs	r2, #32
 8006906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	330c      	adds	r3, #12
 8006916:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	e853 3f00 	ldrex	r3, [r3]
 800691e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f023 0310 	bic.w	r3, r3, #16
 8006926:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	330c      	adds	r3, #12
 8006930:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006934:	61fa      	str	r2, [r7, #28]
 8006936:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006938:	69b9      	ldr	r1, [r7, #24]
 800693a:	69fa      	ldr	r2, [r7, #28]
 800693c:	e841 2300 	strex	r3, r2, [r1]
 8006940:	617b      	str	r3, [r7, #20]
   return(result);
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d1e3      	bne.n	8006910 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006948:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800694c:	4619      	mov	r1, r3
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 f83e 	bl	80069d0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006954:	e023      	b.n	800699e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006956:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800695a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800695e:	2b00      	cmp	r3, #0
 8006960:	d009      	beq.n	8006976 <HAL_UART_IRQHandler+0x4ea>
 8006962:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006966:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800696a:	2b00      	cmp	r3, #0
 800696c:	d003      	beq.n	8006976 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 f95d 	bl	8006c2e <UART_Transmit_IT>
    return;
 8006974:	e014      	b.n	80069a0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800697a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800697e:	2b00      	cmp	r3, #0
 8006980:	d00e      	beq.n	80069a0 <HAL_UART_IRQHandler+0x514>
 8006982:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800698a:	2b00      	cmp	r3, #0
 800698c:	d008      	beq.n	80069a0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 f99d 	bl	8006cce <UART_EndTransmit_IT>
    return;
 8006994:	e004      	b.n	80069a0 <HAL_UART_IRQHandler+0x514>
    return;
 8006996:	bf00      	nop
 8006998:	e002      	b.n	80069a0 <HAL_UART_IRQHandler+0x514>
      return;
 800699a:	bf00      	nop
 800699c:	e000      	b.n	80069a0 <HAL_UART_IRQHandler+0x514>
      return;
 800699e:	bf00      	nop
  }
}
 80069a0:	37e8      	adds	r7, #232	; 0xe8
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop

080069a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80069a8:	b480      	push	{r7}
 80069aa:	b083      	sub	sp, #12
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80069b0:	bf00      	nop
 80069b2:	370c      	adds	r7, #12
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80069c4:	bf00      	nop
 80069c6:	370c      	adds	r7, #12
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr

080069d0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
 80069d8:	460b      	mov	r3, r1
 80069da:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80069dc:	bf00      	nop
 80069de:	370c      	adds	r7, #12
 80069e0:	46bd      	mov	sp, r7
 80069e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e6:	4770      	bx	lr

080069e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b090      	sub	sp, #64	; 0x40
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	603b      	str	r3, [r7, #0]
 80069f4:	4613      	mov	r3, r2
 80069f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069f8:	e050      	b.n	8006a9c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a00:	d04c      	beq.n	8006a9c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006a02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d007      	beq.n	8006a18 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a08:	f7fc fc96 	bl	8003338 <HAL_GetTick>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d241      	bcs.n	8006a9c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	330c      	adds	r3, #12
 8006a1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a22:	e853 3f00 	ldrex	r3, [r3]
 8006a26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	330c      	adds	r3, #12
 8006a36:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006a38:	637a      	str	r2, [r7, #52]	; 0x34
 8006a3a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a40:	e841 2300 	strex	r3, r2, [r1]
 8006a44:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d1e5      	bne.n	8006a18 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	3314      	adds	r3, #20
 8006a52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	e853 3f00 	ldrex	r3, [r3]
 8006a5a:	613b      	str	r3, [r7, #16]
   return(result);
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	f023 0301 	bic.w	r3, r3, #1
 8006a62:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	3314      	adds	r3, #20
 8006a6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a6c:	623a      	str	r2, [r7, #32]
 8006a6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a70:	69f9      	ldr	r1, [r7, #28]
 8006a72:	6a3a      	ldr	r2, [r7, #32]
 8006a74:	e841 2300 	strex	r3, r2, [r1]
 8006a78:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d1e5      	bne.n	8006a4c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2220      	movs	r2, #32
 8006a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2220      	movs	r2, #32
 8006a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006a98:	2303      	movs	r3, #3
 8006a9a:	e00f      	b.n	8006abc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	4013      	ands	r3, r2
 8006aa6:	68ba      	ldr	r2, [r7, #8]
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	bf0c      	ite	eq
 8006aac:	2301      	moveq	r3, #1
 8006aae:	2300      	movne	r3, #0
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	79fb      	ldrb	r3, [r7, #7]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d09f      	beq.n	80069fa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006aba:	2300      	movs	r3, #0
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3740      	adds	r7, #64	; 0x40
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}

08006ac4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b085      	sub	sp, #20
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	60b9      	str	r1, [r7, #8]
 8006ace:	4613      	mov	r3, r2
 8006ad0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	68ba      	ldr	r2, [r7, #8]
 8006ad6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	88fa      	ldrh	r2, [r7, #6]
 8006adc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	88fa      	ldrh	r2, [r7, #6]
 8006ae2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2222      	movs	r2, #34	; 0x22
 8006aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2200      	movs	r2, #0
 8006af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	691b      	ldr	r3, [r3, #16]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d007      	beq.n	8006b12 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	68da      	ldr	r2, [r3, #12]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006b10:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	695a      	ldr	r2, [r3, #20]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f042 0201 	orr.w	r2, r2, #1
 8006b20:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	68da      	ldr	r2, [r3, #12]
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f042 0220 	orr.w	r2, r2, #32
 8006b30:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006b32:	2300      	movs	r3, #0
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3714      	adds	r7, #20
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3e:	4770      	bx	lr

08006b40 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b095      	sub	sp, #84	; 0x54
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	330c      	adds	r3, #12
 8006b4e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b52:	e853 3f00 	ldrex	r3, [r3]
 8006b56:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	330c      	adds	r3, #12
 8006b66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b68:	643a      	str	r2, [r7, #64]	; 0x40
 8006b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b70:	e841 2300 	strex	r3, r2, [r1]
 8006b74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d1e5      	bne.n	8006b48 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	3314      	adds	r3, #20
 8006b82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b84:	6a3b      	ldr	r3, [r7, #32]
 8006b86:	e853 3f00 	ldrex	r3, [r3]
 8006b8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b8c:	69fb      	ldr	r3, [r7, #28]
 8006b8e:	f023 0301 	bic.w	r3, r3, #1
 8006b92:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	3314      	adds	r3, #20
 8006b9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b9c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ba2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ba4:	e841 2300 	strex	r3, r2, [r1]
 8006ba8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d1e5      	bne.n	8006b7c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	d119      	bne.n	8006bec <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	330c      	adds	r3, #12
 8006bbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	e853 3f00 	ldrex	r3, [r3]
 8006bc6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	f023 0310 	bic.w	r3, r3, #16
 8006bce:	647b      	str	r3, [r7, #68]	; 0x44
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	330c      	adds	r3, #12
 8006bd6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006bd8:	61ba      	str	r2, [r7, #24]
 8006bda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bdc:	6979      	ldr	r1, [r7, #20]
 8006bde:	69ba      	ldr	r2, [r7, #24]
 8006be0:	e841 2300 	strex	r3, r2, [r1]
 8006be4:	613b      	str	r3, [r7, #16]
   return(result);
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d1e5      	bne.n	8006bb8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2220      	movs	r2, #32
 8006bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006bfa:	bf00      	nop
 8006bfc:	3754      	adds	r7, #84	; 0x54
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr

08006c06 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c06:	b580      	push	{r7, lr}
 8006c08:	b084      	sub	sp, #16
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c12:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2200      	movs	r2, #0
 8006c18:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c20:	68f8      	ldr	r0, [r7, #12]
 8006c22:	f7ff fecb 	bl	80069bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c26:	bf00      	nop
 8006c28:	3710      	adds	r7, #16
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006c2e:	b480      	push	{r7}
 8006c30:	b085      	sub	sp, #20
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	2b21      	cmp	r3, #33	; 0x21
 8006c40:	d13e      	bne.n	8006cc0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c4a:	d114      	bne.n	8006c76 <UART_Transmit_IT+0x48>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	691b      	ldr	r3, [r3, #16]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d110      	bne.n	8006c76 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6a1b      	ldr	r3, [r3, #32]
 8006c58:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	881b      	ldrh	r3, [r3, #0]
 8006c5e:	461a      	mov	r2, r3
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c68:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a1b      	ldr	r3, [r3, #32]
 8006c6e:	1c9a      	adds	r2, r3, #2
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	621a      	str	r2, [r3, #32]
 8006c74:	e008      	b.n	8006c88 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6a1b      	ldr	r3, [r3, #32]
 8006c7a:	1c59      	adds	r1, r3, #1
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	6211      	str	r1, [r2, #32]
 8006c80:	781a      	ldrb	r2, [r3, #0]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	4619      	mov	r1, r3
 8006c96:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d10f      	bne.n	8006cbc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	68da      	ldr	r2, [r3, #12]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006caa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	68da      	ldr	r2, [r3, #12]
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006cba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	e000      	b.n	8006cc2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006cc0:	2302      	movs	r3, #2
  }
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3714      	adds	r7, #20
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr

08006cce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b082      	sub	sp, #8
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	68da      	ldr	r2, [r3, #12]
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ce4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2220      	movs	r2, #32
 8006cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f7ff fe5a 	bl	80069a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3708      	adds	r7, #8
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}

08006cfe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006cfe:	b580      	push	{r7, lr}
 8006d00:	b08c      	sub	sp, #48	; 0x30
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	2b22      	cmp	r3, #34	; 0x22
 8006d10:	f040 80ab 	bne.w	8006e6a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	689b      	ldr	r3, [r3, #8]
 8006d18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d1c:	d117      	bne.n	8006d4e <UART_Receive_IT+0x50>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	691b      	ldr	r3, [r3, #16]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d113      	bne.n	8006d4e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006d26:	2300      	movs	r3, #0
 8006d28:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d2e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	b29b      	uxth	r3, r3
 8006d38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d3c:	b29a      	uxth	r2, r3
 8006d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d40:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d46:	1c9a      	adds	r2, r3, #2
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	629a      	str	r2, [r3, #40]	; 0x28
 8006d4c:	e026      	b.n	8006d9c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d52:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006d54:	2300      	movs	r3, #0
 8006d56:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d60:	d007      	beq.n	8006d72 <UART_Receive_IT+0x74>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d10a      	bne.n	8006d80 <UART_Receive_IT+0x82>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d106      	bne.n	8006d80 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	b2da      	uxtb	r2, r3
 8006d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d7c:	701a      	strb	r2, [r3, #0]
 8006d7e:	e008      	b.n	8006d92 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	b2db      	uxtb	r3, r3
 8006d88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d8c:	b2da      	uxtb	r2, r3
 8006d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d90:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d96:	1c5a      	adds	r2, r3, #1
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	3b01      	subs	r3, #1
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	4619      	mov	r1, r3
 8006daa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d15a      	bne.n	8006e66 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	68da      	ldr	r2, [r3, #12]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f022 0220 	bic.w	r2, r2, #32
 8006dbe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	68da      	ldr	r2, [r3, #12]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006dce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	695a      	ldr	r2, [r3, #20]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f022 0201 	bic.w	r2, r2, #1
 8006dde:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2220      	movs	r2, #32
 8006de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d135      	bne.n	8006e5c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	330c      	adds	r3, #12
 8006dfc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	e853 3f00 	ldrex	r3, [r3]
 8006e04:	613b      	str	r3, [r7, #16]
   return(result);
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	f023 0310 	bic.w	r3, r3, #16
 8006e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	330c      	adds	r3, #12
 8006e14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e16:	623a      	str	r2, [r7, #32]
 8006e18:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e1a:	69f9      	ldr	r1, [r7, #28]
 8006e1c:	6a3a      	ldr	r2, [r7, #32]
 8006e1e:	e841 2300 	strex	r3, r2, [r1]
 8006e22:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e24:	69bb      	ldr	r3, [r7, #24]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d1e5      	bne.n	8006df6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f003 0310 	and.w	r3, r3, #16
 8006e34:	2b10      	cmp	r3, #16
 8006e36:	d10a      	bne.n	8006e4e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e38:	2300      	movs	r3, #0
 8006e3a:	60fb      	str	r3, [r7, #12]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	60fb      	str	r3, [r7, #12]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	60fb      	str	r3, [r7, #12]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006e52:	4619      	mov	r1, r3
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f7ff fdbb 	bl	80069d0 <HAL_UARTEx_RxEventCallback>
 8006e5a:	e002      	b.n	8006e62 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f7fb ffaf 	bl	8002dc0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006e62:	2300      	movs	r3, #0
 8006e64:	e002      	b.n	8006e6c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006e66:	2300      	movs	r3, #0
 8006e68:	e000      	b.n	8006e6c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006e6a:	2302      	movs	r3, #2
  }
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3730      	adds	r7, #48	; 0x30
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e78:	b0c0      	sub	sp, #256	; 0x100
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	691b      	ldr	r3, [r3, #16]
 8006e88:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e90:	68d9      	ldr	r1, [r3, #12]
 8006e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	ea40 0301 	orr.w	r3, r0, r1
 8006e9c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ea2:	689a      	ldr	r2, [r3, #8]
 8006ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ea8:	691b      	ldr	r3, [r3, #16]
 8006eaa:	431a      	orrs	r2, r3
 8006eac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eb0:	695b      	ldr	r3, [r3, #20]
 8006eb2:	431a      	orrs	r2, r3
 8006eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eb8:	69db      	ldr	r3, [r3, #28]
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	68db      	ldr	r3, [r3, #12]
 8006ec8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006ecc:	f021 010c 	bic.w	r1, r1, #12
 8006ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006eda:	430b      	orrs	r3, r1
 8006edc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	695b      	ldr	r3, [r3, #20]
 8006ee6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006eee:	6999      	ldr	r1, [r3, #24]
 8006ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	ea40 0301 	orr.w	r3, r0, r1
 8006efa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	4b8f      	ldr	r3, [pc, #572]	; (8007140 <UART_SetConfig+0x2cc>)
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d005      	beq.n	8006f14 <UART_SetConfig+0xa0>
 8006f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	4b8d      	ldr	r3, [pc, #564]	; (8007144 <UART_SetConfig+0x2d0>)
 8006f10:	429a      	cmp	r2, r3
 8006f12:	d104      	bne.n	8006f1e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006f14:	f7fe fa5a 	bl	80053cc <HAL_RCC_GetPCLK2Freq>
 8006f18:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006f1c:	e003      	b.n	8006f26 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006f1e:	f7fe fa41 	bl	80053a4 <HAL_RCC_GetPCLK1Freq>
 8006f22:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f2a:	69db      	ldr	r3, [r3, #28]
 8006f2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f30:	f040 810c 	bne.w	800714c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006f34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006f38:	2200      	movs	r2, #0
 8006f3a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006f3e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006f42:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006f46:	4622      	mov	r2, r4
 8006f48:	462b      	mov	r3, r5
 8006f4a:	1891      	adds	r1, r2, r2
 8006f4c:	65b9      	str	r1, [r7, #88]	; 0x58
 8006f4e:	415b      	adcs	r3, r3
 8006f50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f52:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006f56:	4621      	mov	r1, r4
 8006f58:	eb12 0801 	adds.w	r8, r2, r1
 8006f5c:	4629      	mov	r1, r5
 8006f5e:	eb43 0901 	adc.w	r9, r3, r1
 8006f62:	f04f 0200 	mov.w	r2, #0
 8006f66:	f04f 0300 	mov.w	r3, #0
 8006f6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f76:	4690      	mov	r8, r2
 8006f78:	4699      	mov	r9, r3
 8006f7a:	4623      	mov	r3, r4
 8006f7c:	eb18 0303 	adds.w	r3, r8, r3
 8006f80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006f84:	462b      	mov	r3, r5
 8006f86:	eb49 0303 	adc.w	r3, r9, r3
 8006f8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006f9a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006f9e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006fa2:	460b      	mov	r3, r1
 8006fa4:	18db      	adds	r3, r3, r3
 8006fa6:	653b      	str	r3, [r7, #80]	; 0x50
 8006fa8:	4613      	mov	r3, r2
 8006faa:	eb42 0303 	adc.w	r3, r2, r3
 8006fae:	657b      	str	r3, [r7, #84]	; 0x54
 8006fb0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006fb4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006fb8:	f7f9 f96a 	bl	8000290 <__aeabi_uldivmod>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	460b      	mov	r3, r1
 8006fc0:	4b61      	ldr	r3, [pc, #388]	; (8007148 <UART_SetConfig+0x2d4>)
 8006fc2:	fba3 2302 	umull	r2, r3, r3, r2
 8006fc6:	095b      	lsrs	r3, r3, #5
 8006fc8:	011c      	lsls	r4, r3, #4
 8006fca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006fd4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006fd8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006fdc:	4642      	mov	r2, r8
 8006fde:	464b      	mov	r3, r9
 8006fe0:	1891      	adds	r1, r2, r2
 8006fe2:	64b9      	str	r1, [r7, #72]	; 0x48
 8006fe4:	415b      	adcs	r3, r3
 8006fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fe8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006fec:	4641      	mov	r1, r8
 8006fee:	eb12 0a01 	adds.w	sl, r2, r1
 8006ff2:	4649      	mov	r1, r9
 8006ff4:	eb43 0b01 	adc.w	fp, r3, r1
 8006ff8:	f04f 0200 	mov.w	r2, #0
 8006ffc:	f04f 0300 	mov.w	r3, #0
 8007000:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007004:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007008:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800700c:	4692      	mov	sl, r2
 800700e:	469b      	mov	fp, r3
 8007010:	4643      	mov	r3, r8
 8007012:	eb1a 0303 	adds.w	r3, sl, r3
 8007016:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800701a:	464b      	mov	r3, r9
 800701c:	eb4b 0303 	adc.w	r3, fp, r3
 8007020:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	2200      	movs	r2, #0
 800702c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007030:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007034:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007038:	460b      	mov	r3, r1
 800703a:	18db      	adds	r3, r3, r3
 800703c:	643b      	str	r3, [r7, #64]	; 0x40
 800703e:	4613      	mov	r3, r2
 8007040:	eb42 0303 	adc.w	r3, r2, r3
 8007044:	647b      	str	r3, [r7, #68]	; 0x44
 8007046:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800704a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800704e:	f7f9 f91f 	bl	8000290 <__aeabi_uldivmod>
 8007052:	4602      	mov	r2, r0
 8007054:	460b      	mov	r3, r1
 8007056:	4611      	mov	r1, r2
 8007058:	4b3b      	ldr	r3, [pc, #236]	; (8007148 <UART_SetConfig+0x2d4>)
 800705a:	fba3 2301 	umull	r2, r3, r3, r1
 800705e:	095b      	lsrs	r3, r3, #5
 8007060:	2264      	movs	r2, #100	; 0x64
 8007062:	fb02 f303 	mul.w	r3, r2, r3
 8007066:	1acb      	subs	r3, r1, r3
 8007068:	00db      	lsls	r3, r3, #3
 800706a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800706e:	4b36      	ldr	r3, [pc, #216]	; (8007148 <UART_SetConfig+0x2d4>)
 8007070:	fba3 2302 	umull	r2, r3, r3, r2
 8007074:	095b      	lsrs	r3, r3, #5
 8007076:	005b      	lsls	r3, r3, #1
 8007078:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800707c:	441c      	add	r4, r3
 800707e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007082:	2200      	movs	r2, #0
 8007084:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007088:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800708c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007090:	4642      	mov	r2, r8
 8007092:	464b      	mov	r3, r9
 8007094:	1891      	adds	r1, r2, r2
 8007096:	63b9      	str	r1, [r7, #56]	; 0x38
 8007098:	415b      	adcs	r3, r3
 800709a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800709c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80070a0:	4641      	mov	r1, r8
 80070a2:	1851      	adds	r1, r2, r1
 80070a4:	6339      	str	r1, [r7, #48]	; 0x30
 80070a6:	4649      	mov	r1, r9
 80070a8:	414b      	adcs	r3, r1
 80070aa:	637b      	str	r3, [r7, #52]	; 0x34
 80070ac:	f04f 0200 	mov.w	r2, #0
 80070b0:	f04f 0300 	mov.w	r3, #0
 80070b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80070b8:	4659      	mov	r1, fp
 80070ba:	00cb      	lsls	r3, r1, #3
 80070bc:	4651      	mov	r1, sl
 80070be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070c2:	4651      	mov	r1, sl
 80070c4:	00ca      	lsls	r2, r1, #3
 80070c6:	4610      	mov	r0, r2
 80070c8:	4619      	mov	r1, r3
 80070ca:	4603      	mov	r3, r0
 80070cc:	4642      	mov	r2, r8
 80070ce:	189b      	adds	r3, r3, r2
 80070d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80070d4:	464b      	mov	r3, r9
 80070d6:	460a      	mov	r2, r1
 80070d8:	eb42 0303 	adc.w	r3, r2, r3
 80070dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80070e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	2200      	movs	r2, #0
 80070e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80070ec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80070f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80070f4:	460b      	mov	r3, r1
 80070f6:	18db      	adds	r3, r3, r3
 80070f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80070fa:	4613      	mov	r3, r2
 80070fc:	eb42 0303 	adc.w	r3, r2, r3
 8007100:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007102:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007106:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800710a:	f7f9 f8c1 	bl	8000290 <__aeabi_uldivmod>
 800710e:	4602      	mov	r2, r0
 8007110:	460b      	mov	r3, r1
 8007112:	4b0d      	ldr	r3, [pc, #52]	; (8007148 <UART_SetConfig+0x2d4>)
 8007114:	fba3 1302 	umull	r1, r3, r3, r2
 8007118:	095b      	lsrs	r3, r3, #5
 800711a:	2164      	movs	r1, #100	; 0x64
 800711c:	fb01 f303 	mul.w	r3, r1, r3
 8007120:	1ad3      	subs	r3, r2, r3
 8007122:	00db      	lsls	r3, r3, #3
 8007124:	3332      	adds	r3, #50	; 0x32
 8007126:	4a08      	ldr	r2, [pc, #32]	; (8007148 <UART_SetConfig+0x2d4>)
 8007128:	fba2 2303 	umull	r2, r3, r2, r3
 800712c:	095b      	lsrs	r3, r3, #5
 800712e:	f003 0207 	and.w	r2, r3, #7
 8007132:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4422      	add	r2, r4
 800713a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800713c:	e106      	b.n	800734c <UART_SetConfig+0x4d8>
 800713e:	bf00      	nop
 8007140:	40011000 	.word	0x40011000
 8007144:	40011400 	.word	0x40011400
 8007148:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800714c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007150:	2200      	movs	r2, #0
 8007152:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007156:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800715a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800715e:	4642      	mov	r2, r8
 8007160:	464b      	mov	r3, r9
 8007162:	1891      	adds	r1, r2, r2
 8007164:	6239      	str	r1, [r7, #32]
 8007166:	415b      	adcs	r3, r3
 8007168:	627b      	str	r3, [r7, #36]	; 0x24
 800716a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800716e:	4641      	mov	r1, r8
 8007170:	1854      	adds	r4, r2, r1
 8007172:	4649      	mov	r1, r9
 8007174:	eb43 0501 	adc.w	r5, r3, r1
 8007178:	f04f 0200 	mov.w	r2, #0
 800717c:	f04f 0300 	mov.w	r3, #0
 8007180:	00eb      	lsls	r3, r5, #3
 8007182:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007186:	00e2      	lsls	r2, r4, #3
 8007188:	4614      	mov	r4, r2
 800718a:	461d      	mov	r5, r3
 800718c:	4643      	mov	r3, r8
 800718e:	18e3      	adds	r3, r4, r3
 8007190:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007194:	464b      	mov	r3, r9
 8007196:	eb45 0303 	adc.w	r3, r5, r3
 800719a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800719e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80071aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80071ae:	f04f 0200 	mov.w	r2, #0
 80071b2:	f04f 0300 	mov.w	r3, #0
 80071b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80071ba:	4629      	mov	r1, r5
 80071bc:	008b      	lsls	r3, r1, #2
 80071be:	4621      	mov	r1, r4
 80071c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80071c4:	4621      	mov	r1, r4
 80071c6:	008a      	lsls	r2, r1, #2
 80071c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80071cc:	f7f9 f860 	bl	8000290 <__aeabi_uldivmod>
 80071d0:	4602      	mov	r2, r0
 80071d2:	460b      	mov	r3, r1
 80071d4:	4b60      	ldr	r3, [pc, #384]	; (8007358 <UART_SetConfig+0x4e4>)
 80071d6:	fba3 2302 	umull	r2, r3, r3, r2
 80071da:	095b      	lsrs	r3, r3, #5
 80071dc:	011c      	lsls	r4, r3, #4
 80071de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071e2:	2200      	movs	r2, #0
 80071e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80071e8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80071ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80071f0:	4642      	mov	r2, r8
 80071f2:	464b      	mov	r3, r9
 80071f4:	1891      	adds	r1, r2, r2
 80071f6:	61b9      	str	r1, [r7, #24]
 80071f8:	415b      	adcs	r3, r3
 80071fa:	61fb      	str	r3, [r7, #28]
 80071fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007200:	4641      	mov	r1, r8
 8007202:	1851      	adds	r1, r2, r1
 8007204:	6139      	str	r1, [r7, #16]
 8007206:	4649      	mov	r1, r9
 8007208:	414b      	adcs	r3, r1
 800720a:	617b      	str	r3, [r7, #20]
 800720c:	f04f 0200 	mov.w	r2, #0
 8007210:	f04f 0300 	mov.w	r3, #0
 8007214:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007218:	4659      	mov	r1, fp
 800721a:	00cb      	lsls	r3, r1, #3
 800721c:	4651      	mov	r1, sl
 800721e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007222:	4651      	mov	r1, sl
 8007224:	00ca      	lsls	r2, r1, #3
 8007226:	4610      	mov	r0, r2
 8007228:	4619      	mov	r1, r3
 800722a:	4603      	mov	r3, r0
 800722c:	4642      	mov	r2, r8
 800722e:	189b      	adds	r3, r3, r2
 8007230:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007234:	464b      	mov	r3, r9
 8007236:	460a      	mov	r2, r1
 8007238:	eb42 0303 	adc.w	r3, r2, r3
 800723c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007244:	685b      	ldr	r3, [r3, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	67bb      	str	r3, [r7, #120]	; 0x78
 800724a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800724c:	f04f 0200 	mov.w	r2, #0
 8007250:	f04f 0300 	mov.w	r3, #0
 8007254:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007258:	4649      	mov	r1, r9
 800725a:	008b      	lsls	r3, r1, #2
 800725c:	4641      	mov	r1, r8
 800725e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007262:	4641      	mov	r1, r8
 8007264:	008a      	lsls	r2, r1, #2
 8007266:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800726a:	f7f9 f811 	bl	8000290 <__aeabi_uldivmod>
 800726e:	4602      	mov	r2, r0
 8007270:	460b      	mov	r3, r1
 8007272:	4611      	mov	r1, r2
 8007274:	4b38      	ldr	r3, [pc, #224]	; (8007358 <UART_SetConfig+0x4e4>)
 8007276:	fba3 2301 	umull	r2, r3, r3, r1
 800727a:	095b      	lsrs	r3, r3, #5
 800727c:	2264      	movs	r2, #100	; 0x64
 800727e:	fb02 f303 	mul.w	r3, r2, r3
 8007282:	1acb      	subs	r3, r1, r3
 8007284:	011b      	lsls	r3, r3, #4
 8007286:	3332      	adds	r3, #50	; 0x32
 8007288:	4a33      	ldr	r2, [pc, #204]	; (8007358 <UART_SetConfig+0x4e4>)
 800728a:	fba2 2303 	umull	r2, r3, r2, r3
 800728e:	095b      	lsrs	r3, r3, #5
 8007290:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007294:	441c      	add	r4, r3
 8007296:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800729a:	2200      	movs	r2, #0
 800729c:	673b      	str	r3, [r7, #112]	; 0x70
 800729e:	677a      	str	r2, [r7, #116]	; 0x74
 80072a0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80072a4:	4642      	mov	r2, r8
 80072a6:	464b      	mov	r3, r9
 80072a8:	1891      	adds	r1, r2, r2
 80072aa:	60b9      	str	r1, [r7, #8]
 80072ac:	415b      	adcs	r3, r3
 80072ae:	60fb      	str	r3, [r7, #12]
 80072b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80072b4:	4641      	mov	r1, r8
 80072b6:	1851      	adds	r1, r2, r1
 80072b8:	6039      	str	r1, [r7, #0]
 80072ba:	4649      	mov	r1, r9
 80072bc:	414b      	adcs	r3, r1
 80072be:	607b      	str	r3, [r7, #4]
 80072c0:	f04f 0200 	mov.w	r2, #0
 80072c4:	f04f 0300 	mov.w	r3, #0
 80072c8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80072cc:	4659      	mov	r1, fp
 80072ce:	00cb      	lsls	r3, r1, #3
 80072d0:	4651      	mov	r1, sl
 80072d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80072d6:	4651      	mov	r1, sl
 80072d8:	00ca      	lsls	r2, r1, #3
 80072da:	4610      	mov	r0, r2
 80072dc:	4619      	mov	r1, r3
 80072de:	4603      	mov	r3, r0
 80072e0:	4642      	mov	r2, r8
 80072e2:	189b      	adds	r3, r3, r2
 80072e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80072e6:	464b      	mov	r3, r9
 80072e8:	460a      	mov	r2, r1
 80072ea:	eb42 0303 	adc.w	r3, r2, r3
 80072ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80072f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	2200      	movs	r2, #0
 80072f8:	663b      	str	r3, [r7, #96]	; 0x60
 80072fa:	667a      	str	r2, [r7, #100]	; 0x64
 80072fc:	f04f 0200 	mov.w	r2, #0
 8007300:	f04f 0300 	mov.w	r3, #0
 8007304:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007308:	4649      	mov	r1, r9
 800730a:	008b      	lsls	r3, r1, #2
 800730c:	4641      	mov	r1, r8
 800730e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007312:	4641      	mov	r1, r8
 8007314:	008a      	lsls	r2, r1, #2
 8007316:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800731a:	f7f8 ffb9 	bl	8000290 <__aeabi_uldivmod>
 800731e:	4602      	mov	r2, r0
 8007320:	460b      	mov	r3, r1
 8007322:	4b0d      	ldr	r3, [pc, #52]	; (8007358 <UART_SetConfig+0x4e4>)
 8007324:	fba3 1302 	umull	r1, r3, r3, r2
 8007328:	095b      	lsrs	r3, r3, #5
 800732a:	2164      	movs	r1, #100	; 0x64
 800732c:	fb01 f303 	mul.w	r3, r1, r3
 8007330:	1ad3      	subs	r3, r2, r3
 8007332:	011b      	lsls	r3, r3, #4
 8007334:	3332      	adds	r3, #50	; 0x32
 8007336:	4a08      	ldr	r2, [pc, #32]	; (8007358 <UART_SetConfig+0x4e4>)
 8007338:	fba2 2303 	umull	r2, r3, r2, r3
 800733c:	095b      	lsrs	r3, r3, #5
 800733e:	f003 020f 	and.w	r2, r3, #15
 8007342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4422      	add	r2, r4
 800734a:	609a      	str	r2, [r3, #8]
}
 800734c:	bf00      	nop
 800734e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007352:	46bd      	mov	sp, r7
 8007354:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007358:	51eb851f 	.word	0x51eb851f

0800735c <sniprintf>:
 800735c:	b40c      	push	{r2, r3}
 800735e:	b530      	push	{r4, r5, lr}
 8007360:	4b17      	ldr	r3, [pc, #92]	; (80073c0 <sniprintf+0x64>)
 8007362:	1e0c      	subs	r4, r1, #0
 8007364:	681d      	ldr	r5, [r3, #0]
 8007366:	b09d      	sub	sp, #116	; 0x74
 8007368:	da08      	bge.n	800737c <sniprintf+0x20>
 800736a:	238b      	movs	r3, #139	; 0x8b
 800736c:	602b      	str	r3, [r5, #0]
 800736e:	f04f 30ff 	mov.w	r0, #4294967295
 8007372:	b01d      	add	sp, #116	; 0x74
 8007374:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007378:	b002      	add	sp, #8
 800737a:	4770      	bx	lr
 800737c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007380:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007384:	bf14      	ite	ne
 8007386:	f104 33ff 	addne.w	r3, r4, #4294967295
 800738a:	4623      	moveq	r3, r4
 800738c:	9304      	str	r3, [sp, #16]
 800738e:	9307      	str	r3, [sp, #28]
 8007390:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007394:	9002      	str	r0, [sp, #8]
 8007396:	9006      	str	r0, [sp, #24]
 8007398:	f8ad 3016 	strh.w	r3, [sp, #22]
 800739c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800739e:	ab21      	add	r3, sp, #132	; 0x84
 80073a0:	a902      	add	r1, sp, #8
 80073a2:	4628      	mov	r0, r5
 80073a4:	9301      	str	r3, [sp, #4]
 80073a6:	f000 f9c3 	bl	8007730 <_svfiprintf_r>
 80073aa:	1c43      	adds	r3, r0, #1
 80073ac:	bfbc      	itt	lt
 80073ae:	238b      	movlt	r3, #139	; 0x8b
 80073b0:	602b      	strlt	r3, [r5, #0]
 80073b2:	2c00      	cmp	r4, #0
 80073b4:	d0dd      	beq.n	8007372 <sniprintf+0x16>
 80073b6:	9b02      	ldr	r3, [sp, #8]
 80073b8:	2200      	movs	r2, #0
 80073ba:	701a      	strb	r2, [r3, #0]
 80073bc:	e7d9      	b.n	8007372 <sniprintf+0x16>
 80073be:	bf00      	nop
 80073c0:	20000060 	.word	0x20000060

080073c4 <siprintf>:
 80073c4:	b40e      	push	{r1, r2, r3}
 80073c6:	b500      	push	{lr}
 80073c8:	b09c      	sub	sp, #112	; 0x70
 80073ca:	ab1d      	add	r3, sp, #116	; 0x74
 80073cc:	9002      	str	r0, [sp, #8]
 80073ce:	9006      	str	r0, [sp, #24]
 80073d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80073d4:	4809      	ldr	r0, [pc, #36]	; (80073fc <siprintf+0x38>)
 80073d6:	9107      	str	r1, [sp, #28]
 80073d8:	9104      	str	r1, [sp, #16]
 80073da:	4909      	ldr	r1, [pc, #36]	; (8007400 <siprintf+0x3c>)
 80073dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80073e0:	9105      	str	r1, [sp, #20]
 80073e2:	6800      	ldr	r0, [r0, #0]
 80073e4:	9301      	str	r3, [sp, #4]
 80073e6:	a902      	add	r1, sp, #8
 80073e8:	f000 f9a2 	bl	8007730 <_svfiprintf_r>
 80073ec:	9b02      	ldr	r3, [sp, #8]
 80073ee:	2200      	movs	r2, #0
 80073f0:	701a      	strb	r2, [r3, #0]
 80073f2:	b01c      	add	sp, #112	; 0x70
 80073f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80073f8:	b003      	add	sp, #12
 80073fa:	4770      	bx	lr
 80073fc:	20000060 	.word	0x20000060
 8007400:	ffff0208 	.word	0xffff0208

08007404 <memcmp>:
 8007404:	b510      	push	{r4, lr}
 8007406:	3901      	subs	r1, #1
 8007408:	4402      	add	r2, r0
 800740a:	4290      	cmp	r0, r2
 800740c:	d101      	bne.n	8007412 <memcmp+0xe>
 800740e:	2000      	movs	r0, #0
 8007410:	e005      	b.n	800741e <memcmp+0x1a>
 8007412:	7803      	ldrb	r3, [r0, #0]
 8007414:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007418:	42a3      	cmp	r3, r4
 800741a:	d001      	beq.n	8007420 <memcmp+0x1c>
 800741c:	1b18      	subs	r0, r3, r4
 800741e:	bd10      	pop	{r4, pc}
 8007420:	3001      	adds	r0, #1
 8007422:	e7f2      	b.n	800740a <memcmp+0x6>

08007424 <memset>:
 8007424:	4402      	add	r2, r0
 8007426:	4603      	mov	r3, r0
 8007428:	4293      	cmp	r3, r2
 800742a:	d100      	bne.n	800742e <memset+0xa>
 800742c:	4770      	bx	lr
 800742e:	f803 1b01 	strb.w	r1, [r3], #1
 8007432:	e7f9      	b.n	8007428 <memset+0x4>

08007434 <__errno>:
 8007434:	4b01      	ldr	r3, [pc, #4]	; (800743c <__errno+0x8>)
 8007436:	6818      	ldr	r0, [r3, #0]
 8007438:	4770      	bx	lr
 800743a:	bf00      	nop
 800743c:	20000060 	.word	0x20000060

08007440 <__libc_init_array>:
 8007440:	b570      	push	{r4, r5, r6, lr}
 8007442:	4d0d      	ldr	r5, [pc, #52]	; (8007478 <__libc_init_array+0x38>)
 8007444:	4c0d      	ldr	r4, [pc, #52]	; (800747c <__libc_init_array+0x3c>)
 8007446:	1b64      	subs	r4, r4, r5
 8007448:	10a4      	asrs	r4, r4, #2
 800744a:	2600      	movs	r6, #0
 800744c:	42a6      	cmp	r6, r4
 800744e:	d109      	bne.n	8007464 <__libc_init_array+0x24>
 8007450:	4d0b      	ldr	r5, [pc, #44]	; (8007480 <__libc_init_array+0x40>)
 8007452:	4c0c      	ldr	r4, [pc, #48]	; (8007484 <__libc_init_array+0x44>)
 8007454:	f000 fc6a 	bl	8007d2c <_init>
 8007458:	1b64      	subs	r4, r4, r5
 800745a:	10a4      	asrs	r4, r4, #2
 800745c:	2600      	movs	r6, #0
 800745e:	42a6      	cmp	r6, r4
 8007460:	d105      	bne.n	800746e <__libc_init_array+0x2e>
 8007462:	bd70      	pop	{r4, r5, r6, pc}
 8007464:	f855 3b04 	ldr.w	r3, [r5], #4
 8007468:	4798      	blx	r3
 800746a:	3601      	adds	r6, #1
 800746c:	e7ee      	b.n	800744c <__libc_init_array+0xc>
 800746e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007472:	4798      	blx	r3
 8007474:	3601      	adds	r6, #1
 8007476:	e7f2      	b.n	800745e <__libc_init_array+0x1e>
 8007478:	08007f40 	.word	0x08007f40
 800747c:	08007f40 	.word	0x08007f40
 8007480:	08007f40 	.word	0x08007f40
 8007484:	08007f44 	.word	0x08007f44

08007488 <__retarget_lock_acquire_recursive>:
 8007488:	4770      	bx	lr

0800748a <__retarget_lock_release_recursive>:
 800748a:	4770      	bx	lr

0800748c <_free_r>:
 800748c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800748e:	2900      	cmp	r1, #0
 8007490:	d044      	beq.n	800751c <_free_r+0x90>
 8007492:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007496:	9001      	str	r0, [sp, #4]
 8007498:	2b00      	cmp	r3, #0
 800749a:	f1a1 0404 	sub.w	r4, r1, #4
 800749e:	bfb8      	it	lt
 80074a0:	18e4      	addlt	r4, r4, r3
 80074a2:	f000 f8df 	bl	8007664 <__malloc_lock>
 80074a6:	4a1e      	ldr	r2, [pc, #120]	; (8007520 <_free_r+0x94>)
 80074a8:	9801      	ldr	r0, [sp, #4]
 80074aa:	6813      	ldr	r3, [r2, #0]
 80074ac:	b933      	cbnz	r3, 80074bc <_free_r+0x30>
 80074ae:	6063      	str	r3, [r4, #4]
 80074b0:	6014      	str	r4, [r2, #0]
 80074b2:	b003      	add	sp, #12
 80074b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80074b8:	f000 b8da 	b.w	8007670 <__malloc_unlock>
 80074bc:	42a3      	cmp	r3, r4
 80074be:	d908      	bls.n	80074d2 <_free_r+0x46>
 80074c0:	6825      	ldr	r5, [r4, #0]
 80074c2:	1961      	adds	r1, r4, r5
 80074c4:	428b      	cmp	r3, r1
 80074c6:	bf01      	itttt	eq
 80074c8:	6819      	ldreq	r1, [r3, #0]
 80074ca:	685b      	ldreq	r3, [r3, #4]
 80074cc:	1949      	addeq	r1, r1, r5
 80074ce:	6021      	streq	r1, [r4, #0]
 80074d0:	e7ed      	b.n	80074ae <_free_r+0x22>
 80074d2:	461a      	mov	r2, r3
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	b10b      	cbz	r3, 80074dc <_free_r+0x50>
 80074d8:	42a3      	cmp	r3, r4
 80074da:	d9fa      	bls.n	80074d2 <_free_r+0x46>
 80074dc:	6811      	ldr	r1, [r2, #0]
 80074de:	1855      	adds	r5, r2, r1
 80074e0:	42a5      	cmp	r5, r4
 80074e2:	d10b      	bne.n	80074fc <_free_r+0x70>
 80074e4:	6824      	ldr	r4, [r4, #0]
 80074e6:	4421      	add	r1, r4
 80074e8:	1854      	adds	r4, r2, r1
 80074ea:	42a3      	cmp	r3, r4
 80074ec:	6011      	str	r1, [r2, #0]
 80074ee:	d1e0      	bne.n	80074b2 <_free_r+0x26>
 80074f0:	681c      	ldr	r4, [r3, #0]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	6053      	str	r3, [r2, #4]
 80074f6:	440c      	add	r4, r1
 80074f8:	6014      	str	r4, [r2, #0]
 80074fa:	e7da      	b.n	80074b2 <_free_r+0x26>
 80074fc:	d902      	bls.n	8007504 <_free_r+0x78>
 80074fe:	230c      	movs	r3, #12
 8007500:	6003      	str	r3, [r0, #0]
 8007502:	e7d6      	b.n	80074b2 <_free_r+0x26>
 8007504:	6825      	ldr	r5, [r4, #0]
 8007506:	1961      	adds	r1, r4, r5
 8007508:	428b      	cmp	r3, r1
 800750a:	bf04      	itt	eq
 800750c:	6819      	ldreq	r1, [r3, #0]
 800750e:	685b      	ldreq	r3, [r3, #4]
 8007510:	6063      	str	r3, [r4, #4]
 8007512:	bf04      	itt	eq
 8007514:	1949      	addeq	r1, r1, r5
 8007516:	6021      	streq	r1, [r4, #0]
 8007518:	6054      	str	r4, [r2, #4]
 800751a:	e7ca      	b.n	80074b2 <_free_r+0x26>
 800751c:	b003      	add	sp, #12
 800751e:	bd30      	pop	{r4, r5, pc}
 8007520:	200004e8 	.word	0x200004e8

08007524 <sbrk_aligned>:
 8007524:	b570      	push	{r4, r5, r6, lr}
 8007526:	4e0e      	ldr	r6, [pc, #56]	; (8007560 <sbrk_aligned+0x3c>)
 8007528:	460c      	mov	r4, r1
 800752a:	6831      	ldr	r1, [r6, #0]
 800752c:	4605      	mov	r5, r0
 800752e:	b911      	cbnz	r1, 8007536 <sbrk_aligned+0x12>
 8007530:	f000 fba6 	bl	8007c80 <_sbrk_r>
 8007534:	6030      	str	r0, [r6, #0]
 8007536:	4621      	mov	r1, r4
 8007538:	4628      	mov	r0, r5
 800753a:	f000 fba1 	bl	8007c80 <_sbrk_r>
 800753e:	1c43      	adds	r3, r0, #1
 8007540:	d00a      	beq.n	8007558 <sbrk_aligned+0x34>
 8007542:	1cc4      	adds	r4, r0, #3
 8007544:	f024 0403 	bic.w	r4, r4, #3
 8007548:	42a0      	cmp	r0, r4
 800754a:	d007      	beq.n	800755c <sbrk_aligned+0x38>
 800754c:	1a21      	subs	r1, r4, r0
 800754e:	4628      	mov	r0, r5
 8007550:	f000 fb96 	bl	8007c80 <_sbrk_r>
 8007554:	3001      	adds	r0, #1
 8007556:	d101      	bne.n	800755c <sbrk_aligned+0x38>
 8007558:	f04f 34ff 	mov.w	r4, #4294967295
 800755c:	4620      	mov	r0, r4
 800755e:	bd70      	pop	{r4, r5, r6, pc}
 8007560:	200004ec 	.word	0x200004ec

08007564 <_malloc_r>:
 8007564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007568:	1ccd      	adds	r5, r1, #3
 800756a:	f025 0503 	bic.w	r5, r5, #3
 800756e:	3508      	adds	r5, #8
 8007570:	2d0c      	cmp	r5, #12
 8007572:	bf38      	it	cc
 8007574:	250c      	movcc	r5, #12
 8007576:	2d00      	cmp	r5, #0
 8007578:	4607      	mov	r7, r0
 800757a:	db01      	blt.n	8007580 <_malloc_r+0x1c>
 800757c:	42a9      	cmp	r1, r5
 800757e:	d905      	bls.n	800758c <_malloc_r+0x28>
 8007580:	230c      	movs	r3, #12
 8007582:	603b      	str	r3, [r7, #0]
 8007584:	2600      	movs	r6, #0
 8007586:	4630      	mov	r0, r6
 8007588:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800758c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007660 <_malloc_r+0xfc>
 8007590:	f000 f868 	bl	8007664 <__malloc_lock>
 8007594:	f8d8 3000 	ldr.w	r3, [r8]
 8007598:	461c      	mov	r4, r3
 800759a:	bb5c      	cbnz	r4, 80075f4 <_malloc_r+0x90>
 800759c:	4629      	mov	r1, r5
 800759e:	4638      	mov	r0, r7
 80075a0:	f7ff ffc0 	bl	8007524 <sbrk_aligned>
 80075a4:	1c43      	adds	r3, r0, #1
 80075a6:	4604      	mov	r4, r0
 80075a8:	d155      	bne.n	8007656 <_malloc_r+0xf2>
 80075aa:	f8d8 4000 	ldr.w	r4, [r8]
 80075ae:	4626      	mov	r6, r4
 80075b0:	2e00      	cmp	r6, #0
 80075b2:	d145      	bne.n	8007640 <_malloc_r+0xdc>
 80075b4:	2c00      	cmp	r4, #0
 80075b6:	d048      	beq.n	800764a <_malloc_r+0xe6>
 80075b8:	6823      	ldr	r3, [r4, #0]
 80075ba:	4631      	mov	r1, r6
 80075bc:	4638      	mov	r0, r7
 80075be:	eb04 0903 	add.w	r9, r4, r3
 80075c2:	f000 fb5d 	bl	8007c80 <_sbrk_r>
 80075c6:	4581      	cmp	r9, r0
 80075c8:	d13f      	bne.n	800764a <_malloc_r+0xe6>
 80075ca:	6821      	ldr	r1, [r4, #0]
 80075cc:	1a6d      	subs	r5, r5, r1
 80075ce:	4629      	mov	r1, r5
 80075d0:	4638      	mov	r0, r7
 80075d2:	f7ff ffa7 	bl	8007524 <sbrk_aligned>
 80075d6:	3001      	adds	r0, #1
 80075d8:	d037      	beq.n	800764a <_malloc_r+0xe6>
 80075da:	6823      	ldr	r3, [r4, #0]
 80075dc:	442b      	add	r3, r5
 80075de:	6023      	str	r3, [r4, #0]
 80075e0:	f8d8 3000 	ldr.w	r3, [r8]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d038      	beq.n	800765a <_malloc_r+0xf6>
 80075e8:	685a      	ldr	r2, [r3, #4]
 80075ea:	42a2      	cmp	r2, r4
 80075ec:	d12b      	bne.n	8007646 <_malloc_r+0xe2>
 80075ee:	2200      	movs	r2, #0
 80075f0:	605a      	str	r2, [r3, #4]
 80075f2:	e00f      	b.n	8007614 <_malloc_r+0xb0>
 80075f4:	6822      	ldr	r2, [r4, #0]
 80075f6:	1b52      	subs	r2, r2, r5
 80075f8:	d41f      	bmi.n	800763a <_malloc_r+0xd6>
 80075fa:	2a0b      	cmp	r2, #11
 80075fc:	d917      	bls.n	800762e <_malloc_r+0xca>
 80075fe:	1961      	adds	r1, r4, r5
 8007600:	42a3      	cmp	r3, r4
 8007602:	6025      	str	r5, [r4, #0]
 8007604:	bf18      	it	ne
 8007606:	6059      	strne	r1, [r3, #4]
 8007608:	6863      	ldr	r3, [r4, #4]
 800760a:	bf08      	it	eq
 800760c:	f8c8 1000 	streq.w	r1, [r8]
 8007610:	5162      	str	r2, [r4, r5]
 8007612:	604b      	str	r3, [r1, #4]
 8007614:	4638      	mov	r0, r7
 8007616:	f104 060b 	add.w	r6, r4, #11
 800761a:	f000 f829 	bl	8007670 <__malloc_unlock>
 800761e:	f026 0607 	bic.w	r6, r6, #7
 8007622:	1d23      	adds	r3, r4, #4
 8007624:	1af2      	subs	r2, r6, r3
 8007626:	d0ae      	beq.n	8007586 <_malloc_r+0x22>
 8007628:	1b9b      	subs	r3, r3, r6
 800762a:	50a3      	str	r3, [r4, r2]
 800762c:	e7ab      	b.n	8007586 <_malloc_r+0x22>
 800762e:	42a3      	cmp	r3, r4
 8007630:	6862      	ldr	r2, [r4, #4]
 8007632:	d1dd      	bne.n	80075f0 <_malloc_r+0x8c>
 8007634:	f8c8 2000 	str.w	r2, [r8]
 8007638:	e7ec      	b.n	8007614 <_malloc_r+0xb0>
 800763a:	4623      	mov	r3, r4
 800763c:	6864      	ldr	r4, [r4, #4]
 800763e:	e7ac      	b.n	800759a <_malloc_r+0x36>
 8007640:	4634      	mov	r4, r6
 8007642:	6876      	ldr	r6, [r6, #4]
 8007644:	e7b4      	b.n	80075b0 <_malloc_r+0x4c>
 8007646:	4613      	mov	r3, r2
 8007648:	e7cc      	b.n	80075e4 <_malloc_r+0x80>
 800764a:	230c      	movs	r3, #12
 800764c:	603b      	str	r3, [r7, #0]
 800764e:	4638      	mov	r0, r7
 8007650:	f000 f80e 	bl	8007670 <__malloc_unlock>
 8007654:	e797      	b.n	8007586 <_malloc_r+0x22>
 8007656:	6025      	str	r5, [r4, #0]
 8007658:	e7dc      	b.n	8007614 <_malloc_r+0xb0>
 800765a:	605b      	str	r3, [r3, #4]
 800765c:	deff      	udf	#255	; 0xff
 800765e:	bf00      	nop
 8007660:	200004e8 	.word	0x200004e8

08007664 <__malloc_lock>:
 8007664:	4801      	ldr	r0, [pc, #4]	; (800766c <__malloc_lock+0x8>)
 8007666:	f7ff bf0f 	b.w	8007488 <__retarget_lock_acquire_recursive>
 800766a:	bf00      	nop
 800766c:	200004e4 	.word	0x200004e4

08007670 <__malloc_unlock>:
 8007670:	4801      	ldr	r0, [pc, #4]	; (8007678 <__malloc_unlock+0x8>)
 8007672:	f7ff bf0a 	b.w	800748a <__retarget_lock_release_recursive>
 8007676:	bf00      	nop
 8007678:	200004e4 	.word	0x200004e4

0800767c <__ssputs_r>:
 800767c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007680:	688e      	ldr	r6, [r1, #8]
 8007682:	461f      	mov	r7, r3
 8007684:	42be      	cmp	r6, r7
 8007686:	680b      	ldr	r3, [r1, #0]
 8007688:	4682      	mov	sl, r0
 800768a:	460c      	mov	r4, r1
 800768c:	4690      	mov	r8, r2
 800768e:	d82c      	bhi.n	80076ea <__ssputs_r+0x6e>
 8007690:	898a      	ldrh	r2, [r1, #12]
 8007692:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007696:	d026      	beq.n	80076e6 <__ssputs_r+0x6a>
 8007698:	6965      	ldr	r5, [r4, #20]
 800769a:	6909      	ldr	r1, [r1, #16]
 800769c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80076a0:	eba3 0901 	sub.w	r9, r3, r1
 80076a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80076a8:	1c7b      	adds	r3, r7, #1
 80076aa:	444b      	add	r3, r9
 80076ac:	106d      	asrs	r5, r5, #1
 80076ae:	429d      	cmp	r5, r3
 80076b0:	bf38      	it	cc
 80076b2:	461d      	movcc	r5, r3
 80076b4:	0553      	lsls	r3, r2, #21
 80076b6:	d527      	bpl.n	8007708 <__ssputs_r+0x8c>
 80076b8:	4629      	mov	r1, r5
 80076ba:	f7ff ff53 	bl	8007564 <_malloc_r>
 80076be:	4606      	mov	r6, r0
 80076c0:	b360      	cbz	r0, 800771c <__ssputs_r+0xa0>
 80076c2:	6921      	ldr	r1, [r4, #16]
 80076c4:	464a      	mov	r2, r9
 80076c6:	f000 faeb 	bl	8007ca0 <memcpy>
 80076ca:	89a3      	ldrh	r3, [r4, #12]
 80076cc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80076d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076d4:	81a3      	strh	r3, [r4, #12]
 80076d6:	6126      	str	r6, [r4, #16]
 80076d8:	6165      	str	r5, [r4, #20]
 80076da:	444e      	add	r6, r9
 80076dc:	eba5 0509 	sub.w	r5, r5, r9
 80076e0:	6026      	str	r6, [r4, #0]
 80076e2:	60a5      	str	r5, [r4, #8]
 80076e4:	463e      	mov	r6, r7
 80076e6:	42be      	cmp	r6, r7
 80076e8:	d900      	bls.n	80076ec <__ssputs_r+0x70>
 80076ea:	463e      	mov	r6, r7
 80076ec:	6820      	ldr	r0, [r4, #0]
 80076ee:	4632      	mov	r2, r6
 80076f0:	4641      	mov	r1, r8
 80076f2:	f000 faab 	bl	8007c4c <memmove>
 80076f6:	68a3      	ldr	r3, [r4, #8]
 80076f8:	1b9b      	subs	r3, r3, r6
 80076fa:	60a3      	str	r3, [r4, #8]
 80076fc:	6823      	ldr	r3, [r4, #0]
 80076fe:	4433      	add	r3, r6
 8007700:	6023      	str	r3, [r4, #0]
 8007702:	2000      	movs	r0, #0
 8007704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007708:	462a      	mov	r2, r5
 800770a:	f000 fad7 	bl	8007cbc <_realloc_r>
 800770e:	4606      	mov	r6, r0
 8007710:	2800      	cmp	r0, #0
 8007712:	d1e0      	bne.n	80076d6 <__ssputs_r+0x5a>
 8007714:	6921      	ldr	r1, [r4, #16]
 8007716:	4650      	mov	r0, sl
 8007718:	f7ff feb8 	bl	800748c <_free_r>
 800771c:	230c      	movs	r3, #12
 800771e:	f8ca 3000 	str.w	r3, [sl]
 8007722:	89a3      	ldrh	r3, [r4, #12]
 8007724:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007728:	81a3      	strh	r3, [r4, #12]
 800772a:	f04f 30ff 	mov.w	r0, #4294967295
 800772e:	e7e9      	b.n	8007704 <__ssputs_r+0x88>

08007730 <_svfiprintf_r>:
 8007730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007734:	4698      	mov	r8, r3
 8007736:	898b      	ldrh	r3, [r1, #12]
 8007738:	061b      	lsls	r3, r3, #24
 800773a:	b09d      	sub	sp, #116	; 0x74
 800773c:	4607      	mov	r7, r0
 800773e:	460d      	mov	r5, r1
 8007740:	4614      	mov	r4, r2
 8007742:	d50e      	bpl.n	8007762 <_svfiprintf_r+0x32>
 8007744:	690b      	ldr	r3, [r1, #16]
 8007746:	b963      	cbnz	r3, 8007762 <_svfiprintf_r+0x32>
 8007748:	2140      	movs	r1, #64	; 0x40
 800774a:	f7ff ff0b 	bl	8007564 <_malloc_r>
 800774e:	6028      	str	r0, [r5, #0]
 8007750:	6128      	str	r0, [r5, #16]
 8007752:	b920      	cbnz	r0, 800775e <_svfiprintf_r+0x2e>
 8007754:	230c      	movs	r3, #12
 8007756:	603b      	str	r3, [r7, #0]
 8007758:	f04f 30ff 	mov.w	r0, #4294967295
 800775c:	e0d0      	b.n	8007900 <_svfiprintf_r+0x1d0>
 800775e:	2340      	movs	r3, #64	; 0x40
 8007760:	616b      	str	r3, [r5, #20]
 8007762:	2300      	movs	r3, #0
 8007764:	9309      	str	r3, [sp, #36]	; 0x24
 8007766:	2320      	movs	r3, #32
 8007768:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800776c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007770:	2330      	movs	r3, #48	; 0x30
 8007772:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007918 <_svfiprintf_r+0x1e8>
 8007776:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800777a:	f04f 0901 	mov.w	r9, #1
 800777e:	4623      	mov	r3, r4
 8007780:	469a      	mov	sl, r3
 8007782:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007786:	b10a      	cbz	r2, 800778c <_svfiprintf_r+0x5c>
 8007788:	2a25      	cmp	r2, #37	; 0x25
 800778a:	d1f9      	bne.n	8007780 <_svfiprintf_r+0x50>
 800778c:	ebba 0b04 	subs.w	fp, sl, r4
 8007790:	d00b      	beq.n	80077aa <_svfiprintf_r+0x7a>
 8007792:	465b      	mov	r3, fp
 8007794:	4622      	mov	r2, r4
 8007796:	4629      	mov	r1, r5
 8007798:	4638      	mov	r0, r7
 800779a:	f7ff ff6f 	bl	800767c <__ssputs_r>
 800779e:	3001      	adds	r0, #1
 80077a0:	f000 80a9 	beq.w	80078f6 <_svfiprintf_r+0x1c6>
 80077a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80077a6:	445a      	add	r2, fp
 80077a8:	9209      	str	r2, [sp, #36]	; 0x24
 80077aa:	f89a 3000 	ldrb.w	r3, [sl]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	f000 80a1 	beq.w	80078f6 <_svfiprintf_r+0x1c6>
 80077b4:	2300      	movs	r3, #0
 80077b6:	f04f 32ff 	mov.w	r2, #4294967295
 80077ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80077be:	f10a 0a01 	add.w	sl, sl, #1
 80077c2:	9304      	str	r3, [sp, #16]
 80077c4:	9307      	str	r3, [sp, #28]
 80077c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80077ca:	931a      	str	r3, [sp, #104]	; 0x68
 80077cc:	4654      	mov	r4, sl
 80077ce:	2205      	movs	r2, #5
 80077d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077d4:	4850      	ldr	r0, [pc, #320]	; (8007918 <_svfiprintf_r+0x1e8>)
 80077d6:	f7f8 fd0b 	bl	80001f0 <memchr>
 80077da:	9a04      	ldr	r2, [sp, #16]
 80077dc:	b9d8      	cbnz	r0, 8007816 <_svfiprintf_r+0xe6>
 80077de:	06d0      	lsls	r0, r2, #27
 80077e0:	bf44      	itt	mi
 80077e2:	2320      	movmi	r3, #32
 80077e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077e8:	0711      	lsls	r1, r2, #28
 80077ea:	bf44      	itt	mi
 80077ec:	232b      	movmi	r3, #43	; 0x2b
 80077ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80077f2:	f89a 3000 	ldrb.w	r3, [sl]
 80077f6:	2b2a      	cmp	r3, #42	; 0x2a
 80077f8:	d015      	beq.n	8007826 <_svfiprintf_r+0xf6>
 80077fa:	9a07      	ldr	r2, [sp, #28]
 80077fc:	4654      	mov	r4, sl
 80077fe:	2000      	movs	r0, #0
 8007800:	f04f 0c0a 	mov.w	ip, #10
 8007804:	4621      	mov	r1, r4
 8007806:	f811 3b01 	ldrb.w	r3, [r1], #1
 800780a:	3b30      	subs	r3, #48	; 0x30
 800780c:	2b09      	cmp	r3, #9
 800780e:	d94d      	bls.n	80078ac <_svfiprintf_r+0x17c>
 8007810:	b1b0      	cbz	r0, 8007840 <_svfiprintf_r+0x110>
 8007812:	9207      	str	r2, [sp, #28]
 8007814:	e014      	b.n	8007840 <_svfiprintf_r+0x110>
 8007816:	eba0 0308 	sub.w	r3, r0, r8
 800781a:	fa09 f303 	lsl.w	r3, r9, r3
 800781e:	4313      	orrs	r3, r2
 8007820:	9304      	str	r3, [sp, #16]
 8007822:	46a2      	mov	sl, r4
 8007824:	e7d2      	b.n	80077cc <_svfiprintf_r+0x9c>
 8007826:	9b03      	ldr	r3, [sp, #12]
 8007828:	1d19      	adds	r1, r3, #4
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	9103      	str	r1, [sp, #12]
 800782e:	2b00      	cmp	r3, #0
 8007830:	bfbb      	ittet	lt
 8007832:	425b      	neglt	r3, r3
 8007834:	f042 0202 	orrlt.w	r2, r2, #2
 8007838:	9307      	strge	r3, [sp, #28]
 800783a:	9307      	strlt	r3, [sp, #28]
 800783c:	bfb8      	it	lt
 800783e:	9204      	strlt	r2, [sp, #16]
 8007840:	7823      	ldrb	r3, [r4, #0]
 8007842:	2b2e      	cmp	r3, #46	; 0x2e
 8007844:	d10c      	bne.n	8007860 <_svfiprintf_r+0x130>
 8007846:	7863      	ldrb	r3, [r4, #1]
 8007848:	2b2a      	cmp	r3, #42	; 0x2a
 800784a:	d134      	bne.n	80078b6 <_svfiprintf_r+0x186>
 800784c:	9b03      	ldr	r3, [sp, #12]
 800784e:	1d1a      	adds	r2, r3, #4
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	9203      	str	r2, [sp, #12]
 8007854:	2b00      	cmp	r3, #0
 8007856:	bfb8      	it	lt
 8007858:	f04f 33ff 	movlt.w	r3, #4294967295
 800785c:	3402      	adds	r4, #2
 800785e:	9305      	str	r3, [sp, #20]
 8007860:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007928 <_svfiprintf_r+0x1f8>
 8007864:	7821      	ldrb	r1, [r4, #0]
 8007866:	2203      	movs	r2, #3
 8007868:	4650      	mov	r0, sl
 800786a:	f7f8 fcc1 	bl	80001f0 <memchr>
 800786e:	b138      	cbz	r0, 8007880 <_svfiprintf_r+0x150>
 8007870:	9b04      	ldr	r3, [sp, #16]
 8007872:	eba0 000a 	sub.w	r0, r0, sl
 8007876:	2240      	movs	r2, #64	; 0x40
 8007878:	4082      	lsls	r2, r0
 800787a:	4313      	orrs	r3, r2
 800787c:	3401      	adds	r4, #1
 800787e:	9304      	str	r3, [sp, #16]
 8007880:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007884:	4825      	ldr	r0, [pc, #148]	; (800791c <_svfiprintf_r+0x1ec>)
 8007886:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800788a:	2206      	movs	r2, #6
 800788c:	f7f8 fcb0 	bl	80001f0 <memchr>
 8007890:	2800      	cmp	r0, #0
 8007892:	d038      	beq.n	8007906 <_svfiprintf_r+0x1d6>
 8007894:	4b22      	ldr	r3, [pc, #136]	; (8007920 <_svfiprintf_r+0x1f0>)
 8007896:	bb1b      	cbnz	r3, 80078e0 <_svfiprintf_r+0x1b0>
 8007898:	9b03      	ldr	r3, [sp, #12]
 800789a:	3307      	adds	r3, #7
 800789c:	f023 0307 	bic.w	r3, r3, #7
 80078a0:	3308      	adds	r3, #8
 80078a2:	9303      	str	r3, [sp, #12]
 80078a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078a6:	4433      	add	r3, r6
 80078a8:	9309      	str	r3, [sp, #36]	; 0x24
 80078aa:	e768      	b.n	800777e <_svfiprintf_r+0x4e>
 80078ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80078b0:	460c      	mov	r4, r1
 80078b2:	2001      	movs	r0, #1
 80078b4:	e7a6      	b.n	8007804 <_svfiprintf_r+0xd4>
 80078b6:	2300      	movs	r3, #0
 80078b8:	3401      	adds	r4, #1
 80078ba:	9305      	str	r3, [sp, #20]
 80078bc:	4619      	mov	r1, r3
 80078be:	f04f 0c0a 	mov.w	ip, #10
 80078c2:	4620      	mov	r0, r4
 80078c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80078c8:	3a30      	subs	r2, #48	; 0x30
 80078ca:	2a09      	cmp	r2, #9
 80078cc:	d903      	bls.n	80078d6 <_svfiprintf_r+0x1a6>
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d0c6      	beq.n	8007860 <_svfiprintf_r+0x130>
 80078d2:	9105      	str	r1, [sp, #20]
 80078d4:	e7c4      	b.n	8007860 <_svfiprintf_r+0x130>
 80078d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80078da:	4604      	mov	r4, r0
 80078dc:	2301      	movs	r3, #1
 80078de:	e7f0      	b.n	80078c2 <_svfiprintf_r+0x192>
 80078e0:	ab03      	add	r3, sp, #12
 80078e2:	9300      	str	r3, [sp, #0]
 80078e4:	462a      	mov	r2, r5
 80078e6:	4b0f      	ldr	r3, [pc, #60]	; (8007924 <_svfiprintf_r+0x1f4>)
 80078e8:	a904      	add	r1, sp, #16
 80078ea:	4638      	mov	r0, r7
 80078ec:	f3af 8000 	nop.w
 80078f0:	1c42      	adds	r2, r0, #1
 80078f2:	4606      	mov	r6, r0
 80078f4:	d1d6      	bne.n	80078a4 <_svfiprintf_r+0x174>
 80078f6:	89ab      	ldrh	r3, [r5, #12]
 80078f8:	065b      	lsls	r3, r3, #25
 80078fa:	f53f af2d 	bmi.w	8007758 <_svfiprintf_r+0x28>
 80078fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007900:	b01d      	add	sp, #116	; 0x74
 8007902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007906:	ab03      	add	r3, sp, #12
 8007908:	9300      	str	r3, [sp, #0]
 800790a:	462a      	mov	r2, r5
 800790c:	4b05      	ldr	r3, [pc, #20]	; (8007924 <_svfiprintf_r+0x1f4>)
 800790e:	a904      	add	r1, sp, #16
 8007910:	4638      	mov	r0, r7
 8007912:	f000 f879 	bl	8007a08 <_printf_i>
 8007916:	e7eb      	b.n	80078f0 <_svfiprintf_r+0x1c0>
 8007918:	08007f04 	.word	0x08007f04
 800791c:	08007f0e 	.word	0x08007f0e
 8007920:	00000000 	.word	0x00000000
 8007924:	0800767d 	.word	0x0800767d
 8007928:	08007f0a 	.word	0x08007f0a

0800792c <_printf_common>:
 800792c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007930:	4616      	mov	r6, r2
 8007932:	4699      	mov	r9, r3
 8007934:	688a      	ldr	r2, [r1, #8]
 8007936:	690b      	ldr	r3, [r1, #16]
 8007938:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800793c:	4293      	cmp	r3, r2
 800793e:	bfb8      	it	lt
 8007940:	4613      	movlt	r3, r2
 8007942:	6033      	str	r3, [r6, #0]
 8007944:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007948:	4607      	mov	r7, r0
 800794a:	460c      	mov	r4, r1
 800794c:	b10a      	cbz	r2, 8007952 <_printf_common+0x26>
 800794e:	3301      	adds	r3, #1
 8007950:	6033      	str	r3, [r6, #0]
 8007952:	6823      	ldr	r3, [r4, #0]
 8007954:	0699      	lsls	r1, r3, #26
 8007956:	bf42      	ittt	mi
 8007958:	6833      	ldrmi	r3, [r6, #0]
 800795a:	3302      	addmi	r3, #2
 800795c:	6033      	strmi	r3, [r6, #0]
 800795e:	6825      	ldr	r5, [r4, #0]
 8007960:	f015 0506 	ands.w	r5, r5, #6
 8007964:	d106      	bne.n	8007974 <_printf_common+0x48>
 8007966:	f104 0a19 	add.w	sl, r4, #25
 800796a:	68e3      	ldr	r3, [r4, #12]
 800796c:	6832      	ldr	r2, [r6, #0]
 800796e:	1a9b      	subs	r3, r3, r2
 8007970:	42ab      	cmp	r3, r5
 8007972:	dc26      	bgt.n	80079c2 <_printf_common+0x96>
 8007974:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007978:	1e13      	subs	r3, r2, #0
 800797a:	6822      	ldr	r2, [r4, #0]
 800797c:	bf18      	it	ne
 800797e:	2301      	movne	r3, #1
 8007980:	0692      	lsls	r2, r2, #26
 8007982:	d42b      	bmi.n	80079dc <_printf_common+0xb0>
 8007984:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007988:	4649      	mov	r1, r9
 800798a:	4638      	mov	r0, r7
 800798c:	47c0      	blx	r8
 800798e:	3001      	adds	r0, #1
 8007990:	d01e      	beq.n	80079d0 <_printf_common+0xa4>
 8007992:	6823      	ldr	r3, [r4, #0]
 8007994:	6922      	ldr	r2, [r4, #16]
 8007996:	f003 0306 	and.w	r3, r3, #6
 800799a:	2b04      	cmp	r3, #4
 800799c:	bf02      	ittt	eq
 800799e:	68e5      	ldreq	r5, [r4, #12]
 80079a0:	6833      	ldreq	r3, [r6, #0]
 80079a2:	1aed      	subeq	r5, r5, r3
 80079a4:	68a3      	ldr	r3, [r4, #8]
 80079a6:	bf0c      	ite	eq
 80079a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80079ac:	2500      	movne	r5, #0
 80079ae:	4293      	cmp	r3, r2
 80079b0:	bfc4      	itt	gt
 80079b2:	1a9b      	subgt	r3, r3, r2
 80079b4:	18ed      	addgt	r5, r5, r3
 80079b6:	2600      	movs	r6, #0
 80079b8:	341a      	adds	r4, #26
 80079ba:	42b5      	cmp	r5, r6
 80079bc:	d11a      	bne.n	80079f4 <_printf_common+0xc8>
 80079be:	2000      	movs	r0, #0
 80079c0:	e008      	b.n	80079d4 <_printf_common+0xa8>
 80079c2:	2301      	movs	r3, #1
 80079c4:	4652      	mov	r2, sl
 80079c6:	4649      	mov	r1, r9
 80079c8:	4638      	mov	r0, r7
 80079ca:	47c0      	blx	r8
 80079cc:	3001      	adds	r0, #1
 80079ce:	d103      	bne.n	80079d8 <_printf_common+0xac>
 80079d0:	f04f 30ff 	mov.w	r0, #4294967295
 80079d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079d8:	3501      	adds	r5, #1
 80079da:	e7c6      	b.n	800796a <_printf_common+0x3e>
 80079dc:	18e1      	adds	r1, r4, r3
 80079de:	1c5a      	adds	r2, r3, #1
 80079e0:	2030      	movs	r0, #48	; 0x30
 80079e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80079e6:	4422      	add	r2, r4
 80079e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80079ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80079f0:	3302      	adds	r3, #2
 80079f2:	e7c7      	b.n	8007984 <_printf_common+0x58>
 80079f4:	2301      	movs	r3, #1
 80079f6:	4622      	mov	r2, r4
 80079f8:	4649      	mov	r1, r9
 80079fa:	4638      	mov	r0, r7
 80079fc:	47c0      	blx	r8
 80079fe:	3001      	adds	r0, #1
 8007a00:	d0e6      	beq.n	80079d0 <_printf_common+0xa4>
 8007a02:	3601      	adds	r6, #1
 8007a04:	e7d9      	b.n	80079ba <_printf_common+0x8e>
	...

08007a08 <_printf_i>:
 8007a08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a0c:	7e0f      	ldrb	r7, [r1, #24]
 8007a0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007a10:	2f78      	cmp	r7, #120	; 0x78
 8007a12:	4691      	mov	r9, r2
 8007a14:	4680      	mov	r8, r0
 8007a16:	460c      	mov	r4, r1
 8007a18:	469a      	mov	sl, r3
 8007a1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007a1e:	d807      	bhi.n	8007a30 <_printf_i+0x28>
 8007a20:	2f62      	cmp	r7, #98	; 0x62
 8007a22:	d80a      	bhi.n	8007a3a <_printf_i+0x32>
 8007a24:	2f00      	cmp	r7, #0
 8007a26:	f000 80d4 	beq.w	8007bd2 <_printf_i+0x1ca>
 8007a2a:	2f58      	cmp	r7, #88	; 0x58
 8007a2c:	f000 80c0 	beq.w	8007bb0 <_printf_i+0x1a8>
 8007a30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a38:	e03a      	b.n	8007ab0 <_printf_i+0xa8>
 8007a3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a3e:	2b15      	cmp	r3, #21
 8007a40:	d8f6      	bhi.n	8007a30 <_printf_i+0x28>
 8007a42:	a101      	add	r1, pc, #4	; (adr r1, 8007a48 <_printf_i+0x40>)
 8007a44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a48:	08007aa1 	.word	0x08007aa1
 8007a4c:	08007ab5 	.word	0x08007ab5
 8007a50:	08007a31 	.word	0x08007a31
 8007a54:	08007a31 	.word	0x08007a31
 8007a58:	08007a31 	.word	0x08007a31
 8007a5c:	08007a31 	.word	0x08007a31
 8007a60:	08007ab5 	.word	0x08007ab5
 8007a64:	08007a31 	.word	0x08007a31
 8007a68:	08007a31 	.word	0x08007a31
 8007a6c:	08007a31 	.word	0x08007a31
 8007a70:	08007a31 	.word	0x08007a31
 8007a74:	08007bb9 	.word	0x08007bb9
 8007a78:	08007ae1 	.word	0x08007ae1
 8007a7c:	08007b73 	.word	0x08007b73
 8007a80:	08007a31 	.word	0x08007a31
 8007a84:	08007a31 	.word	0x08007a31
 8007a88:	08007bdb 	.word	0x08007bdb
 8007a8c:	08007a31 	.word	0x08007a31
 8007a90:	08007ae1 	.word	0x08007ae1
 8007a94:	08007a31 	.word	0x08007a31
 8007a98:	08007a31 	.word	0x08007a31
 8007a9c:	08007b7b 	.word	0x08007b7b
 8007aa0:	682b      	ldr	r3, [r5, #0]
 8007aa2:	1d1a      	adds	r2, r3, #4
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	602a      	str	r2, [r5, #0]
 8007aa8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007aac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	e09f      	b.n	8007bf4 <_printf_i+0x1ec>
 8007ab4:	6820      	ldr	r0, [r4, #0]
 8007ab6:	682b      	ldr	r3, [r5, #0]
 8007ab8:	0607      	lsls	r7, r0, #24
 8007aba:	f103 0104 	add.w	r1, r3, #4
 8007abe:	6029      	str	r1, [r5, #0]
 8007ac0:	d501      	bpl.n	8007ac6 <_printf_i+0xbe>
 8007ac2:	681e      	ldr	r6, [r3, #0]
 8007ac4:	e003      	b.n	8007ace <_printf_i+0xc6>
 8007ac6:	0646      	lsls	r6, r0, #25
 8007ac8:	d5fb      	bpl.n	8007ac2 <_printf_i+0xba>
 8007aca:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007ace:	2e00      	cmp	r6, #0
 8007ad0:	da03      	bge.n	8007ada <_printf_i+0xd2>
 8007ad2:	232d      	movs	r3, #45	; 0x2d
 8007ad4:	4276      	negs	r6, r6
 8007ad6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ada:	485a      	ldr	r0, [pc, #360]	; (8007c44 <_printf_i+0x23c>)
 8007adc:	230a      	movs	r3, #10
 8007ade:	e012      	b.n	8007b06 <_printf_i+0xfe>
 8007ae0:	682b      	ldr	r3, [r5, #0]
 8007ae2:	6820      	ldr	r0, [r4, #0]
 8007ae4:	1d19      	adds	r1, r3, #4
 8007ae6:	6029      	str	r1, [r5, #0]
 8007ae8:	0605      	lsls	r5, r0, #24
 8007aea:	d501      	bpl.n	8007af0 <_printf_i+0xe8>
 8007aec:	681e      	ldr	r6, [r3, #0]
 8007aee:	e002      	b.n	8007af6 <_printf_i+0xee>
 8007af0:	0641      	lsls	r1, r0, #25
 8007af2:	d5fb      	bpl.n	8007aec <_printf_i+0xe4>
 8007af4:	881e      	ldrh	r6, [r3, #0]
 8007af6:	4853      	ldr	r0, [pc, #332]	; (8007c44 <_printf_i+0x23c>)
 8007af8:	2f6f      	cmp	r7, #111	; 0x6f
 8007afa:	bf0c      	ite	eq
 8007afc:	2308      	moveq	r3, #8
 8007afe:	230a      	movne	r3, #10
 8007b00:	2100      	movs	r1, #0
 8007b02:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b06:	6865      	ldr	r5, [r4, #4]
 8007b08:	60a5      	str	r5, [r4, #8]
 8007b0a:	2d00      	cmp	r5, #0
 8007b0c:	bfa2      	ittt	ge
 8007b0e:	6821      	ldrge	r1, [r4, #0]
 8007b10:	f021 0104 	bicge.w	r1, r1, #4
 8007b14:	6021      	strge	r1, [r4, #0]
 8007b16:	b90e      	cbnz	r6, 8007b1c <_printf_i+0x114>
 8007b18:	2d00      	cmp	r5, #0
 8007b1a:	d04b      	beq.n	8007bb4 <_printf_i+0x1ac>
 8007b1c:	4615      	mov	r5, r2
 8007b1e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007b22:	fb03 6711 	mls	r7, r3, r1, r6
 8007b26:	5dc7      	ldrb	r7, [r0, r7]
 8007b28:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007b2c:	4637      	mov	r7, r6
 8007b2e:	42bb      	cmp	r3, r7
 8007b30:	460e      	mov	r6, r1
 8007b32:	d9f4      	bls.n	8007b1e <_printf_i+0x116>
 8007b34:	2b08      	cmp	r3, #8
 8007b36:	d10b      	bne.n	8007b50 <_printf_i+0x148>
 8007b38:	6823      	ldr	r3, [r4, #0]
 8007b3a:	07de      	lsls	r6, r3, #31
 8007b3c:	d508      	bpl.n	8007b50 <_printf_i+0x148>
 8007b3e:	6923      	ldr	r3, [r4, #16]
 8007b40:	6861      	ldr	r1, [r4, #4]
 8007b42:	4299      	cmp	r1, r3
 8007b44:	bfde      	ittt	le
 8007b46:	2330      	movle	r3, #48	; 0x30
 8007b48:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007b4c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007b50:	1b52      	subs	r2, r2, r5
 8007b52:	6122      	str	r2, [r4, #16]
 8007b54:	f8cd a000 	str.w	sl, [sp]
 8007b58:	464b      	mov	r3, r9
 8007b5a:	aa03      	add	r2, sp, #12
 8007b5c:	4621      	mov	r1, r4
 8007b5e:	4640      	mov	r0, r8
 8007b60:	f7ff fee4 	bl	800792c <_printf_common>
 8007b64:	3001      	adds	r0, #1
 8007b66:	d14a      	bne.n	8007bfe <_printf_i+0x1f6>
 8007b68:	f04f 30ff 	mov.w	r0, #4294967295
 8007b6c:	b004      	add	sp, #16
 8007b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b72:	6823      	ldr	r3, [r4, #0]
 8007b74:	f043 0320 	orr.w	r3, r3, #32
 8007b78:	6023      	str	r3, [r4, #0]
 8007b7a:	4833      	ldr	r0, [pc, #204]	; (8007c48 <_printf_i+0x240>)
 8007b7c:	2778      	movs	r7, #120	; 0x78
 8007b7e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007b82:	6823      	ldr	r3, [r4, #0]
 8007b84:	6829      	ldr	r1, [r5, #0]
 8007b86:	061f      	lsls	r7, r3, #24
 8007b88:	f851 6b04 	ldr.w	r6, [r1], #4
 8007b8c:	d402      	bmi.n	8007b94 <_printf_i+0x18c>
 8007b8e:	065f      	lsls	r7, r3, #25
 8007b90:	bf48      	it	mi
 8007b92:	b2b6      	uxthmi	r6, r6
 8007b94:	07df      	lsls	r7, r3, #31
 8007b96:	bf48      	it	mi
 8007b98:	f043 0320 	orrmi.w	r3, r3, #32
 8007b9c:	6029      	str	r1, [r5, #0]
 8007b9e:	bf48      	it	mi
 8007ba0:	6023      	strmi	r3, [r4, #0]
 8007ba2:	b91e      	cbnz	r6, 8007bac <_printf_i+0x1a4>
 8007ba4:	6823      	ldr	r3, [r4, #0]
 8007ba6:	f023 0320 	bic.w	r3, r3, #32
 8007baa:	6023      	str	r3, [r4, #0]
 8007bac:	2310      	movs	r3, #16
 8007bae:	e7a7      	b.n	8007b00 <_printf_i+0xf8>
 8007bb0:	4824      	ldr	r0, [pc, #144]	; (8007c44 <_printf_i+0x23c>)
 8007bb2:	e7e4      	b.n	8007b7e <_printf_i+0x176>
 8007bb4:	4615      	mov	r5, r2
 8007bb6:	e7bd      	b.n	8007b34 <_printf_i+0x12c>
 8007bb8:	682b      	ldr	r3, [r5, #0]
 8007bba:	6826      	ldr	r6, [r4, #0]
 8007bbc:	6961      	ldr	r1, [r4, #20]
 8007bbe:	1d18      	adds	r0, r3, #4
 8007bc0:	6028      	str	r0, [r5, #0]
 8007bc2:	0635      	lsls	r5, r6, #24
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	d501      	bpl.n	8007bcc <_printf_i+0x1c4>
 8007bc8:	6019      	str	r1, [r3, #0]
 8007bca:	e002      	b.n	8007bd2 <_printf_i+0x1ca>
 8007bcc:	0670      	lsls	r0, r6, #25
 8007bce:	d5fb      	bpl.n	8007bc8 <_printf_i+0x1c0>
 8007bd0:	8019      	strh	r1, [r3, #0]
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	6123      	str	r3, [r4, #16]
 8007bd6:	4615      	mov	r5, r2
 8007bd8:	e7bc      	b.n	8007b54 <_printf_i+0x14c>
 8007bda:	682b      	ldr	r3, [r5, #0]
 8007bdc:	1d1a      	adds	r2, r3, #4
 8007bde:	602a      	str	r2, [r5, #0]
 8007be0:	681d      	ldr	r5, [r3, #0]
 8007be2:	6862      	ldr	r2, [r4, #4]
 8007be4:	2100      	movs	r1, #0
 8007be6:	4628      	mov	r0, r5
 8007be8:	f7f8 fb02 	bl	80001f0 <memchr>
 8007bec:	b108      	cbz	r0, 8007bf2 <_printf_i+0x1ea>
 8007bee:	1b40      	subs	r0, r0, r5
 8007bf0:	6060      	str	r0, [r4, #4]
 8007bf2:	6863      	ldr	r3, [r4, #4]
 8007bf4:	6123      	str	r3, [r4, #16]
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007bfc:	e7aa      	b.n	8007b54 <_printf_i+0x14c>
 8007bfe:	6923      	ldr	r3, [r4, #16]
 8007c00:	462a      	mov	r2, r5
 8007c02:	4649      	mov	r1, r9
 8007c04:	4640      	mov	r0, r8
 8007c06:	47d0      	blx	sl
 8007c08:	3001      	adds	r0, #1
 8007c0a:	d0ad      	beq.n	8007b68 <_printf_i+0x160>
 8007c0c:	6823      	ldr	r3, [r4, #0]
 8007c0e:	079b      	lsls	r3, r3, #30
 8007c10:	d413      	bmi.n	8007c3a <_printf_i+0x232>
 8007c12:	68e0      	ldr	r0, [r4, #12]
 8007c14:	9b03      	ldr	r3, [sp, #12]
 8007c16:	4298      	cmp	r0, r3
 8007c18:	bfb8      	it	lt
 8007c1a:	4618      	movlt	r0, r3
 8007c1c:	e7a6      	b.n	8007b6c <_printf_i+0x164>
 8007c1e:	2301      	movs	r3, #1
 8007c20:	4632      	mov	r2, r6
 8007c22:	4649      	mov	r1, r9
 8007c24:	4640      	mov	r0, r8
 8007c26:	47d0      	blx	sl
 8007c28:	3001      	adds	r0, #1
 8007c2a:	d09d      	beq.n	8007b68 <_printf_i+0x160>
 8007c2c:	3501      	adds	r5, #1
 8007c2e:	68e3      	ldr	r3, [r4, #12]
 8007c30:	9903      	ldr	r1, [sp, #12]
 8007c32:	1a5b      	subs	r3, r3, r1
 8007c34:	42ab      	cmp	r3, r5
 8007c36:	dcf2      	bgt.n	8007c1e <_printf_i+0x216>
 8007c38:	e7eb      	b.n	8007c12 <_printf_i+0x20a>
 8007c3a:	2500      	movs	r5, #0
 8007c3c:	f104 0619 	add.w	r6, r4, #25
 8007c40:	e7f5      	b.n	8007c2e <_printf_i+0x226>
 8007c42:	bf00      	nop
 8007c44:	08007f15 	.word	0x08007f15
 8007c48:	08007f26 	.word	0x08007f26

08007c4c <memmove>:
 8007c4c:	4288      	cmp	r0, r1
 8007c4e:	b510      	push	{r4, lr}
 8007c50:	eb01 0402 	add.w	r4, r1, r2
 8007c54:	d902      	bls.n	8007c5c <memmove+0x10>
 8007c56:	4284      	cmp	r4, r0
 8007c58:	4623      	mov	r3, r4
 8007c5a:	d807      	bhi.n	8007c6c <memmove+0x20>
 8007c5c:	1e43      	subs	r3, r0, #1
 8007c5e:	42a1      	cmp	r1, r4
 8007c60:	d008      	beq.n	8007c74 <memmove+0x28>
 8007c62:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c66:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c6a:	e7f8      	b.n	8007c5e <memmove+0x12>
 8007c6c:	4402      	add	r2, r0
 8007c6e:	4601      	mov	r1, r0
 8007c70:	428a      	cmp	r2, r1
 8007c72:	d100      	bne.n	8007c76 <memmove+0x2a>
 8007c74:	bd10      	pop	{r4, pc}
 8007c76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c7e:	e7f7      	b.n	8007c70 <memmove+0x24>

08007c80 <_sbrk_r>:
 8007c80:	b538      	push	{r3, r4, r5, lr}
 8007c82:	4d06      	ldr	r5, [pc, #24]	; (8007c9c <_sbrk_r+0x1c>)
 8007c84:	2300      	movs	r3, #0
 8007c86:	4604      	mov	r4, r0
 8007c88:	4608      	mov	r0, r1
 8007c8a:	602b      	str	r3, [r5, #0]
 8007c8c:	f7fb fa7c 	bl	8003188 <_sbrk>
 8007c90:	1c43      	adds	r3, r0, #1
 8007c92:	d102      	bne.n	8007c9a <_sbrk_r+0x1a>
 8007c94:	682b      	ldr	r3, [r5, #0]
 8007c96:	b103      	cbz	r3, 8007c9a <_sbrk_r+0x1a>
 8007c98:	6023      	str	r3, [r4, #0]
 8007c9a:	bd38      	pop	{r3, r4, r5, pc}
 8007c9c:	200004e0 	.word	0x200004e0

08007ca0 <memcpy>:
 8007ca0:	440a      	add	r2, r1
 8007ca2:	4291      	cmp	r1, r2
 8007ca4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ca8:	d100      	bne.n	8007cac <memcpy+0xc>
 8007caa:	4770      	bx	lr
 8007cac:	b510      	push	{r4, lr}
 8007cae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cb2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007cb6:	4291      	cmp	r1, r2
 8007cb8:	d1f9      	bne.n	8007cae <memcpy+0xe>
 8007cba:	bd10      	pop	{r4, pc}

08007cbc <_realloc_r>:
 8007cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cc0:	4680      	mov	r8, r0
 8007cc2:	4614      	mov	r4, r2
 8007cc4:	460e      	mov	r6, r1
 8007cc6:	b921      	cbnz	r1, 8007cd2 <_realloc_r+0x16>
 8007cc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ccc:	4611      	mov	r1, r2
 8007cce:	f7ff bc49 	b.w	8007564 <_malloc_r>
 8007cd2:	b92a      	cbnz	r2, 8007ce0 <_realloc_r+0x24>
 8007cd4:	f7ff fbda 	bl	800748c <_free_r>
 8007cd8:	4625      	mov	r5, r4
 8007cda:	4628      	mov	r0, r5
 8007cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ce0:	f000 f81b 	bl	8007d1a <_malloc_usable_size_r>
 8007ce4:	4284      	cmp	r4, r0
 8007ce6:	4607      	mov	r7, r0
 8007ce8:	d802      	bhi.n	8007cf0 <_realloc_r+0x34>
 8007cea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007cee:	d812      	bhi.n	8007d16 <_realloc_r+0x5a>
 8007cf0:	4621      	mov	r1, r4
 8007cf2:	4640      	mov	r0, r8
 8007cf4:	f7ff fc36 	bl	8007564 <_malloc_r>
 8007cf8:	4605      	mov	r5, r0
 8007cfa:	2800      	cmp	r0, #0
 8007cfc:	d0ed      	beq.n	8007cda <_realloc_r+0x1e>
 8007cfe:	42bc      	cmp	r4, r7
 8007d00:	4622      	mov	r2, r4
 8007d02:	4631      	mov	r1, r6
 8007d04:	bf28      	it	cs
 8007d06:	463a      	movcs	r2, r7
 8007d08:	f7ff ffca 	bl	8007ca0 <memcpy>
 8007d0c:	4631      	mov	r1, r6
 8007d0e:	4640      	mov	r0, r8
 8007d10:	f7ff fbbc 	bl	800748c <_free_r>
 8007d14:	e7e1      	b.n	8007cda <_realloc_r+0x1e>
 8007d16:	4635      	mov	r5, r6
 8007d18:	e7df      	b.n	8007cda <_realloc_r+0x1e>

08007d1a <_malloc_usable_size_r>:
 8007d1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d1e:	1f18      	subs	r0, r3, #4
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	bfbc      	itt	lt
 8007d24:	580b      	ldrlt	r3, [r1, r0]
 8007d26:	18c0      	addlt	r0, r0, r3
 8007d28:	4770      	bx	lr
	...

08007d2c <_init>:
 8007d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d2e:	bf00      	nop
 8007d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d32:	bc08      	pop	{r3}
 8007d34:	469e      	mov	lr, r3
 8007d36:	4770      	bx	lr

08007d38 <_fini>:
 8007d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d3a:	bf00      	nop
 8007d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d3e:	bc08      	pop	{r3}
 8007d40:	469e      	mov	lr, r3
 8007d42:	4770      	bx	lr
